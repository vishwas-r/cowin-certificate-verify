{"ast":null,"code":"/*!\n * Copyright (c) 2018-2019 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n/**\n * Encode/Decode input according to the \"Base64url Encoding\" format as specified\n * in JSON Web Signature (JWS) RFC7517. A URL safe character set is used and\n * trailing '=', line breaks, whitespace, and other characters are omitted.\n * @module base64url-universal\n */\n\nvar _alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_';\nvar _alphabetIdx = [62, -1, -1, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, 64, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, 63, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51];\n/**\n * Encodes input according to the \"Base64url Encoding\" format as specified\n * in JSON Web Signature (JWS) RFC7517. A URL safe character set is used and\n * trailing '=', line breaks, whitespace, and other characters are omitted.\n *\n * @alias module:base64url-universal\n * @param {(Uint8Array | string)} input the data to encode.\n *\n * @return {string} the encoded value.\n */\n\nfunction encode(input) {\n  if (!(input instanceof Uint8Array || typeof input === 'string')) {\n    throw new TypeError('\"input\" be a string or Uint8Array.');\n  }\n\n  if (typeof input === 'string') {\n    // convert input to Uint8Array\n    input = new TextEncoder().encode(input);\n  }\n\n  var output = '';\n  var chr1, chr2, chr3;\n  var i = 0;\n\n  while (i < input.byteLength) {\n    chr1 = input[i++];\n    chr2 = input[i++];\n    chr3 = input[i++]; // encode 4 character group\n\n    output += _alphabet.charAt(chr1 >> 2);\n    output += _alphabet.charAt((chr1 & 3) << 4 | chr2 >> 4);\n\n    if (!isNaN(chr2)) {\n      output += _alphabet.charAt((chr2 & 15) << 2 | chr3 >> 6);\n\n      if (!isNaN(chr3)) {\n        output += _alphabet.charAt(chr3 & 63);\n      }\n    }\n  }\n\n  return output;\n}\n/**\n * Decodes input according to the \"Base64url Encoding\" format as specified\n * in JSON Web Signature (JWS) RFC7517. A URL safe character set is used and\n * trailing '=', line breaks, whitespace, and other characters are omitted.\n *\n * @alias module:base64url-universal\n * @param {string} input the data to decode.\n *\n * @return {Uint8Array} the decoded value.\n */\n\n\nfunction decode(input) {\n  var length = input.length;\n  var mod4 = length % 4;\n\n  if (mod4 === 1) {\n    throw new Error('Illegal base64 string.');\n  }\n\n  var diff = 0;\n\n  if (mod4 > 0) {\n    diff = 4 - mod4;\n    length += diff;\n  }\n\n  var output = new Uint8Array(length / 4 * 3 - diff);\n  var enc1, enc2, enc3, enc4;\n  var i = 0,\n      j = 0;\n\n  while (i < length) {\n    enc1 = _alphabetIdx[input.charCodeAt(i++) - 45];\n    enc2 = _alphabetIdx[input.charCodeAt(i++) - 45];\n    output[j++] = enc1 << 2 | enc2 >> 4;\n\n    if (i < input.length) {\n      // can decode at least 2 bytes\n      enc3 = _alphabetIdx[input.charCodeAt(i++) - 45];\n      output[j++] = (enc2 & 15) << 4 | enc3 >> 2;\n\n      if (i < input.length) {\n        // can decode 3 bytes\n        enc4 = _alphabetIdx[input.charCodeAt(i++) - 45];\n        output[j++] = (enc3 & 3) << 6 | enc4;\n      }\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = {\n  decode: decode,\n  encode: encode\n};","map":{"version":3,"sources":["D:/My Works/Git/cowin-verify/node_modules/base64url-universal/lib/base64url.js"],"names":["_alphabet","_alphabetIdx","encode","input","Uint8Array","TypeError","TextEncoder","output","chr1","chr2","chr3","i","byteLength","charAt","isNaN","decode","length","mod4","Error","diff","enc1","enc2","enc3","enc4","j","charCodeAt","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMA,SAAS,GACb,kEADF;AAEA,IAAMC,YAAY,GAAG,CACnB,EADmB,EACf,CAAC,CADc,EACX,CAAC,CADU,EAEnB,EAFmB,EAEf,EAFe,EAEX,EAFW,EAEP,EAFO,EAEH,EAFG,EAEC,EAFD,EAEK,EAFL,EAES,EAFT,EAEa,EAFb,EAEiB,EAFjB,EAGnB,CAAC,CAHkB,EAGf,CAAC,CAHc,EAGX,CAAC,CAHU,EAGP,EAHO,EAGH,CAAC,CAHE,EAGC,CAAC,CAHF,EAGK,CAAC,CAHN,EAInB,CAJmB,EAIhB,CAJgB,EAIb,CAJa,EAIV,CAJU,EAIP,CAJO,EAIJ,CAJI,EAID,CAJC,EAIE,CAJF,EAIK,CAJL,EAIQ,CAJR,EAIW,EAJX,EAIe,EAJf,EAImB,EAJnB,EAKnB,EALmB,EAKf,EALe,EAKX,EALW,EAKP,EALO,EAKH,EALG,EAKC,EALD,EAKK,EALL,EAKS,EALT,EAKa,EALb,EAKiB,EALjB,EAKqB,EALrB,EAKyB,EALzB,EAK6B,EAL7B,EAMnB,CAAC,CANkB,EAMf,CAAC,CANc,EAMX,CAAC,CANU,EAMP,CAAC,CANM,EAMH,EANG,EAMC,CAAC,CANF,EAOnB,EAPmB,EAOf,EAPe,EAOX,EAPW,EAOP,EAPO,EAOH,EAPG,EAOC,EAPD,EAOK,EAPL,EAOS,EAPT,EAOa,EAPb,EAOiB,EAPjB,EAOqB,EAPrB,EAOyB,EAPzB,EAO6B,EAP7B,EAQnB,EARmB,EAQf,EARe,EAQX,EARW,EAQP,EARO,EAQH,EARG,EAQC,EARD,EAQK,EARL,EAQS,EART,EAQa,EARb,EAQiB,EARjB,EAQqB,EARrB,EAQyB,EARzB,EAQ6B,EAR7B,CAArB;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACrB,MAAG,EAAGA,KAAK,YAAYC,UAAlB,IAAkC,OAAOD,KAAP,KAAiB,QAArD,CAAH,EAAoE;AAClE,UAAM,IAAIE,SAAJ,CAAc,oCAAd,CAAN;AACD;;AACD,MAAG,OAAOF,KAAP,KAAiB,QAApB,EAA8B;AAC5B;AACAA,IAAAA,KAAK,GAAG,IAAIG,WAAJ,GAAkBJ,MAAlB,CAAyBC,KAAzB,CAAR;AACD;;AACD,MAAII,MAAM,GAAG,EAAb;AACA,MAAIC,IAAJ,EAAUC,IAAV,EAAgBC,IAAhB;AACA,MAAIC,CAAC,GAAG,CAAR;;AACA,SAAMA,CAAC,GAAGR,KAAK,CAACS,UAAhB,EAA4B;AAC1BJ,IAAAA,IAAI,GAAGL,KAAK,CAACQ,CAAC,EAAF,CAAZ;AACAF,IAAAA,IAAI,GAAGN,KAAK,CAACQ,CAAC,EAAF,CAAZ;AACAD,IAAAA,IAAI,GAAGP,KAAK,CAACQ,CAAC,EAAF,CAAZ,CAH0B,CAK1B;;AACAJ,IAAAA,MAAM,IAAIP,SAAS,CAACa,MAAV,CAAiBL,IAAI,IAAI,CAAzB,CAAV;AACAD,IAAAA,MAAM,IAAIP,SAAS,CAACa,MAAV,CAAkB,CAACL,IAAI,GAAG,CAAR,KAAc,CAAf,GAAqBC,IAAI,IAAI,CAA9C,CAAV;;AACA,QAAG,CAACK,KAAK,CAACL,IAAD,CAAT,EAAiB;AACfF,MAAAA,MAAM,IAAIP,SAAS,CAACa,MAAV,CAAkB,CAACJ,IAAI,GAAG,EAAR,KAAe,CAAhB,GAAsBC,IAAI,IAAI,CAA/C,CAAV;;AACA,UAAG,CAACI,KAAK,CAACJ,IAAD,CAAT,EAAiB;AACfH,QAAAA,MAAM,IAAIP,SAAS,CAACa,MAAV,CAAiBH,IAAI,GAAG,EAAxB,CAAV;AACD;AACF;AACF;;AACD,SAAOH,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASQ,MAAT,CAAgBZ,KAAhB,EAAuB;AACrB,MAAIa,MAAM,GAAGb,KAAK,CAACa,MAAnB;AACA,MAAMC,IAAI,GAAGD,MAAM,GAAG,CAAtB;;AACA,MAAGC,IAAI,KAAK,CAAZ,EAAe;AACb,UAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AACD;;AACD,MAAIC,IAAI,GAAG,CAAX;;AACA,MAAGF,IAAI,GAAG,CAAV,EAAa;AACXE,IAAAA,IAAI,GAAG,IAAIF,IAAX;AACAD,IAAAA,MAAM,IAAIG,IAAV;AACD;;AAED,MAAMZ,MAAM,GAAG,IAAIH,UAAJ,CAAeY,MAAM,GAAG,CAAT,GAAa,CAAb,GAAiBG,IAAhC,CAAf;AAEA,MAAIC,IAAJ,EAAUC,IAAV,EAAgBC,IAAhB,EAAsBC,IAAtB;AACA,MAAIZ,CAAC,GAAG,CAAR;AAAA,MAAWa,CAAC,GAAG,CAAf;;AAEA,SAAMb,CAAC,GAAGK,MAAV,EAAkB;AAChBI,IAAAA,IAAI,GAAGnB,YAAY,CAACE,KAAK,CAACsB,UAAN,CAAiBd,CAAC,EAAlB,IAAwB,EAAzB,CAAnB;AACAU,IAAAA,IAAI,GAAGpB,YAAY,CAACE,KAAK,CAACsB,UAAN,CAAiBd,CAAC,EAAlB,IAAwB,EAAzB,CAAnB;AAEAJ,IAAAA,MAAM,CAACiB,CAAC,EAAF,CAAN,GAAeJ,IAAI,IAAI,CAAT,GAAeC,IAAI,IAAI,CAArC;;AACA,QAAGV,CAAC,GAAGR,KAAK,CAACa,MAAb,EAAqB;AACnB;AACAM,MAAAA,IAAI,GAAGrB,YAAY,CAACE,KAAK,CAACsB,UAAN,CAAiBd,CAAC,EAAlB,IAAwB,EAAzB,CAAnB;AACAJ,MAAAA,MAAM,CAACiB,CAAC,EAAF,CAAN,GAAe,CAACH,IAAI,GAAG,EAAR,KAAe,CAAhB,GAAsBC,IAAI,IAAI,CAA5C;;AACA,UAAGX,CAAC,GAAGR,KAAK,CAACa,MAAb,EAAqB;AACnB;AACAO,QAAAA,IAAI,GAAGtB,YAAY,CAACE,KAAK,CAACsB,UAAN,CAAiBd,CAAC,EAAlB,IAAwB,EAAzB,CAAnB;AACAJ,QAAAA,MAAM,CAACiB,CAAC,EAAF,CAAN,GAAe,CAACF,IAAI,GAAG,CAAR,KAAc,CAAf,GAAoBC,IAAlC;AACD;AACF;AACF;;AAED,SAAOhB,MAAP;AACD;;AAEDmB,MAAM,CAACC,OAAP,GAAiB;AAACZ,EAAAA,MAAM,EAANA,MAAD;AAASb,EAAAA,MAAM,EAANA;AAAT,CAAjB","sourcesContent":["/*!\n * Copyright (c) 2018-2019 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\n/**\n * Encode/Decode input according to the \"Base64url Encoding\" format as specified\n * in JSON Web Signature (JWS) RFC7517. A URL safe character set is used and\n * trailing '=', line breaks, whitespace, and other characters are omitted.\n * @module base64url-universal\n */\n\nconst _alphabet =\n  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_';\nconst _alphabetIdx = [\n  62, -1, -1,\n  52, 53, 54, 55, 56, 57, 58, 59, 60, 61,\n  -1, -1, -1, 64, -1, -1, -1,\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\n  13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\n  -1, -1, -1, -1, 63, -1,\n  26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,\n  39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51\n];\n\n/**\n * Encodes input according to the \"Base64url Encoding\" format as specified\n * in JSON Web Signature (JWS) RFC7517. A URL safe character set is used and\n * trailing '=', line breaks, whitespace, and other characters are omitted.\n *\n * @alias module:base64url-universal\n * @param {(Uint8Array | string)} input the data to encode.\n *\n * @return {string} the encoded value.\n */\nfunction encode(input) {\n  if(!((input instanceof Uint8Array) || (typeof input === 'string'))) {\n    throw new TypeError('\"input\" be a string or Uint8Array.');\n  }\n  if(typeof input === 'string') {\n    // convert input to Uint8Array\n    input = new TextEncoder().encode(input);\n  }\n  let output = '';\n  let chr1, chr2, chr3;\n  let i = 0;\n  while(i < input.byteLength) {\n    chr1 = input[i++];\n    chr2 = input[i++];\n    chr3 = input[i++];\n\n    // encode 4 character group\n    output += _alphabet.charAt(chr1 >> 2);\n    output += _alphabet.charAt(((chr1 & 3) << 4) | (chr2 >> 4));\n    if(!isNaN(chr2)) {\n      output += _alphabet.charAt(((chr2 & 15) << 2) | (chr3 >> 6));\n      if(!isNaN(chr3)) {\n        output += _alphabet.charAt(chr3 & 63);\n      }\n    }\n  }\n  return output;\n}\n\n/**\n * Decodes input according to the \"Base64url Encoding\" format as specified\n * in JSON Web Signature (JWS) RFC7517. A URL safe character set is used and\n * trailing '=', line breaks, whitespace, and other characters are omitted.\n *\n * @alias module:base64url-universal\n * @param {string} input the data to decode.\n *\n * @return {Uint8Array} the decoded value.\n */\nfunction decode(input) {\n  let length = input.length;\n  const mod4 = length % 4;\n  if(mod4 === 1) {\n    throw new Error('Illegal base64 string.');\n  }\n  let diff = 0;\n  if(mod4 > 0) {\n    diff = 4 - mod4;\n    length += diff;\n  }\n\n  const output = new Uint8Array(length / 4 * 3 - diff);\n\n  let enc1, enc2, enc3, enc4;\n  let i = 0, j = 0;\n\n  while(i < length) {\n    enc1 = _alphabetIdx[input.charCodeAt(i++) - 45];\n    enc2 = _alphabetIdx[input.charCodeAt(i++) - 45];\n\n    output[j++] = (enc1 << 2) | (enc2 >> 4);\n    if(i < input.length) {\n      // can decode at least 2 bytes\n      enc3 = _alphabetIdx[input.charCodeAt(i++) - 45];\n      output[j++] = ((enc2 & 15) << 4) | (enc3 >> 2);\n      if(i < input.length) {\n        // can decode 3 bytes\n        enc4 = _alphabetIdx[input.charCodeAt(i++) - 45];\n        output[j++] = ((enc3 & 3) << 6) | enc4;\n      }\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = {decode, encode};\n"]},"metadata":{},"sourceType":"script"}