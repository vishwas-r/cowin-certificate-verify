{"ast":null,"code":"/*\n * Copyright (c) 2016 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nvar _classCallCheck = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar URDNA2015Sync = require('./URDNA2015Sync');\n\nvar util = require('./util');\n\nmodule.exports = /*#__PURE__*/function (_URDNA2015Sync) {\n  _inherits(URDNA2012Sync, _URDNA2015Sync);\n\n  var _super = _createSuper(URDNA2012Sync);\n\n  function URDNA2012Sync() {\n    var _this;\n\n    _classCallCheck(this, URDNA2012Sync);\n\n    _this = _super.call(this);\n    _this.name = 'URGNA2012';\n    _this.hashAlgorithm = 'sha1';\n    return _this;\n  } // helper for modifying component during Hash First Degree Quads\n\n\n  _createClass(URDNA2012Sync, [{\n    key: \"modifyFirstDegreeComponent\",\n    value: function modifyFirstDegreeComponent(id, component, key) {\n      if (component.termType !== 'BlankNode') {\n        return component;\n      }\n\n      component = util.clone(component);\n\n      if (key === 'name') {\n        component.value = '_:g';\n      } else {\n        component.value = component.value === id ? '_:a' : '_:z';\n      }\n\n      return component;\n    } // helper for getting a related predicate\n\n  }, {\n    key: \"getRelatedPredicate\",\n    value: function getRelatedPredicate(quad) {\n      return quad.predicate.value;\n    } // helper for creating hash to related blank nodes map\n\n  }, {\n    key: \"createHashToRelated\",\n    value: function createHashToRelated(id, issuer) {\n      var self = this; // 1) Create a hash to related blank nodes map for storing hashes that\n      // identify related blank nodes.\n\n      var hashToRelated = {}; // 2) Get a reference, quads, to the list of quads in the blank node to\n      // quads map for the key identifier.\n\n      var quads = self.blankNodeInfo[id].quads; // 3) For each quad in quads:\n\n      for (var i = 0; i < quads.length; ++i) {\n        // 3.1) If the quad's subject is a blank node that does not match\n        // identifier, set hash to the result of the Hash Related Blank Node\n        // algorithm, passing the blank node identifier for subject as related,\n        // quad, path identifier issuer as issuer, and p as position.\n        var quad = quads[i];\n        var position = void 0;\n        var related = void 0;\n\n        if (quad.subject.termType === 'BlankNode' && quad.subject.value !== id) {\n          related = quad.subject.value;\n          position = 'p';\n        } else if (quad.object.termType === 'BlankNode' && quad.object.value !== id) {\n          // 3.2) Otherwise, if quad's object is a blank node that does not match\n          // identifier, to the result of the Hash Related Blank Node algorithm,\n          // passing the blank node identifier for object as related, quad, path\n          // identifier issuer as issuer, and r as position.\n          related = quad.object.value;\n          position = 'r';\n        } else {\n          // 3.3) Otherwise, continue to the next quad.\n          continue;\n        } // 3.4) Add a mapping of hash to the blank node identifier for the\n        // component that matched (subject or object) to hash to related blank\n        // nodes map, adding an entry as necessary.\n\n\n        var hash = self.hashRelatedBlankNode(related, quad, issuer, position);\n\n        if (hash in hashToRelated) {\n          hashToRelated[hash].push(related);\n        } else {\n          hashToRelated[hash] = [related];\n        }\n      }\n\n      return hashToRelated;\n    }\n  }]);\n\n  return URDNA2012Sync;\n}(URDNA2015Sync);","map":{"version":3,"sources":["D:/My Works/Git/cowin-verify/node_modules/rdf-canonize/lib/URGNA2012Sync.js"],"names":["URDNA2015Sync","require","util","module","exports","name","hashAlgorithm","id","component","key","termType","clone","value","quad","predicate","issuer","self","hashToRelated","quads","blankNodeInfo","i","length","position","related","subject","object","hash","hashRelatedBlankNode","push"],"mappings":"AAAA;AACA;AACA;AACA;;;;;;;;;;AAEA,IAAMA,aAAa,GAAGC,OAAO,CAAC,iBAAD,CAA7B;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAApB;;AAEAE,MAAM,CAACC,OAAP;AAAA;;AAAA;;AACE,2BAAc;AAAA;;AAAA;;AACZ;AACA,UAAKC,IAAL,GAAY,WAAZ;AACA,UAAKC,aAAL,GAAqB,MAArB;AAHY;AAIb,GALH,CAOE;;;AAPF;AAAA;AAAA,WAQE,oCAA2BC,EAA3B,EAA+BC,SAA/B,EAA0CC,GAA1C,EAA+C;AAC7C,UAAGD,SAAS,CAACE,QAAV,KAAuB,WAA1B,EAAuC;AACrC,eAAOF,SAAP;AACD;;AACDA,MAAAA,SAAS,GAAGN,IAAI,CAACS,KAAL,CAAWH,SAAX,CAAZ;;AACA,UAAGC,GAAG,KAAK,MAAX,EAAmB;AACjBD,QAAAA,SAAS,CAACI,KAAV,GAAkB,KAAlB;AACD,OAFD,MAEO;AACLJ,QAAAA,SAAS,CAACI,KAAV,GAAmBJ,SAAS,CAACI,KAAV,KAAoBL,EAApB,GAAyB,KAAzB,GAAiC,KAApD;AACD;;AACD,aAAOC,SAAP;AACD,KAnBH,CAqBE;;AArBF;AAAA;AAAA,WAsBE,6BAAoBK,IAApB,EAA0B;AACxB,aAAOA,IAAI,CAACC,SAAL,CAAeF,KAAtB;AACD,KAxBH,CA0BE;;AA1BF;AAAA;AAAA,WA2BE,6BAAoBL,EAApB,EAAwBQ,MAAxB,EAAgC;AAC9B,UAAMC,IAAI,GAAG,IAAb,CAD8B,CAG9B;AACA;;AACA,UAAMC,aAAa,GAAG,EAAtB,CAL8B,CAO9B;AACA;;AACA,UAAMC,KAAK,GAAGF,IAAI,CAACG,aAAL,CAAmBZ,EAAnB,EAAuBW,KAArC,CAT8B,CAW9B;;AACA,WAAI,IAAIE,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,KAAK,CAACG,MAAzB,EAAiC,EAAED,CAAnC,EAAsC;AACpC;AACA;AACA;AACA;AACA,YAAMP,IAAI,GAAGK,KAAK,CAACE,CAAD,CAAlB;AACA,YAAIE,QAAQ,SAAZ;AACA,YAAIC,OAAO,SAAX;;AACA,YAAGV,IAAI,CAACW,OAAL,CAAad,QAAb,KAA0B,WAA1B,IAAyCG,IAAI,CAACW,OAAL,CAAaZ,KAAb,KAAuBL,EAAnE,EAAuE;AACrEgB,UAAAA,OAAO,GAAGV,IAAI,CAACW,OAAL,CAAaZ,KAAvB;AACAU,UAAAA,QAAQ,GAAG,GAAX;AACD,SAHD,MAGO,IACLT,IAAI,CAACY,MAAL,CAAYf,QAAZ,KAAyB,WAAzB,IAAwCG,IAAI,CAACY,MAAL,CAAYb,KAAZ,KAAsBL,EADzD,EAC6D;AAClE;AACA;AACA;AACA;AACAgB,UAAAA,OAAO,GAAGV,IAAI,CAACY,MAAL,CAAYb,KAAtB;AACAU,UAAAA,QAAQ,GAAG,GAAX;AACD,SARM,MAQA;AACL;AACA;AACD,SAtBmC,CAuBpC;AACA;AACA;;;AACA,YAAMI,IAAI,GAAGV,IAAI,CAACW,oBAAL,CAA0BJ,OAA1B,EAAmCV,IAAnC,EAAyCE,MAAzC,EAAiDO,QAAjD,CAAb;;AACA,YAAGI,IAAI,IAAIT,aAAX,EAA0B;AACxBA,UAAAA,aAAa,CAACS,IAAD,CAAb,CAAoBE,IAApB,CAAyBL,OAAzB;AACD,SAFD,MAEO;AACLN,UAAAA,aAAa,CAACS,IAAD,CAAb,GAAsB,CAACH,OAAD,CAAtB;AACD;AACF;;AAED,aAAON,aAAP;AACD;AA1EH;;AAAA;AAAA,EAA6CjB,aAA7C","sourcesContent":["/*\n * Copyright (c) 2016 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst URDNA2015Sync = require('./URDNA2015Sync');\nconst util = require('./util');\n\nmodule.exports = class URDNA2012Sync extends URDNA2015Sync {\n  constructor() {\n    super();\n    this.name = 'URGNA2012';\n    this.hashAlgorithm = 'sha1';\n  }\n\n  // helper for modifying component during Hash First Degree Quads\n  modifyFirstDegreeComponent(id, component, key) {\n    if(component.termType !== 'BlankNode') {\n      return component;\n    }\n    component = util.clone(component);\n    if(key === 'name') {\n      component.value = '_:g';\n    } else {\n      component.value = (component.value === id ? '_:a' : '_:z');\n    }\n    return component;\n  }\n\n  // helper for getting a related predicate\n  getRelatedPredicate(quad) {\n    return quad.predicate.value;\n  }\n\n  // helper for creating hash to related blank nodes map\n  createHashToRelated(id, issuer) {\n    const self = this;\n\n    // 1) Create a hash to related blank nodes map for storing hashes that\n    // identify related blank nodes.\n    const hashToRelated = {};\n\n    // 2) Get a reference, quads, to the list of quads in the blank node to\n    // quads map for the key identifier.\n    const quads = self.blankNodeInfo[id].quads;\n\n    // 3) For each quad in quads:\n    for(let i = 0; i < quads.length; ++i) {\n      // 3.1) If the quad's subject is a blank node that does not match\n      // identifier, set hash to the result of the Hash Related Blank Node\n      // algorithm, passing the blank node identifier for subject as related,\n      // quad, path identifier issuer as issuer, and p as position.\n      const quad = quads[i];\n      let position;\n      let related;\n      if(quad.subject.termType === 'BlankNode' && quad.subject.value !== id) {\n        related = quad.subject.value;\n        position = 'p';\n      } else if(\n        quad.object.termType === 'BlankNode' && quad.object.value !== id) {\n        // 3.2) Otherwise, if quad's object is a blank node that does not match\n        // identifier, to the result of the Hash Related Blank Node algorithm,\n        // passing the blank node identifier for object as related, quad, path\n        // identifier issuer as issuer, and r as position.\n        related = quad.object.value;\n        position = 'r';\n      } else {\n        // 3.3) Otherwise, continue to the next quad.\n        continue;\n      }\n      // 3.4) Add a mapping of hash to the blank node identifier for the\n      // component that matched (subject or object) to hash to related blank\n      // nodes map, adding an entry as necessary.\n      const hash = self.hashRelatedBlankNode(related, quad, issuer, position);\n      if(hash in hashToRelated) {\n        hashToRelated[hash].push(related);\n      } else {\n        hashToRelated[hash] = [related];\n      }\n    }\n\n    return hashToRelated;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}