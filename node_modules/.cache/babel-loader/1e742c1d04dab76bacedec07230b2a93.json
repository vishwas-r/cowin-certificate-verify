{"ast":null,"code":"/*!\n * Copyright (c) 2018 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nvar _classCallCheck = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _inherits = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _require = require('crypto-ld'),\n    Ed25519KeyPair = _require.Ed25519KeyPair;\n\nvar JwsLinkedDataSignature = require('./JwsLinkedDataSignature');\n\nmodule.exports = /*#__PURE__*/function (_JwsLinkedDataSignatu) {\n  _inherits(Ed25519Signature2018, _JwsLinkedDataSignatu);\n\n  var _super = _createSuper(Ed25519Signature2018);\n\n  /**\n   * @param type {string} Provided by subclass.\n   *\n   * One of these parameters is required to use a suite for signing:\n   *\n   * @param [creator] {string} A key id URL to the paired public key.\n   * @param [verificationMethod] {string} A key id URL to the paired public key.\n   *\n   * This parameter is required for signing:\n   *\n   * @param [signer] {function} an optional signer.\n   *\n   * Advanced optional parameters and overrides:\n   *\n   * @param [proof] {object} a JSON-LD document with options to use for\n   *   the `proof` node (e.g. any other custom fields can be provided here\n   *   using a context different from security-v2).\n   * @param [date] {string|Date} signing date to use if not passed.\n   * @param [key] {LDKeyPair} an optional crypto-ld KeyPair.\n   * @param [useNativeCanonize] {boolean} true to use a native canonize\n   *   algorithm.\n   */\n  function Ed25519Signature2018() {\n    var _this;\n\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        signer = _ref.signer,\n        key = _ref.key,\n        creator = _ref.creator,\n        verificationMethod = _ref.verificationMethod,\n        proof = _ref.proof,\n        date = _ref.date,\n        useNativeCanonize = _ref.useNativeCanonize;\n\n    _classCallCheck(this, Ed25519Signature2018);\n\n    _this = _super.call(this, {\n      type: 'Ed25519Signature2018',\n      alg: 'EdDSA',\n      LDKeyClass: Ed25519KeyPair,\n      creator: creator,\n      verificationMethod: verificationMethod,\n      signer: signer,\n      key: key,\n      proof: proof,\n      date: date,\n      useNativeCanonize: useNativeCanonize\n    });\n    _this.requiredKeyType = 'Ed25519VerificationKey2018';\n    return _this;\n  }\n\n  return Ed25519Signature2018;\n}(JwsLinkedDataSignature);","map":{"version":3,"sources":["D:/My Works/Git/cowin-verify/node_modules/jsonld-signatures/lib/suites/Ed25519Signature2018.js"],"names":["require","Ed25519KeyPair","JwsLinkedDataSignature","module","exports","signer","key","creator","verificationMethod","proof","date","useNativeCanonize","type","alg","LDKeyClass","requiredKeyType"],"mappings":"AAAA;AACA;AACA;AACA;;;;;;;;AAEA,eAAyBA,OAAO,CAAC,WAAD,CAAhC;AAAA,IAAOC,cAAP,YAAOA,cAAP;;AACA,IAAMC,sBAAsB,GAAGF,OAAO,CAAC,0BAAD,CAAtC;;AAEAG,MAAM,CAACC,OAAP;AAAA;;AAAA;;AACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,kCAEQ;AAAA;;AAAA,mFAAJ,EAAI;AAAA,QADNC,MACM,QADNA,MACM;AAAA,QADEC,GACF,QADEA,GACF;AAAA,QADOC,OACP,QADOA,OACP;AAAA,QADgBC,kBAChB,QADgBA,kBAChB;AAAA,QADoCC,KACpC,QADoCA,KACpC;AAAA,QAD2CC,IAC3C,QAD2CA,IAC3C;AAAA,QADiDC,iBACjD,QADiDA,iBACjD;;AAAA;;AACN,8BAAM;AACJC,MAAAA,IAAI,EAAE,sBADF;AAC0BC,MAAAA,GAAG,EAAE,OAD/B;AACwCC,MAAAA,UAAU,EAAEb,cADpD;AAEJM,MAAAA,OAAO,EAAPA,OAFI;AAEKC,MAAAA,kBAAkB,EAAlBA,kBAFL;AAEyBH,MAAAA,MAAM,EAANA,MAFzB;AAEiCC,MAAAA,GAAG,EAAHA,GAFjC;AAEsCG,MAAAA,KAAK,EAALA,KAFtC;AAE6CC,MAAAA,IAAI,EAAJA,IAF7C;AAGJC,MAAAA,iBAAiB,EAAjBA;AAHI,KAAN;AAIA,UAAKI,eAAL,GAAuB,4BAAvB;AALM;AAMP;;AA/BH;AAAA,EAAoDb,sBAApD","sourcesContent":["/*!\n * Copyright (c) 2018 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst {Ed25519KeyPair} = require('crypto-ld');\nconst JwsLinkedDataSignature = require('./JwsLinkedDataSignature');\n\nmodule.exports = class Ed25519Signature2018 extends JwsLinkedDataSignature {\n  /**\n   * @param type {string} Provided by subclass.\n   *\n   * One of these parameters is required to use a suite for signing:\n   *\n   * @param [creator] {string} A key id URL to the paired public key.\n   * @param [verificationMethod] {string} A key id URL to the paired public key.\n   *\n   * This parameter is required for signing:\n   *\n   * @param [signer] {function} an optional signer.\n   *\n   * Advanced optional parameters and overrides:\n   *\n   * @param [proof] {object} a JSON-LD document with options to use for\n   *   the `proof` node (e.g. any other custom fields can be provided here\n   *   using a context different from security-v2).\n   * @param [date] {string|Date} signing date to use if not passed.\n   * @param [key] {LDKeyPair} an optional crypto-ld KeyPair.\n   * @param [useNativeCanonize] {boolean} true to use a native canonize\n   *   algorithm.\n   */\n  constructor({\n    signer, key, creator, verificationMethod, proof, date, useNativeCanonize\n  } = {}) {\n    super({\n      type: 'Ed25519Signature2018', alg: 'EdDSA', LDKeyClass: Ed25519KeyPair,\n      creator, verificationMethod, signer, key, proof, date,\n      useNativeCanonize});\n    this.requiredKeyType = 'Ed25519VerificationKey2018';\n  }\n};\n"]},"metadata":{},"sourceType":"script"}