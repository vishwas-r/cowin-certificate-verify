{"ast":null,"code":"/*\n * Copyright (c) 2017-2018 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nvar env = require('./env');\n\nvar forge = require('node-forge');\n\nvar api = {};\nmodule.exports = api;\napi.createJws = createJwsFactory();\n/**\n * Converts the given date into W3C datetime format (eg: 2011-03-09T21:55:41Z).\n *\n * @param date the date to convert.\n *\n * @return the date in W3C datetime format.\n */\n\napi.w3cDate = function (date) {\n  if (date === undefined || date === null) {\n    date = new Date();\n  } else if (typeof date === 'number' || typeof date === 'string') {\n    date = new Date(date);\n  }\n\n  var str = date.toISOString();\n  return str.substr(0, str.length - 5) + 'Z';\n};\n/**\n * Encodes input according to the \"Base64url Encoding\" format as specified\n * in JSON Web Signature (JWS) RFC7517. A URL safe character set is used and\n * trailing '=', line breaks, whitespace, and other characters are omitted.\n *\n * @param data {Uint8Array} the data to encode.\n *\n * @return {String} the encoded value.\n */\n\n\napi.encodeBase64Url = base64urlEncodeFactory();\n/**\n * Decodes input according to the \"Base64url Encoding\" format as specified\n * in JSON Web Signature (JWS) RFC7517. A URL safe character set is used and\n * trailing '=', line breaks, whitespace, and other characters are omitted.\n *\n * @param string {String} the string to decode.\n *\n * @return {Uint8Array} the decoded value.\n */\n\napi.decodeBase64Url = base64urlDecodeFactory();\n/**\n * Decodes input according to the \"Base64url Encoding\" format as specified\n * in JSON Web Signature (JWS) RFC7517. A URL safe character set is used and\n * trailing '=', line breaks, whitespace, and other characters are omitted.\n *\n * @param string {String} the string to decode.\n *\n * @return {String} the decoded value as a string.\n */\n\napi.decodeBase64UrlToString = base64urlDecodeToStringFactory();\n/**\n * Hashes a string of data using SHA-256.\n *\n * @param string {String} the string to hash.\n * @param encoding {String} the string's encoding (e.g. 'utf8').\n *\n * @return {Uint8Array} the hash digest.\n */\n\napi.sha256 = sha256Factory();\n/**\n * Concatenates two Uint8Arrays.\n *\n * @param b1 {Uint8Array}.\n * @param b2 {Uint8Array}.\n *\n * @return {Uint8Array} the result.\n */\n\napi.concat = concatFactory();\n/**\n * Converts a string to a Uint8Array.\n *\n * @param string {String}.\n * @param encoding {String}, e.g. 'utf8'.\n *\n * @return {Uint8Array} the result.\n */\n\napi.stringToBytes = stringToBytesFactory();\n\nfunction stringToBytesFactory() {\n  if (env.nodejs) {\n    return function (string, encoding) {\n      var buffer = Buffer.from(string, encoding);\n      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.length);\n    };\n  }\n\n  return function (string, encoding) {\n    var buffer = new forge.util.ByteBuffer(string, encoding);\n    return forge.util.binary.raw.decode(buffer.getBytes());\n  };\n}\n\nfunction concatFactory() {\n  if (env.nodejs) {\n    return function (b1, b2) {\n      var buffer = Buffer.concat([Buffer.from(b1.buffer, b1.byteOffset, b1.length), Buffer.from(b2.buffer, b2.byteOffset, b2.length)]);\n      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.length);\n    };\n  }\n\n  return function (b1, b2) {\n    var rval = new Uint8Array(b1.length + b2.length);\n    rval.set(b1, 0);\n    rval.set(b2, b1.length);\n    return rval;\n  };\n}\n\nfunction sha256Factory() {\n  if (env.nodejs) {\n    var crypto = require('crypto');\n\n    return function (string, encoding) {\n      var hash = crypto.createHash('sha256');\n      hash.update(string, encoding);\n      var buffer = hash.digest();\n      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.length);\n    };\n  }\n\n  return function (string, encoding) {\n    var md = forge.md.sha256.create();\n    md.update(string, encoding || 'utf8');\n    var buffer = md.digest();\n    return forge.util.binary.raw.decode(buffer.getBytes());\n  };\n}\n\nfunction createJwsFactory() {\n  if (env.nodejs) {\n    return function (_ref) {\n      var encodedHeader = _ref.encodedHeader,\n          verifyData = _ref.verifyData;\n      var buffer = Buffer.concat([Buffer.from(encodedHeader + '.', 'utf8'), Buffer.from(verifyData.buffer, verifyData.byteOffset, verifyData.length)]);\n      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.length);\n    };\n  }\n\n  return function (_ref2) {\n    var encodedHeader = _ref2.encodedHeader,\n        verifyData = _ref2.verifyData;\n    var buffer = new forge.util.ByteBuffer(encodedHeader + '.', 'utf8');\n    var binaryString = forge.util.binary.raw.encode(verifyData);\n    buffer.putBytes(binaryString);\n    return forge.util.binary.raw.decode(buffer.getBytes());\n  };\n}\n\nfunction base64urlEncodeFactory() {\n  if (env.nodejs) {\n    var base64url = require('base64url');\n\n    return function (data) {\n      if (typeof data === 'string') {\n        return base64url(data);\n      }\n\n      return base64url(Buffer.from(data.buffer, data.byteOffset, data.length));\n    };\n  }\n\n  return function (data) {\n    var binaryString;\n\n    if (typeof data === 'string') {\n      binaryString = forge.util.encodeUtf8(data);\n    } else {\n      binaryString = forge.util.binary.raw.encode(data);\n    }\n\n    var enc = forge.util.encode64(binaryString);\n    return enc.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n  };\n}\n\nfunction base64urlDecodeFactory() {\n  if (env.nodejs) {\n    var base64url = require('base64url');\n\n    return function (string) {\n      var buffer = base64url.toBuffer(string);\n      return new Uint8Array(buffer.buffer, buffer.offset, buffer.length);\n    };\n  }\n\n  return function (string) {\n    // FIXME: forge supports alternative alphabets now -- use that instead?\n    // convert to regular base64 encoding and then decode\n    var base64 = string.replace(/-/g, '+').replace(/_/g, '/');\n    var mod4 = base64.length % 4;\n\n    if (mod4 === 0) {// pass\n    } else if (mod4 === 2) {\n      base64 = base64 + '==';\n    } else if (mod4 === 3) {\n      base64 = base64 + '=';\n    } else {\n      throw new Error('Illegal base64 string.');\n    }\n\n    return forge.util.binary.base64.decode(base64);\n  };\n}\n\nfunction base64urlDecodeToStringFactory() {\n  if (env.nodejs) {\n    var base64url = require('base64url');\n\n    return function (string) {\n      return base64url.decode(string);\n    };\n  }\n\n  return function (string) {\n    // FIXME: forge supports alternative alphabets now -- use that instead?\n    // convert to regular base64 encoding and then decode\n    var base64 = string.replace(/-/g, '+').replace(/_/g, '/');\n    var mod4 = base64.length % 4;\n\n    if (mod4 === 0) {// pass\n    } else if (mod4 === 2) {\n      base64 = base64 + '==';\n    } else if (mod4 === 3) {\n      base64 = base64 + '=';\n    } else {\n      throw new Error('Illegal base64 string.');\n    }\n\n    var binaryString = forge.util.decode64(base64);\n    return forge.util.decodeUtf8(binaryString);\n  };\n}","map":{"version":3,"sources":["D:/My Works/Git/cowin-verify/node_modules/jsonld-signatures/lib/util.js"],"names":["env","require","forge","api","module","exports","createJws","createJwsFactory","w3cDate","date","undefined","Date","str","toISOString","substr","length","encodeBase64Url","base64urlEncodeFactory","decodeBase64Url","base64urlDecodeFactory","decodeBase64UrlToString","base64urlDecodeToStringFactory","sha256","sha256Factory","concat","concatFactory","stringToBytes","stringToBytesFactory","nodejs","string","encoding","buffer","Buffer","from","Uint8Array","byteOffset","util","ByteBuffer","binary","raw","decode","getBytes","b1","b2","rval","set","crypto","hash","createHash","update","digest","md","create","encodedHeader","verifyData","binaryString","encode","putBytes","base64url","data","encodeUtf8","enc","encode64","replace","toBuffer","offset","base64","mod4","Error","decode64","decodeUtf8"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2017-2018 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst env = require('./env');\nconst forge = require('node-forge');\n\nconst api = {};\nmodule.exports = api;\n\napi.createJws = createJwsFactory();\n\n/**\n * Converts the given date into W3C datetime format (eg: 2011-03-09T21:55:41Z).\n *\n * @param date the date to convert.\n *\n * @return the date in W3C datetime format.\n */\napi.w3cDate = date => {\n  if(date === undefined || date === null) {\n    date = new Date();\n  } else if(typeof date === 'number' || typeof date === 'string') {\n    date = new Date(date);\n  }\n  const str = date.toISOString();\n  return str.substr(0, str.length - 5) + 'Z';\n};\n\n/**\n * Encodes input according to the \"Base64url Encoding\" format as specified\n * in JSON Web Signature (JWS) RFC7517. A URL safe character set is used and\n * trailing '=', line breaks, whitespace, and other characters are omitted.\n *\n * @param data {Uint8Array} the data to encode.\n *\n * @return {String} the encoded value.\n */\napi.encodeBase64Url = base64urlEncodeFactory();\n\n/**\n * Decodes input according to the \"Base64url Encoding\" format as specified\n * in JSON Web Signature (JWS) RFC7517. A URL safe character set is used and\n * trailing '=', line breaks, whitespace, and other characters are omitted.\n *\n * @param string {String} the string to decode.\n *\n * @return {Uint8Array} the decoded value.\n */\napi.decodeBase64Url = base64urlDecodeFactory();\n\n/**\n * Decodes input according to the \"Base64url Encoding\" format as specified\n * in JSON Web Signature (JWS) RFC7517. A URL safe character set is used and\n * trailing '=', line breaks, whitespace, and other characters are omitted.\n *\n * @param string {String} the string to decode.\n *\n * @return {String} the decoded value as a string.\n */\napi.decodeBase64UrlToString = base64urlDecodeToStringFactory();\n\n/**\n * Hashes a string of data using SHA-256.\n *\n * @param string {String} the string to hash.\n * @param encoding {String} the string's encoding (e.g. 'utf8').\n *\n * @return {Uint8Array} the hash digest.\n */\napi.sha256 = sha256Factory();\n\n/**\n * Concatenates two Uint8Arrays.\n *\n * @param b1 {Uint8Array}.\n * @param b2 {Uint8Array}.\n *\n * @return {Uint8Array} the result.\n */\napi.concat = concatFactory();\n\n/**\n * Converts a string to a Uint8Array.\n *\n * @param string {String}.\n * @param encoding {String}, e.g. 'utf8'.\n *\n * @return {Uint8Array} the result.\n */\napi.stringToBytes = stringToBytesFactory();\n\nfunction stringToBytesFactory() {\n  if(env.nodejs) {\n    return (string, encoding) => {\n      const buffer = Buffer.from(string, encoding);\n      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.length);\n    };\n  }\n  return (string, encoding) => {\n    const buffer = new forge.util.ByteBuffer(string, encoding);\n    return forge.util.binary.raw.decode(buffer.getBytes());\n  };\n}\n\nfunction concatFactory() {\n  if(env.nodejs) {\n    return (b1, b2) => {\n      const buffer = Buffer.concat([\n        Buffer.from(b1.buffer, b1.byteOffset, b1.length),\n        Buffer.from(b2.buffer, b2.byteOffset, b2.length)]);\n      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.length);\n    };\n  }\n  return (b1, b2) => {\n    const rval = new Uint8Array(b1.length + b2.length);\n    rval.set(b1, 0);\n    rval.set(b2, b1.length);\n    return rval;\n  };\n}\n\nfunction sha256Factory() {\n  if(env.nodejs) {\n    const crypto = require('crypto');\n    return (string, encoding) => {\n      const hash = crypto.createHash('sha256');\n      hash.update(string, encoding);\n      const buffer = hash.digest();\n      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.length);\n    };\n  }\n  return (string, encoding) => {\n    const md = forge.md.sha256.create();\n    md.update(string, encoding || 'utf8');\n    const buffer = md.digest();\n    return forge.util.binary.raw.decode(buffer.getBytes());\n  };\n}\n\nfunction createJwsFactory() {\n  if(env.nodejs) {\n    return ({encodedHeader, verifyData}) => {\n      const buffer = Buffer.concat([\n        Buffer.from(encodedHeader + '.', 'utf8'),\n        Buffer.from(verifyData.buffer, verifyData.byteOffset, verifyData.length)\n      ]);\n      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.length);\n    };\n  }\n  return ({encodedHeader, verifyData}) => {\n    const buffer = new forge.util.ByteBuffer(encodedHeader + '.', 'utf8');\n    const binaryString = forge.util.binary.raw.encode(verifyData);\n    buffer.putBytes(binaryString);\n    return forge.util.binary.raw.decode(buffer.getBytes());\n  };\n}\n\nfunction base64urlEncodeFactory() {\n  if(env.nodejs) {\n    const base64url = require('base64url');\n    return data => {\n      if(typeof data === 'string') {\n        return base64url(data);\n      }\n      return base64url(Buffer.from(data.buffer, data.byteOffset, data.length));\n    };\n  }\n  return data => {\n    let binaryString;\n    if(typeof data === 'string') {\n      binaryString = forge.util.encodeUtf8(data);\n    } else {\n      binaryString = forge.util.binary.raw.encode(data);\n    }\n    const enc = forge.util.encode64(binaryString);\n    return enc.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n  };\n}\n\nfunction base64urlDecodeFactory() {\n  if(env.nodejs) {\n    const base64url = require('base64url');\n    return string => {\n      const buffer = base64url.toBuffer(string);\n      return new Uint8Array(buffer.buffer, buffer.offset, buffer.length);\n    };\n  }\n  return string => {\n    // FIXME: forge supports alternative alphabets now -- use that instead?\n    // convert to regular base64 encoding and then decode\n    let base64 = string.replace(/-/g, '+').replace(/_/g, '/');\n    const mod4 = base64.length % 4;\n    if(mod4 === 0) {\n      // pass\n    } else if(mod4 === 2) {\n      base64 = base64 + '==';\n    } else if(mod4 === 3) {\n      base64 = base64 + '=';\n    } else {\n      throw new Error('Illegal base64 string.');\n    }\n    return forge.util.binary.base64.decode(base64);\n  };\n}\n\nfunction base64urlDecodeToStringFactory() {\n  if(env.nodejs) {\n    const base64url = require('base64url');\n    return string => base64url.decode(string);\n  }\n  return string => {\n    // FIXME: forge supports alternative alphabets now -- use that instead?\n    // convert to regular base64 encoding and then decode\n    let base64 = string.replace(/-/g, '+').replace(/_/g, '/');\n    const mod4 = base64.length % 4;\n    if(mod4 === 0) {\n      // pass\n    } else if(mod4 === 2) {\n      base64 = base64 + '==';\n    } else if(mod4 === 3) {\n      base64 = base64 + '=';\n    } else {\n      throw new Error('Illegal base64 string.');\n    }\n    const binaryString = forge.util.decode64(base64);\n    return forge.util.decodeUtf8(binaryString);\n  };\n}\n"]},"metadata":{},"sourceType":"script"}