{"ast":null,"code":"/*!\n * Copyright (c) 2017-2018 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nvar _regeneratorRuntime = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar jsonld = require('jsonld');\n\nvar forge = require('node-forge');\n\nvar LinkedDataSignature2015 = require('./LinkedDataSignature2015');\n\nmodule.exports = /*#__PURE__*/function (_LinkedDataSignature) {\n  _inherits(GraphSignature2012, _LinkedDataSignature);\n\n  var _super = _createSuper(GraphSignature2012);\n\n  function GraphSignature2012() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        privateKeyPem = _ref.privateKeyPem,\n        publicKeyPem = _ref.publicKeyPem,\n        creator = _ref.creator,\n        date = _ref.date,\n        domain = _ref.domain,\n        nonce = _ref.nonce;\n\n    _classCallCheck(this, GraphSignature2012);\n\n    return _super.call(this, {\n      type: 'GraphSignature2012',\n      privateKeyPem: privateKeyPem,\n      publicKeyPem: publicKeyPem,\n      creator: creator,\n      date: date,\n      domain: domain,\n      nonce: nonce\n    });\n  }\n\n  _createClass(GraphSignature2012, [{\n    key: \"canonize\",\n    value: function () {\n      var _canonize = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(input, _ref2) {\n        var documentLoader, expansionMap, skipExpansion;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                documentLoader = _ref2.documentLoader, expansionMap = _ref2.expansionMap, skipExpansion = _ref2.skipExpansion;\n                return _context.abrupt(\"return\", jsonld.canonize(input, {\n                  algorithm: 'URGNA2012',\n                  format: 'application/n-quads',\n                  documentLoader: documentLoader,\n                  expansionMap: expansionMap,\n                  skipExpansion: skipExpansion\n                }));\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function canonize(_x, _x2) {\n        return _canonize.apply(this, arguments);\n      }\n\n      return canonize;\n    }()\n    /**\n     * @param document {object} to be signed/verified.\n     * @param proof {object}\n     * @param documentLoader {function}\n     * @param expansionMap {function}\n     * @param compactProof {boolean}\n     *\n     * @returns {Promise<{Uint8Array}>}.\n     */\n\n  }, {\n    key: \"createVerifyData\",\n    value: function () {\n      var _createVerifyData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref3) {\n        var document, proof, documentLoader, expansionMap, c14n, verifyData, buffer;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                document = _ref3.document, proof = _ref3.proof, documentLoader = _ref3.documentLoader, expansionMap = _ref3.expansionMap;\n                _context2.next = 3;\n                return this.canonize(document, {\n                  documentLoader: documentLoader,\n                  expansionMap: expansionMap\n                });\n\n              case 3:\n                c14n = _context2.sent;\n                verifyData = '';\n\n                if (proof.nonce !== null && proof.nonce !== undefined) {\n                  verifyData += proof.nonce;\n                }\n\n                verifyData += proof.created;\n                verifyData += c14n;\n\n                if (proof.domain !== null && proof.domain !== undefined) {\n                  verifyData += '@' + proof.domain;\n                }\n\n                buffer = new forge.util.ByteBuffer(verifyData, 'utf8');\n                return _context2.abrupt(\"return\", forge.util.binary.raw.decode(buffer.getBytes()));\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function createVerifyData(_x3) {\n        return _createVerifyData.apply(this, arguments);\n      }\n\n      return createVerifyData;\n    }()\n  }]);\n\n  return GraphSignature2012;\n}(LinkedDataSignature2015);","map":{"version":3,"sources":["D:/My Works/Git/cowin-verify/node_modules/jsonld-signatures/lib/suites/GraphSignature2012.js"],"names":["jsonld","require","forge","LinkedDataSignature2015","module","exports","privateKeyPem","publicKeyPem","creator","date","domain","nonce","type","input","documentLoader","expansionMap","skipExpansion","canonize","algorithm","format","document","proof","c14n","verifyData","undefined","created","buffer","util","ByteBuffer","binary","raw","decode","getBytes"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2017-2018 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst jsonld = require('jsonld');\nconst forge = require('node-forge');\nconst LinkedDataSignature2015 = require('./LinkedDataSignature2015');\n\nmodule.exports = class GraphSignature2012 extends LinkedDataSignature2015 {\n  constructor({\n    privateKeyPem, publicKeyPem, creator, date, domain, nonce} = {}) {\n    super({\n      type: 'GraphSignature2012',\n      privateKeyPem, publicKeyPem,\n      creator, date, domain, nonce});\n  }\n\n  async canonize(\n    input, {documentLoader, expansionMap, skipExpansion}) {\n    return jsonld.canonize(input, {\n      algorithm: 'URGNA2012',\n      format: 'application/n-quads',\n      documentLoader,\n      expansionMap,\n      skipExpansion\n    });\n  }\n\n  /**\n   * @param document {object} to be signed/verified.\n   * @param proof {object}\n   * @param documentLoader {function}\n   * @param expansionMap {function}\n   * @param compactProof {boolean}\n   *\n   * @returns {Promise<{Uint8Array}>}.\n   */\n  async createVerifyData({\n    document, proof, documentLoader, expansionMap}) {\n    const c14n = await this.canonize(document, {\n      documentLoader,\n      expansionMap\n    });\n\n    let verifyData = '';\n    if(proof.nonce !== null && proof.nonce !== undefined) {\n      verifyData += proof.nonce;\n    }\n    verifyData += proof.created;\n    verifyData += c14n;\n    if(proof.domain !== null && proof.domain !== undefined) {\n      verifyData += '@' + proof.domain;\n    }\n    const buffer = new forge.util.ByteBuffer(verifyData, 'utf8');\n    return forge.util.binary.raw.decode(buffer.getBytes());\n  }\n};\n"]},"metadata":{},"sourceType":"script"}