{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMemoryGrowTimestamp = exports.getInstance = void 0;\n\nvar load_1 = require(\"./load\");\n\nvar inst = null;\nvar HEAP32 = new Int32Array();\n\nvar clock_gettime = function clock_gettime(clk_id, tp) {\n  var now = Date.now();\n  HEAP32[tp >> 2] = now / 1e3 | 0;\n  HEAP32[tp + 4 >> 2] = now % 1e3 * 1e3 * 1e3 | 0;\n  return 0;\n};\n\nvar lastGrowTimestamp = 0;\n\nvar emscripten_notify_memory_growth = function emscripten_notify_memory_growth(idx) {\n  if (lastGrowTimestamp) {\n    console.info('zbar.wasm: Memory Grow: ', inst.memory.buffer.byteLength);\n  }\n\n  lastGrowTimestamp = Date.now();\n  HEAP32 = new Int32Array(inst.memory.buffer);\n};\n\nvar importObj = {\n  env: {\n    clock_gettime: clock_gettime,\n    emscripten_notify_memory_growth: emscripten_notify_memory_growth\n  }\n};\n\nvar instPromise = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  var res;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return load_1.loadWasmInstance(importObj);\n\n        case 2:\n          res = _context.sent;\n\n          if (res) {\n            _context.next = 5;\n            break;\n          }\n\n          throw Error('WASM was not loaded');\n\n        case 5:\n          inst = res.exports;\n          emscripten_notify_memory_growth(0);\n          return _context.abrupt(\"return\", inst);\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}))();\n\nexports.getInstance = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return instPromise;\n\n        case 2:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _callee2);\n}));\n\nexports.getMemoryGrowTimestamp = function () {\n  return lastGrowTimestamp;\n};","map":{"version":3,"sources":["../src/instance.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAGA,IAAI,IAAI,GAAgB,IAAxB;AACA,IAAI,MAAM,GAAG,IAAI,UAAJ,EAAb;;AAEA,IAAM,aAAa,GAAG,SAAhB,aAAgB,CAAC,MAAD,EAAiB,EAAjB,EAAuC;AAC3D,MAAM,GAAG,GAAG,IAAI,CAAC,GAAL,EAAZ;AACA,EAAA,MAAM,CAAC,EAAE,IAAI,CAAP,CAAN,GAAmB,GAAG,GAAG,GAAP,GAAc,CAAhC;AACA,EAAA,MAAM,CAAE,EAAE,GAAG,CAAN,IAAY,CAAb,CAAN,GAA0B,GAAG,GAAG,GAAP,GAAc,GAAd,GAAoB,GAArB,GAA4B,CAApD;AACA,SAAO,CAAP;AACD,CALD;;AAOA,IAAI,iBAAiB,GAAG,CAAxB;;AACA,IAAM,+BAA+B,GAAG,SAAlC,+BAAkC,CAAC,GAAD,EAAgB;AACtD,MAAI,iBAAJ,EAAuB;AACrB,IAAA,OAAO,CAAC,IAAR,CAAa,0BAAb,EAAyC,IAAK,CAAC,MAAN,CAAa,MAAb,CAAoB,UAA7D;AACD;;AACD,EAAA,iBAAiB,GAAG,IAAI,CAAC,GAAL,EAApB;AACA,EAAA,MAAM,GAAG,IAAI,UAAJ,CAAe,IAAK,CAAC,MAAN,CAAa,MAA5B,CAAT;AACD,CAND;;AAQA,IAAM,SAAS,GAAG;AAChB,EAAA,GAAG,EAAE;AACH,IAAA,aAAa,EAAb,aADG;AAEH,IAAA,+BAA+B,EAA/B;AAFG;AADW,CAAlB;;AAOA,IAAI,WAAW,GAAG,yDAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACC,MAAA,CAAA,gBAAA,CAAiB,SAAjB,CADD;;AAAA;AACX,UAAA,GADW;;AAAA,cAEZ,GAFY;AAAA;AAAA;AAAA;;AAAA,gBAGT,KAAK,CAAC,qBAAD,CAHI;;AAAA;AAKjB,UAAA,IAAI,GAAG,GAAG,CAAC,OAAX;AACA,UAAA,+BAA+B,CAAC,CAAD,CAA/B;AANiB,2CAOV,IAPU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD,IAAlB;;AAUa,OAAA,CAAA,WAAA,yEAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACZ,WADY;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAd;;AAIA,OAAA,CAAA,sBAAA,GAAyB,YAAa;AACjD,SAAO,iBAAP;AACD,CAFY","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getMemoryGrowTimestamp = exports.getInstance = void 0;\nconst load_1 = require(\"./load\");\nlet inst = null;\nlet HEAP32 = new Int32Array();\nconst clock_gettime = (clk_id, tp) => {\n    const now = Date.now();\n    HEAP32[tp >> 2] = (now / 1e3) | 0;\n    HEAP32[(tp + 4) >> 2] = ((now % 1e3) * 1e3 * 1e3) | 0;\n    return 0;\n};\nlet lastGrowTimestamp = 0;\nconst emscripten_notify_memory_growth = (idx) => {\n    if (lastGrowTimestamp) {\n        console.info('zbar.wasm: Memory Grow: ', inst.memory.buffer.byteLength);\n    }\n    lastGrowTimestamp = Date.now();\n    HEAP32 = new Int32Array(inst.memory.buffer);\n};\nconst importObj = {\n    env: {\n        clock_gettime,\n        emscripten_notify_memory_growth\n    }\n};\nlet instPromise = (async () => {\n    const res = await load_1.loadWasmInstance(importObj);\n    if (!res) {\n        throw Error('WASM was not loaded');\n    }\n    inst = res.exports;\n    emscripten_notify_memory_growth(0);\n    return inst;\n})();\nexports.getInstance = async () => {\n    return await instPromise;\n};\nexports.getMemoryGrowTimestamp = () => {\n    return lastGrowTimestamp;\n};\n//# sourceMappingURL=instance.js.map"]},"metadata":{},"sourceType":"script"}