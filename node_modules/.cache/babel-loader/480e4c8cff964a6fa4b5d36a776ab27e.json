{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loadWasmInstance = void 0;\n/**\n * Webpack File-loader will break when the extension is .wasm.\n * Changing the extension is a workaround. And because of this\n * |instantiateStreaming| is always failed due to wrong MIME type.\n * see https://github.com/webpack/webpack/issues/6725\n */\n// import wasmBinaryFile from './zbar.wasm';\n\nvar zbar_wasm_bin_1 = __importDefault(require(\"./zbar.wasm.bin\"));\n\nexports.loadWasmInstance = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(importObj) {\n    var res, binary, output;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(zbar_wasm_bin_1.default);\n\n          case 2:\n            res = _context.sent;\n\n            if (res['ok']) {\n              _context.next = 6;\n              break;\n            }\n\n            console.error('Failed to load wasm binary file at ' + zbar_wasm_bin_1.default);\n            return _context.abrupt(\"return\", null);\n\n          case 6:\n            _context.next = 8;\n            return res.arrayBuffer();\n\n          case 8:\n            binary = _context.sent;\n            _context.next = 11;\n            return WebAssembly.instantiate(binary, importObj);\n\n          case 11:\n            output = _context.sent;\n            return _context.abrupt(\"return\", output.instance);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["../src/load-browser.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA;;;;;AAKG;AACH;;AACA,IAAA,eAAA,GAAA,eAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,CAAA;;AAEa,OAAA,CAAA,gBAAA;AAAA,sEAAmB,iBAC9B,SAD8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAaZ,KAAK,CAAC,eAAA,CAAA,OAAD,CAbO;;AAAA;AAaxB,YAAA,GAbwB;;AAAA,gBAczB,GAAG,CAAC,IAAD,CAdsB;AAAA;AAAA;AAAA;;AAe5B,YAAA,OAAO,CAAC,KAAR,CAAc,wCAAwC,eAAA,CAAA,OAAtD;AAf4B,6CAgBrB,IAhBqB;;AAAA;AAAA;AAAA,mBAkBT,GAAG,CAAC,WAAJ,EAlBS;;AAAA;AAkBxB,YAAA,MAlBwB;AAAA;AAAA,mBAmBT,WAAW,CAAC,WAAZ,CAAwB,MAAxB,EAAgC,SAAhC,CAnBS;;AAAA;AAmBxB,YAAA,MAnBwB;AAAA,6CAoBvB,MAAM,CAAC,QApBgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAAA;AAAA;AAAA;AAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.loadWasmInstance = void 0;\n/**\n * Webpack File-loader will break when the extension is .wasm.\n * Changing the extension is a workaround. And because of this\n * |instantiateStreaming| is always failed due to wrong MIME type.\n * see https://github.com/webpack/webpack/issues/6725\n */\n// import wasmBinaryFile from './zbar.wasm';\nconst zbar_wasm_bin_1 = __importDefault(require(\"./zbar.wasm.bin\"));\nexports.loadWasmInstance = async (importObj) => {\n    // try {\n    //   const output = await WebAssembly.instantiateStreaming(\n    //     fetch(wasmBinaryFile),\n    //     importObj\n    //   );\n    //   return output.instance;\n    // } catch (err) {\n    //   console.error('Wasm streaming compile failed: ' + err);\n    //   console.error('Falling back to ArrayBuffer instantiation');\n    // }\n    const res = await fetch(zbar_wasm_bin_1.default);\n    if (!res['ok']) {\n        console.error('Failed to load wasm binary file at ' + zbar_wasm_bin_1.default);\n        return null;\n    }\n    const binary = await res.arrayBuffer();\n    const output = await WebAssembly.instantiate(binary, importObj);\n    return output.instance;\n};\n//# sourceMappingURL=load-browser.js.map"]},"metadata":{},"sourceType":"script"}