{"ast":null,"code":"/*\n * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nvar _classCallCheck = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar URDNA2015 = require('./URDNA2015');\n\nvar util = require('./util');\n\nmodule.exports = /*#__PURE__*/function (_URDNA) {\n  _inherits(URDNA2012, _URDNA);\n\n  var _super = _createSuper(URDNA2012);\n\n  function URDNA2012(options) {\n    var _this;\n\n    _classCallCheck(this, URDNA2012);\n\n    _this = _super.call(this, options);\n    _this.name = 'URGNA2012';\n    _this.hashAlgorithm = 'sha1';\n    return _this;\n  } // helper for modifying component during Hash First Degree Quads\n\n\n  _createClass(URDNA2012, [{\n    key: \"modifyFirstDegreeComponent\",\n    value: function modifyFirstDegreeComponent(id, component, key) {\n      if (component.termType !== 'BlankNode') {\n        return component;\n      }\n\n      component = util.clone(component);\n\n      if (key === 'name') {\n        component.value = '_:g';\n      } else {\n        component.value = component.value === id ? '_:a' : '_:z';\n      }\n\n      return component;\n    } // helper for getting a related predicate\n\n  }, {\n    key: \"getRelatedPredicate\",\n    value: function getRelatedPredicate(quad) {\n      return quad.predicate.value;\n    } // helper for creating hash to related blank nodes map\n\n  }, {\n    key: \"createHashToRelated\",\n    value: function createHashToRelated(id, issuer, callback) {\n      var self = this; // 1) Create a hash to related blank nodes map for storing hashes that\n      // identify related blank nodes.\n\n      var hashToRelated = {}; // 2) Get a reference, quads, to the list of quads in the blank node to\n      // quads map for the key identifier.\n\n      var quads = self.blankNodeInfo[id].quads; // 3) For each quad in quads:\n\n      self.forEach(quads, function (quad, idx, callback) {\n        // 3.1) If the quad's subject is a blank node that does not match\n        // identifier, set hash to the result of the Hash Related Blank Node\n        // algorithm, passing the blank node identifier for subject as related,\n        // quad, path identifier issuer as issuer, and p as position.\n        var position;\n        var related;\n\n        if (quad.subject.termType === 'BlankNode' && quad.subject.value !== id) {\n          related = quad.subject.value;\n          position = 'p';\n        } else if (quad.object.termType === 'BlankNode' && quad.object.value !== id) {\n          // 3.2) Otherwise, if quad's object is a blank node that does not match\n          // identifier, to the result of the Hash Related Blank Node algorithm,\n          // passing the blank node identifier for object as related, quad, path\n          // identifier issuer as issuer, and r as position.\n          related = quad.object.value;\n          position = 'r';\n        } else {\n          // 3.3) Otherwise, continue to the next quad.\n          return callback();\n        } // 3.4) Add a mapping of hash to the blank node identifier for the\n        // component that matched (subject or object) to hash to related blank\n        // nodes map, adding an entry as necessary.\n\n\n        self.hashRelatedBlankNode(related, quad, issuer, position, function (err, hash) {\n          if (err) {\n            return callback(err);\n          }\n\n          if (hash in hashToRelated) {\n            hashToRelated[hash].push(related);\n          } else {\n            hashToRelated[hash] = [related];\n          }\n\n          callback();\n        });\n      }, function (err) {\n        return callback(err, hashToRelated);\n      });\n    }\n  }]);\n\n  return URDNA2012;\n}(URDNA2015);","map":{"version":3,"sources":["D:/My Works/Git/cowin-verify/node_modules/rdf-canonize/lib/URGNA2012.js"],"names":["URDNA2015","require","util","module","exports","options","name","hashAlgorithm","id","component","key","termType","clone","value","quad","predicate","issuer","callback","self","hashToRelated","quads","blankNodeInfo","forEach","idx","position","related","subject","object","hashRelatedBlankNode","err","hash","push"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst URDNA2015 = require('./URDNA2015');\nconst util = require('./util');\n\nmodule.exports = class URDNA2012 extends URDNA2015 {\n  constructor(options) {\n    super(options);\n    this.name = 'URGNA2012';\n    this.hashAlgorithm = 'sha1';\n  }\n\n  // helper for modifying component during Hash First Degree Quads\n  modifyFirstDegreeComponent(id, component, key) {\n    if(component.termType !== 'BlankNode') {\n      return component;\n    }\n    component = util.clone(component);\n    if(key === 'name') {\n      component.value = '_:g';\n    } else {\n      component.value = (component.value === id ? '_:a' : '_:z');\n    }\n    return component;\n  }\n\n  // helper for getting a related predicate\n  getRelatedPredicate(quad) {\n    return quad.predicate.value;\n  }\n\n  // helper for creating hash to related blank nodes map\n  createHashToRelated(id, issuer, callback) {\n    const self = this;\n\n    // 1) Create a hash to related blank nodes map for storing hashes that\n    // identify related blank nodes.\n    const hashToRelated = {};\n\n    // 2) Get a reference, quads, to the list of quads in the blank node to\n    // quads map for the key identifier.\n    const quads = self.blankNodeInfo[id].quads;\n\n    // 3) For each quad in quads:\n    self.forEach(quads, (quad, idx, callback) => {\n      // 3.1) If the quad's subject is a blank node that does not match\n      // identifier, set hash to the result of the Hash Related Blank Node\n      // algorithm, passing the blank node identifier for subject as related,\n      // quad, path identifier issuer as issuer, and p as position.\n      let position;\n      let related;\n      if(quad.subject.termType === 'BlankNode' && quad.subject.value !== id) {\n        related = quad.subject.value;\n        position = 'p';\n      } else if(\n        quad.object.termType === 'BlankNode' && quad.object.value !== id) {\n        // 3.2) Otherwise, if quad's object is a blank node that does not match\n        // identifier, to the result of the Hash Related Blank Node algorithm,\n        // passing the blank node identifier for object as related, quad, path\n        // identifier issuer as issuer, and r as position.\n        related = quad.object.value;\n        position = 'r';\n      } else {\n        // 3.3) Otherwise, continue to the next quad.\n        return callback();\n      }\n      // 3.4) Add a mapping of hash to the blank node identifier for the\n      // component that matched (subject or object) to hash to related blank\n      // nodes map, adding an entry as necessary.\n      self.hashRelatedBlankNode(\n        related, quad, issuer, position, (err, hash) => {\n          if(err) {\n            return callback(err);\n          }\n          if(hash in hashToRelated) {\n            hashToRelated[hash].push(related);\n          } else {\n            hashToRelated[hash] = [related];\n          }\n          callback();\n        });\n    }, err => callback(err, hashToRelated));\n  }\n};\n"]},"metadata":{},"sourceType":"script"}