{"ast":null,"code":"/*\n * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nvar _classCallCheck = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar util = require('./util');\n\nmodule.exports = /*#__PURE__*/function () {\n  /**\n   * Creates a new IdentifierIssuer. A IdentifierIssuer issues unique\n   * identifiers, keeping track of any previously issued identifiers.\n   *\n   * @param prefix the prefix to use ('<prefix><counter>').\n   */\n  function IdentifierIssuer(prefix) {\n    _classCallCheck(this, IdentifierIssuer);\n\n    this.prefix = prefix;\n    this.counter = 0;\n    this.existing = {};\n  }\n  /**\n   * Copies this IdentifierIssuer.\n   *\n   * @return a copy of this IdentifierIssuer.\n   */\n\n\n  _createClass(IdentifierIssuer, [{\n    key: \"clone\",\n    value: function clone() {\n      var copy = new IdentifierIssuer(this.prefix);\n      copy.counter = this.counter;\n      copy.existing = util.clone(this.existing);\n      return copy;\n    }\n    /**\n     * Gets the new identifier for the given old identifier, where if no old\n     * identifier is given a new identifier will be generated.\n     *\n     * @param [old] the old identifier to get the new identifier for.\n     *\n     * @return the new identifier.\n     */\n\n  }, {\n    key: \"getId\",\n    value: function getId(old) {\n      // return existing old identifier\n      if (old && old in this.existing) {\n        return this.existing[old];\n      } // get next identifier\n\n\n      var identifier = this.prefix + this.counter;\n      this.counter += 1; // save mapping\n\n      if (old) {\n        this.existing[old] = identifier;\n      }\n\n      return identifier;\n    }\n    /**\n     * Returns true if the given old identifer has already been assigned a new\n     * identifier.\n     *\n     * @param old the old identifier to check.\n     *\n     * @return true if the old identifier has been assigned a new identifier,\n     *   false if not.\n     */\n\n  }, {\n    key: \"hasId\",\n    value: function hasId(old) {\n      return old in this.existing;\n    }\n  }]);\n\n  return IdentifierIssuer;\n}();","map":{"version":3,"sources":["D:/My Works/Git/cowin-verify/node_modules/rdf-canonize/lib/IdentifierIssuer.js"],"names":["util","require","module","exports","prefix","counter","existing","copy","IdentifierIssuer","clone","old","identifier"],"mappings":"AAAA;AACA;AACA;AACA;;;;;;AAEA,IAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AAEAC,MAAM,CAACC,OAAP;AACE;AACF;AACA;AACA;AACA;AACA;AACE,4BAAYC,MAAZ,EAAoB;AAAA;;AAClB,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKC,OAAL,GAAe,CAAf;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACD;AAED;AACF;AACA;AACA;AACA;;;AAjBA;AAAA;AAAA,WAkBE,iBAAQ;AACN,UAAMC,IAAI,GAAG,IAAIC,gBAAJ,CAAqB,KAAKJ,MAA1B,CAAb;AACAG,MAAAA,IAAI,CAACF,OAAL,GAAe,KAAKA,OAApB;AACAE,MAAAA,IAAI,CAACD,QAAL,GAAgBN,IAAI,CAACS,KAAL,CAAW,KAAKH,QAAhB,CAAhB;AACA,aAAOC,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAhCA;AAAA;AAAA,WAiCE,eAAMG,GAAN,EAAW;AACT;AACA,UAAGA,GAAG,IAAIA,GAAG,IAAI,KAAKJ,QAAtB,EAAgC;AAC9B,eAAO,KAAKA,QAAL,CAAcI,GAAd,CAAP;AACD,OAJQ,CAMT;;;AACA,UAAMC,UAAU,GAAG,KAAKP,MAAL,GAAc,KAAKC,OAAtC;AACA,WAAKA,OAAL,IAAgB,CAAhB,CARS,CAUT;;AACA,UAAGK,GAAH,EAAQ;AACN,aAAKJ,QAAL,CAAcI,GAAd,IAAqBC,UAArB;AACD;;AAED,aAAOA,UAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA3DA;AAAA;AAAA,WA4DE,eAAMD,GAAN,EAAW;AACT,aAAQA,GAAG,IAAI,KAAKJ,QAApB;AACD;AA9DH;;AAAA;AAAA","sourcesContent":["/*\n * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst util = require('./util');\n\nmodule.exports = class IdentifierIssuer {\n  /**\n   * Creates a new IdentifierIssuer. A IdentifierIssuer issues unique\n   * identifiers, keeping track of any previously issued identifiers.\n   *\n   * @param prefix the prefix to use ('<prefix><counter>').\n   */\n  constructor(prefix) {\n    this.prefix = prefix;\n    this.counter = 0;\n    this.existing = {};\n  }\n\n  /**\n   * Copies this IdentifierIssuer.\n   *\n   * @return a copy of this IdentifierIssuer.\n   */\n  clone() {\n    const copy = new IdentifierIssuer(this.prefix);\n    copy.counter = this.counter;\n    copy.existing = util.clone(this.existing);\n    return copy;\n  }\n\n  /**\n   * Gets the new identifier for the given old identifier, where if no old\n   * identifier is given a new identifier will be generated.\n   *\n   * @param [old] the old identifier to get the new identifier for.\n   *\n   * @return the new identifier.\n   */\n  getId(old) {\n    // return existing old identifier\n    if(old && old in this.existing) {\n      return this.existing[old];\n    }\n\n    // get next identifier\n    const identifier = this.prefix + this.counter;\n    this.counter += 1;\n\n    // save mapping\n    if(old) {\n      this.existing[old] = identifier;\n    }\n\n    return identifier;\n  }\n\n  /**\n   * Returns true if the given old identifer has already been assigned a new\n   * identifier.\n   *\n   * @param old the old identifier to check.\n   *\n   * @return true if the old identifier has been assigned a new identifier,\n   *   false if not.\n   */\n  hasId(old) {\n    return (old in this.existing);\n  }\n};\n"]},"metadata":{},"sourceType":"script"}