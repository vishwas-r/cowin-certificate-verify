{"ast":null,"code":"/*!\n * Copyright (c) 2017-2018 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nvar _slicedToArray = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _objectSpread = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _regeneratorRuntime = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar constants = require('../constants');\n\nvar jsonld = require('jsonld');\n\nvar util = require('../util');\n\nvar LinkedDataProof = require('./LinkedDataProof');\n\nmodule.exports = /*#__PURE__*/function (_LinkedDataProof) {\n  _inherits(LinkedDataSignature, _LinkedDataProof);\n\n  var _super = _createSuper(LinkedDataSignature);\n\n  /**\n   * @param type {string} Provided by subclass.\n   *\n   * One of these parameters is required to use a suite for signing:\n   *\n   * @param [creator] {string} A key id URL to the paired public key.\n   * @param [verificationMethod] {string} A key id URL to the paired public key.\n   *\n   * Advanced optional parameters and overrides:\n   *\n   * @param [proof] {object} a JSON-LD document with options to use for\n   *   the `proof` node (e.g. any other custom fields can be provided here\n   *   using a context different from security-v2).\n   * @param [date] {string|Date} signing date to use if not passed.\n   * @param [useNativeCanonize] {boolean} true to use a native canonize\n   *   algorithm.\n   */\n  function LinkedDataSignature() {\n    var _this;\n\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        type = _ref.type,\n        creator = _ref.creator,\n        verificationMethod = _ref.verificationMethod,\n        proof = _ref.proof,\n        date = _ref.date,\n        useNativeCanonize = _ref.useNativeCanonize;\n\n    _classCallCheck(this, LinkedDataSignature);\n\n    // validate common options\n    if (verificationMethod !== undefined && typeof verificationMethod !== 'string') {\n      throw new TypeError('\"verificationMethod\" must be a URL string.');\n    }\n\n    _this = _super.call(this, {\n      type: type\n    });\n    _this.creator = creator;\n    _this.verificationMethod = verificationMethod;\n    _this.proof = proof;\n\n    if (date !== undefined) {\n      _this.date = new Date(date);\n\n      if (isNaN(_this.date)) {\n        throw TypeError(\"\\\"date\\\" \\\"\".concat(date, \"\\\" is not a valid date.\"));\n      }\n    }\n\n    _this.useNativeCanonize = useNativeCanonize;\n    return _this;\n  }\n  /**\n   * @param document {object} to be signed.\n   * @param purpose {ProofPurpose}\n   * @param documentLoader {function}\n   * @param expansionMap {function}\n   * @param compactProof {boolean}\n   *\n   * @returns {Promise<object>} Resolves with the created proof object.\n   */\n\n\n  _createClass(LinkedDataSignature, [{\n    key: \"createProof\",\n    value: function () {\n      var _createProof = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n        var document, purpose, documentLoader, expansionMap, compactProof, proof, date, verifyData;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                document = _ref2.document, purpose = _ref2.purpose, documentLoader = _ref2.documentLoader, expansionMap = _ref2.expansionMap, compactProof = _ref2.compactProof;\n\n                if (!this.proof) {\n                  _context.next = 7;\n                  break;\n                }\n\n                _context.next = 4;\n                return jsonld.compact(this.proof, constants.SECURITY_CONTEXT_URL, {\n                  documentLoader: documentLoader,\n                  expansionMap: expansionMap,\n                  compactToRelative: false\n                });\n\n              case 4:\n                proof = _context.sent;\n                _context.next = 8;\n                break;\n\n              case 7:\n                // create proof JSON-LD document\n                proof = {\n                  '@context': constants.SECURITY_CONTEXT_URL\n                };\n\n              case 8:\n                // ensure proof type is set\n                proof.type = this.type; // set default `now` date if not given in `proof` or `options`\n\n                date = this.date;\n\n                if (proof.created === undefined && date === undefined) {\n                  date = new Date();\n                } // ensure date is in string format\n\n\n                if (date !== undefined && typeof date !== 'string') {\n                  date = util.w3cDate(date);\n                } // add API overrides\n\n\n                if (date !== undefined) {\n                  proof.created = date;\n                } // `verificationMethod` is for newer suites, `creator` for legacy\n\n\n                if (this.verificationMethod !== undefined) {\n                  proof.verificationMethod = this.verificationMethod;\n                }\n\n                if (this.creator !== undefined) {\n                  proof.creator = this.creator;\n                } // add any extensions to proof (mostly for legacy support)\n\n\n                _context.next = 17;\n                return this.updateProof({\n                  document: document,\n                  proof: proof,\n                  purpose: purpose,\n                  documentLoader: documentLoader,\n                  expansionMap: expansionMap,\n                  compactProof: compactProof\n                });\n\n              case 17:\n                proof = _context.sent;\n                _context.next = 20;\n                return purpose.update(proof, {\n                  document: document,\n                  suite: this,\n                  documentLoader: documentLoader,\n                  expansionMap: expansionMap\n                });\n\n              case 20:\n                proof = _context.sent;\n                _context.next = 23;\n                return this.createVerifyData({\n                  document: document,\n                  proof: proof,\n                  documentLoader: documentLoader,\n                  expansionMap: expansionMap,\n                  compactProof: compactProof\n                });\n\n              case 23:\n                verifyData = _context.sent;\n                _context.next = 26;\n                return this.sign({\n                  verifyData: verifyData,\n                  document: document,\n                  proof: proof,\n                  documentLoader: documentLoader,\n                  expansionMap: expansionMap\n                });\n\n              case 26:\n                proof = _context.sent;\n                return _context.abrupt(\"return\", proof);\n\n              case 28:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function createProof(_x) {\n        return _createProof.apply(this, arguments);\n      }\n\n      return createProof;\n    }()\n    /**\n     * @param document {object} to be signed.\n     * @param purpose {ProofPurpose}\n     * @param documentLoader {function}\n     * @param expansionMap {function}\n     * @param compactProof {boolean}\n     *\n     * @returns {Promise<object>} Resolves with the created proof object.\n     */\n\n  }, {\n    key: \"updateProof\",\n    value: function () {\n      var _updateProof = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref3) {\n        var proof;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                proof = _ref3.proof;\n                return _context2.abrupt(\"return\", proof);\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function updateProof(_x2) {\n        return _updateProof.apply(this, arguments);\n      }\n\n      return updateProof;\n    }()\n    /**\n     * @param proof {object} the proof to be verified.\n     * @param document {object} the document the proof applies to.\n     * @param purpose {ProofPurpose}\n     * @param documentLoader {function}\n     * @param expansionMap {function}\n     * @param compactProof {boolean}\n     *\n     * @returns {Promise<{object}>} Resolves with the verification result.\n     */\n\n  }, {\n    key: \"verifyProof\",\n    value: function () {\n      var _verifyProof = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref4) {\n        var proof, document, purpose, documentLoader, expansionMap, compactProof, verifyData, verificationMethod, verified, purposeResult;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                proof = _ref4.proof, document = _ref4.document, purpose = _ref4.purpose, documentLoader = _ref4.documentLoader, expansionMap = _ref4.expansionMap, compactProof = _ref4.compactProof;\n                _context3.prev = 1;\n                _context3.next = 4;\n                return this.createVerifyData({\n                  document: document,\n                  proof: proof,\n                  documentLoader: documentLoader,\n                  expansionMap: expansionMap,\n                  compactProof: compactProof\n                });\n\n              case 4:\n                verifyData = _context3.sent;\n                _context3.next = 7;\n                return this.getVerificationMethod({\n                  proof: proof,\n                  document: document,\n                  documentLoader: documentLoader,\n                  expansionMap: expansionMap\n                });\n\n              case 7:\n                verificationMethod = _context3.sent;\n                _context3.next = 10;\n                return this.verifySignature({\n                  verifyData: verifyData,\n                  verificationMethod: verificationMethod,\n                  document: document,\n                  proof: proof,\n                  documentLoader: documentLoader,\n                  expansionMap: expansionMap\n                });\n\n              case 10:\n                verified = _context3.sent;\n\n                if (verified) {\n                  _context3.next = 13;\n                  break;\n                }\n\n                throw new Error('Invalid signature.');\n\n              case 13:\n                _context3.next = 15;\n                return purpose.validate(proof, {\n                  document: document,\n                  suite: this,\n                  verificationMethod: verificationMethod,\n                  documentLoader: documentLoader,\n                  expansionMap: expansionMap\n                });\n\n              case 15:\n                purposeResult = _context3.sent;\n\n                if (purposeResult.valid) {\n                  _context3.next = 18;\n                  break;\n                }\n\n                throw purposeResult.error;\n\n              case 18:\n                return _context3.abrupt(\"return\", {\n                  verified: true,\n                  purposeResult: purposeResult\n                });\n\n              case 21:\n                _context3.prev = 21;\n                _context3.t0 = _context3[\"catch\"](1);\n                return _context3.abrupt(\"return\", {\n                  verified: false,\n                  error: _context3.t0\n                });\n\n              case 24:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[1, 21]]);\n      }));\n\n      function verifyProof(_x3) {\n        return _verifyProof.apply(this, arguments);\n      }\n\n      return verifyProof;\n    }()\n  }, {\n    key: \"canonize\",\n    value: function () {\n      var _canonize = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(input, _ref5) {\n        var documentLoader, expansionMap, skipExpansion;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                documentLoader = _ref5.documentLoader, expansionMap = _ref5.expansionMap, skipExpansion = _ref5.skipExpansion;\n                return _context4.abrupt(\"return\", jsonld.canonize(input, {\n                  algorithm: 'URDNA2015',\n                  format: 'application/n-quads',\n                  documentLoader: documentLoader,\n                  expansionMap: expansionMap,\n                  skipExpansion: skipExpansion,\n                  useNative: this.useNativeCanonize\n                }));\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function canonize(_x4, _x5) {\n        return _canonize.apply(this, arguments);\n      }\n\n      return canonize;\n    }()\n  }, {\n    key: \"canonizeProof\",\n    value: function () {\n      var _canonizeProof = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(proof, _ref6) {\n        var documentLoader, expansionMap;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                documentLoader = _ref6.documentLoader, expansionMap = _ref6.expansionMap;\n                // `jws`,`signatureValue`,`proofValue` must not be included in the proof\n                // options\n                proof = _objectSpread({}, proof);\n                delete proof.jws;\n                delete proof.signatureValue;\n                delete proof.proofValue;\n                return _context5.abrupt(\"return\", this.canonize(proof, {\n                  documentLoader: documentLoader,\n                  expansionMap: expansionMap,\n                  skipExpansion: false\n                }));\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function canonizeProof(_x6, _x7) {\n        return _canonizeProof.apply(this, arguments);\n      }\n\n      return canonizeProof;\n    }()\n    /**\n     * @param document {object} to be signed/verified.\n     * @param proof {object}\n     * @param documentLoader {function}\n     * @param expansionMap {function}\n     * @param compactProof {boolean}\n     *\n     * @returns {Promise<{Uint8Array}>}.\n     */\n\n  }, {\n    key: \"createVerifyData\",\n    value: function () {\n      var _createVerifyData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(_ref7) {\n        var document, proof, documentLoader, expansionMap, c14nProofOptions, c14nDocument;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                document = _ref7.document, proof = _ref7.proof, documentLoader = _ref7.documentLoader, expansionMap = _ref7.expansionMap;\n                _context6.next = 3;\n                return this.canonizeProof(proof, {\n                  documentLoader: documentLoader,\n                  expansionMap: expansionMap\n                });\n\n              case 3:\n                c14nProofOptions = _context6.sent;\n                _context6.next = 6;\n                return this.canonize(document, {\n                  documentLoader: documentLoader,\n                  expansionMap: expansionMap\n                });\n\n              case 6:\n                c14nDocument = _context6.sent;\n                return _context6.abrupt(\"return\", util.concat(util.sha256(c14nProofOptions), util.sha256(c14nDocument)));\n\n              case 8:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function createVerifyData(_x8) {\n        return _createVerifyData.apply(this, arguments);\n      }\n\n      return createVerifyData;\n    }()\n    /**\n     * @param document {object} to be signed.\n     * @param proof {object}\n     * @param documentLoader {function}\n     * @param expansionMap {function}\n     */\n\n  }, {\n    key: \"getVerificationMethod\",\n    value: function () {\n      var _getVerificationMethod = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(_ref8) {\n        var proof, documentLoader, verificationMethod, creator, _yield$jsonld$frame, _yield$jsonld$frame$, framed;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                proof = _ref8.proof, documentLoader = _ref8.documentLoader;\n                verificationMethod = proof.verificationMethod;\n\n                if (!verificationMethod) {\n                  // backwards compatibility support for `creator`\n                  creator = proof.creator;\n                  verificationMethod = creator;\n                }\n\n                if (typeof verificationMethod === 'object') {\n                  verificationMethod = verificationMethod.id;\n                }\n\n                if (verificationMethod) {\n                  _context7.next = 6;\n                  break;\n                }\n\n                throw new Error('No \"verificationMethod\" or \"creator\" found in proof.');\n\n              case 6:\n                _context7.next = 8;\n                return jsonld.frame(verificationMethod, {\n                  '@context': constants.SECURITY_CONTEXT_URL,\n                  '@embed': '@always',\n                  id: verificationMethod\n                }, {\n                  documentLoader: documentLoader,\n                  compactToRelative: false\n                });\n\n              case 8:\n                _yield$jsonld$frame = _context7.sent;\n                _yield$jsonld$frame$ = _slicedToArray(_yield$jsonld$frame['@graph'], 1);\n                framed = _yield$jsonld$frame$[0];\n\n                if (framed) {\n                  _context7.next = 13;\n                  break;\n                }\n\n                throw new Error(\"Verification method \".concat(verificationMethod, \" not found.\"));\n\n              case 13:\n                if (!(framed.revoked !== undefined)) {\n                  _context7.next = 15;\n                  break;\n                }\n\n                throw new Error('The verification method has been revoked.');\n\n              case 15:\n                return _context7.abrupt(\"return\", framed);\n\n              case 16:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      function getVerificationMethod(_x9) {\n        return _getVerificationMethod.apply(this, arguments);\n      }\n\n      return getVerificationMethod;\n    }()\n    /**\n     * @param verifyData {Uint8Array}.\n     * @param document {object} to be signed.\n     * @param proof {object}\n     * @param documentLoader {function}\n     * @param expansionMap {function}\n     *\n     * @returns {Promise<{object}>} the proof containing the signature value.\n     */\n\n  }, {\n    key: \"sign\",\n    value: function () {\n      var _sign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                throw new Error('Must be implemented by a derived class.');\n\n              case 1:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      function sign() {\n        return _sign.apply(this, arguments);\n      }\n\n      return sign;\n    }()\n    /**\n     * @param verifyData {Uint8Array}.\n     * @param verificationMethod {object}.\n     * @param document {object} to be signed.\n     * @param proof {object}\n     * @param documentLoader {function}\n     * @param expansionMap {function}\n     *\n     * @returns {Promise<boolean>}\n     */\n\n  }, {\n    key: \"verifySignature\",\n    value: function () {\n      var _verifySignature = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                throw new Error('Must be implemented by a derived class.');\n\n              case 1:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9);\n      }));\n\n      function verifySignature() {\n        return _verifySignature.apply(this, arguments);\n      }\n\n      return verifySignature;\n    }()\n  }]);\n\n  return LinkedDataSignature;\n}(LinkedDataProof);","map":{"version":3,"sources":["D:/My Works/Git/cowin-verify/node_modules/jsonld-signatures/lib/suites/LinkedDataSignature.js"],"names":["constants","require","jsonld","util","LinkedDataProof","module","exports","type","creator","verificationMethod","proof","date","useNativeCanonize","undefined","TypeError","Date","isNaN","document","purpose","documentLoader","expansionMap","compactProof","compact","SECURITY_CONTEXT_URL","compactToRelative","created","w3cDate","updateProof","update","suite","createVerifyData","verifyData","sign","getVerificationMethod","verifySignature","verified","Error","validate","purposeResult","valid","error","input","skipExpansion","canonize","algorithm","format","useNative","jws","signatureValue","proofValue","canonizeProof","c14nProofOptions","c14nDocument","concat","sha256","id","frame","framed","revoked"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2017-2018 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst constants = require('../constants');\nconst jsonld = require('jsonld');\nconst util = require('../util');\nconst LinkedDataProof = require('./LinkedDataProof');\n\nmodule.exports = class LinkedDataSignature extends LinkedDataProof {\n  /**\n   * @param type {string} Provided by subclass.\n   *\n   * One of these parameters is required to use a suite for signing:\n   *\n   * @param [creator] {string} A key id URL to the paired public key.\n   * @param [verificationMethod] {string} A key id URL to the paired public key.\n   *\n   * Advanced optional parameters and overrides:\n   *\n   * @param [proof] {object} a JSON-LD document with options to use for\n   *   the `proof` node (e.g. any other custom fields can be provided here\n   *   using a context different from security-v2).\n   * @param [date] {string|Date} signing date to use if not passed.\n   * @param [useNativeCanonize] {boolean} true to use a native canonize\n   *   algorithm.\n   */\n  constructor({\n    type, creator, verificationMethod, proof, date,\n    useNativeCanonize} = {}) {\n    // validate common options\n    if(verificationMethod !== undefined &&\n      typeof verificationMethod !== 'string') {\n      throw new TypeError('\"verificationMethod\" must be a URL string.');\n    }\n    super({type});\n    this.creator = creator;\n    this.verificationMethod = verificationMethod;\n    this.proof = proof;\n    if(date !== undefined) {\n      this.date = new Date(date);\n      if(isNaN(this.date)) {\n        throw TypeError(`\"date\" \"${date}\" is not a valid date.`);\n      }\n    }\n    this.useNativeCanonize = useNativeCanonize;\n  }\n\n  /**\n   * @param document {object} to be signed.\n   * @param purpose {ProofPurpose}\n   * @param documentLoader {function}\n   * @param expansionMap {function}\n   * @param compactProof {boolean}\n   *\n   * @returns {Promise<object>} Resolves with the created proof object.\n   */\n  async createProof(\n    {document, purpose, documentLoader, expansionMap, compactProof}) {\n    // build proof (currently known as `signature options` in spec)\n    let proof;\n    if(this.proof) {\n      // use proof JSON-LD document passed to API\n      proof = await jsonld.compact(\n        this.proof, constants.SECURITY_CONTEXT_URL,\n        {documentLoader, expansionMap, compactToRelative: false});\n    } else {\n      // create proof JSON-LD document\n      proof = {'@context': constants.SECURITY_CONTEXT_URL};\n    }\n\n    // ensure proof type is set\n    proof.type = this.type;\n\n    // set default `now` date if not given in `proof` or `options`\n    let date = this.date;\n    if(proof.created === undefined && date === undefined) {\n      date = new Date();\n    }\n\n    // ensure date is in string format\n    if(date !== undefined && typeof date !== 'string') {\n      date = util.w3cDate(date);\n    }\n\n    // add API overrides\n    if(date !== undefined) {\n      proof.created = date;\n    }\n    // `verificationMethod` is for newer suites, `creator` for legacy\n    if(this.verificationMethod !== undefined) {\n      proof.verificationMethod = this.verificationMethod;\n    }\n    if(this.creator !== undefined) {\n      proof.creator = this.creator;\n    }\n\n    // add any extensions to proof (mostly for legacy support)\n    proof = await this.updateProof({\n      document, proof, purpose,\n      documentLoader, expansionMap, compactProof});\n\n    // allow purpose to update the proof; the `proof` is in the\n    // SECURITY_CONTEXT_URL `@context` -- therefore the `purpose` must\n    // ensure any added fields are also represented in that same `@context`\n    proof = await purpose.update(\n      proof, {document, suite: this, documentLoader, expansionMap});\n\n    // create data to sign\n    const verifyData = await this.createVerifyData(\n      {document, proof, documentLoader, expansionMap, compactProof});\n\n    // sign data\n    proof = await this.sign(\n      {verifyData, document, proof, documentLoader, expansionMap});\n\n    return proof;\n  }\n\n  /**\n   * @param document {object} to be signed.\n   * @param purpose {ProofPurpose}\n   * @param documentLoader {function}\n   * @param expansionMap {function}\n   * @param compactProof {boolean}\n   *\n   * @returns {Promise<object>} Resolves with the created proof object.\n   */\n  async updateProof({proof}) {\n    // extending classes may do more\n    return proof;\n  }\n\n  /**\n   * @param proof {object} the proof to be verified.\n   * @param document {object} the document the proof applies to.\n   * @param purpose {ProofPurpose}\n   * @param documentLoader {function}\n   * @param expansionMap {function}\n   * @param compactProof {boolean}\n   *\n   * @returns {Promise<{object}>} Resolves with the verification result.\n   */\n  async verifyProof({\n    proof, document, purpose, documentLoader, expansionMap,\n    compactProof}) {\n    try {\n      // create data to verify\n      const verifyData = await this.createVerifyData(\n        {document, proof, documentLoader, expansionMap, compactProof});\n\n      // fetch verification method\n      const verificationMethod = await this.getVerificationMethod(\n        {proof, document, documentLoader, expansionMap});\n\n      // verify signature on data\n      const verified = await this.verifySignature({\n        verifyData, verificationMethod, document, proof,\n        documentLoader, expansionMap});\n      if(!verified) {\n        throw new Error('Invalid signature.');\n      }\n\n      // ensure proof was performed for a valid purpose\n      const purposeResult = await purpose.validate(\n        proof, {document, suite: this, verificationMethod,\n          documentLoader, expansionMap});\n      if(!purposeResult.valid) {\n        throw purposeResult.error;\n      }\n\n      return {verified: true, purposeResult};\n    } catch(error) {\n      return {verified: false, error};\n    }\n  }\n\n  async canonize(input, {documentLoader, expansionMap, skipExpansion}) {\n    return jsonld.canonize(input, {\n      algorithm: 'URDNA2015',\n      format: 'application/n-quads',\n      documentLoader,\n      expansionMap,\n      skipExpansion,\n      useNative: this.useNativeCanonize\n    });\n  }\n\n  async canonizeProof(proof, {documentLoader, expansionMap}) {\n    // `jws`,`signatureValue`,`proofValue` must not be included in the proof\n    // options\n    proof = {...proof};\n    delete proof.jws;\n    delete proof.signatureValue;\n    delete proof.proofValue;\n    return this.canonize(proof, {\n      documentLoader,\n      expansionMap,\n      skipExpansion: false\n    });\n  }\n\n  /**\n   * @param document {object} to be signed/verified.\n   * @param proof {object}\n   * @param documentLoader {function}\n   * @param expansionMap {function}\n   * @param compactProof {boolean}\n   *\n   * @returns {Promise<{Uint8Array}>}.\n   */\n  async createVerifyData({\n    document, proof, documentLoader, expansionMap}) {\n    // concatenate hash of c14n proof options and hash of c14n document\n    const c14nProofOptions = await this.canonizeProof(\n      proof, {documentLoader, expansionMap});\n    const c14nDocument = await this.canonize(document, {\n      documentLoader,\n      expansionMap\n    });\n    return util.concat(\n      util.sha256(c14nProofOptions),\n      util.sha256(c14nDocument));\n  }\n\n  /**\n   * @param document {object} to be signed.\n   * @param proof {object}\n   * @param documentLoader {function}\n   * @param expansionMap {function}\n   */\n  async getVerificationMethod({proof, documentLoader}) {\n    let {verificationMethod} = proof;\n\n    if(!verificationMethod) {\n      // backwards compatibility support for `creator`\n      const {creator} = proof;\n      verificationMethod = creator;\n    }\n\n    if(typeof verificationMethod === 'object') {\n      verificationMethod = verificationMethod.id;\n    }\n\n    if(!verificationMethod) {\n      throw new Error('No \"verificationMethod\" or \"creator\" found in proof.');\n    }\n\n    // Note: `expansionMap` is intentionally not passed; we can safely drop\n    // properties here and must allow for it\n    const {'@graph': [framed]} = await jsonld.frame(verificationMethod, {\n      '@context': constants.SECURITY_CONTEXT_URL,\n      '@embed': '@always',\n      id: verificationMethod\n    }, {documentLoader, compactToRelative: false});\n    if(!framed) {\n      throw new Error(`Verification method ${verificationMethod} not found.`);\n    }\n\n    // ensure verification method has not been revoked\n    if(framed.revoked !== undefined) {\n      throw new Error('The verification method has been revoked.');\n    }\n\n    return framed;\n  }\n\n  /**\n   * @param verifyData {Uint8Array}.\n   * @param document {object} to be signed.\n   * @param proof {object}\n   * @param documentLoader {function}\n   * @param expansionMap {function}\n   *\n   * @returns {Promise<{object}>} the proof containing the signature value.\n   */\n  async sign() {\n    throw new Error('Must be implemented by a derived class.');\n  }\n\n  /**\n   * @param verifyData {Uint8Array}.\n   * @param verificationMethod {object}.\n   * @param document {object} to be signed.\n   * @param proof {object}\n   * @param documentLoader {function}\n   * @param expansionMap {function}\n   *\n   * @returns {Promise<boolean>}\n   */\n  async verifySignature() {\n    throw new Error('Must be implemented by a derived class.');\n  }\n};\n"]},"metadata":{},"sourceType":"script"}