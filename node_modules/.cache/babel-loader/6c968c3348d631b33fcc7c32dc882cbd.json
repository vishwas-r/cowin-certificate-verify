{"ast":null,"code":"/*!\n * Copyright (c) 2018-2019 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nvar _objectSpread = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _regeneratorRuntime = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar env = require('./env');\n\nvar forge = require('node-forge');\n\nvar base64url = require('base64url-universal');\n\nvar ed25519 = forge.pki.ed25519,\n    base58 = forge.util.binary.base58;\n\nvar util = require('./util');\n\nvar LDKeyPair = require('./LDKeyPair');\n\nvar Ed25519KeyPair = /*#__PURE__*/function (_LDKeyPair) {\n  _inherits(Ed25519KeyPair, _LDKeyPair);\n\n  var _super = _createSuper(Ed25519KeyPair);\n\n  /* eslint-disable max-len */\n\n  /**\n   * An implementation of\n   * [Ed25519 Signature 2018]{@link https://w3c-dvcg.github.io/lds-ed25519-2018/}\n   * for\n   * [jsonld-signatures.]{@link https://github.com/digitalbazaar/jsonld-signatures}\n   * @example\n   * > const privateKeyBase58 =\n   *   '3Mmk4UzTRJTEtxaKk61LxtgUxAa2Dg36jF6VogPtRiKvfpsQWKPCLesKSV182RMmvM'\n   *   + 'JKk6QErH3wgdHp8itkSSiF';\n   * > const options = {\n   *   publicKeyBase58: 'GycSSui454dpYRKiFdsQ5uaE8Gy3ac6dSMPcAoQsk8yq',\n   *   privateKeyBase58\n   * };\n   * > const EDKey = new Ed25519KeyPair(options);\n   * > EDKey\n   * Ed25519KeyPair { ...\n   * @param {KeyPairOptions} options - Base58 keys plus\n   * other options most follow\n   * [KeyPairOptions]{@link ./index.md#KeyPairOptions}.\n   * @param {string} options.publicKeyBase58 - Base58 encoded Public Key\n   * unencoded is 32-bytes.\n   * @param {string} options.privateKeyBase58 - Base58 Private Key\n   * unencoded is 64-bytes.\n   */\n\n  /* eslint-enable */\n  function Ed25519KeyPair() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Ed25519KeyPair);\n\n    _this = _super.call(this, options);\n    _this.type = 'Ed25519VerificationKey2018';\n    _this.privateKeyBase58 = options.privateKeyBase58;\n    _this.publicKeyBase58 = options.publicKeyBase58;\n    return _this;\n  }\n  /**\n   * Returns the Base58 encoded public key.\n   * @implements {LDKeyPair#publicKey}\n   * @readonly\n   *\n   * @returns {string} The Base58 encoded public key.\n   * @see [publicKey]{@link ./LDKeyPair.md#publicKey}\n   */\n\n\n  _createClass(Ed25519KeyPair, [{\n    key: \"publicKey\",\n    get: function get() {\n      return this.publicKeyBase58;\n    }\n    /**\n     * Returns the Base58 encoded private key.\n     * @implements {LDKeyPair#privateKey}\n     * @readonly\n     *\n     * @returns {string} The Base58 encoded private key.\n     * @see [privateKey]{@link ./LDKeyPair.md#privateKey}\n     */\n\n  }, {\n    key: \"privateKey\",\n    get: function get() {\n      return this.privateKeyBase58;\n    }\n    /**\n     * Generates a KeyPair with an optional deterministic seed.\n     * @example\n     * > const keyPair = await Ed25519KeyPair.generate();\n     * > keyPair\n     * Ed25519KeyPair { ...\n     * @param {KeyPairOptions} [options={}] - See LDKeyPair\n     * docstring for full list.\n     * @param {Uint8Array|Buffer} [options.seed] -\n     * a 32-byte array seed for a deterministic key.\n     *\n     * @returns {Promise<Ed25519KeyPair>} Generates a key pair.\n     */\n\n  }, {\n    key: \"signer\",\n    value:\n    /* eslint-disable max-len */\n\n    /**\n     * Returns a signer object for use with\n     * [jsonld-signatures]{@link https://github.com/digitalbazaar/jsonld-signatures}.\n     * @example\n     * > const signer = keyPair.signer();\n     * > signer\n     * { sign: [AsyncFunction: sign] }\n     * > signer.sign({data});\n     *\n     * @returns {{sign: Function}} A signer for the json-ld block.\n     */\n\n    /* eslint-enable */\n    function signer() {\n      return ed25519SignerFactory(this);\n    }\n    /* eslint-disable max-len */\n\n    /**\n     * Returns a verifier object for use with\n     * [jsonld-signatures]{@link https://github.com/digitalbazaar/jsonld-signatures}.\n     * @example\n     * > const verifier = keyPair.verifier();\n     * > verifier\n     * { verify: [AsyncFunction: verify] }\n     * > verifier.verify(key);\n     *\n     * @returns {{verify: Function}} Used to verify jsonld-signatures.\n     */\n\n    /* eslint-enable */\n\n  }, {\n    key: \"verifier\",\n    value: function verifier() {\n      return ed25519VerifierFactory(this);\n    }\n    /* eslint-disable max-len */\n\n    /**\n     * Adds a public key base to a public key node.\n     * @example\n     * > keyPair.addEncodedPublicKey({});\n     * { publicKeyBase58: 'GycSSui454dpYRKiFdsQ5uaE8Gy3ac6dSMPcAoQsk8yq' }\n     * @param {Object} publicKeyNode - The public key node in a jsonld-signature.\n     * @param {string} publicKeyNode.publicKeyBase58 - Base58 Public Key for\n     * [jsonld-signatures]{@link https://github.com/digitalbazaar/jsonld-signatures}.\n     *\n     * @returns {{verify: Function}} A PublicKeyNode in a block.\n     */\n\n    /* eslint-enable */\n\n  }, {\n    key: \"addEncodedPublicKey\",\n    value: function addEncodedPublicKey(publicKeyNode) {\n      publicKeyNode.publicKeyBase58 = this.publicKeyBase58;\n      return publicKeyNode;\n    }\n    /**\n     * Adds an encrypted private key to the KeyPair.\n     * @param {Object} keyNode - A plain object.\n     *\n     * @return {Object} The keyNode with an encrypted private key attached.\n     */\n\n  }, {\n    key: \"addEncryptedPrivateKey\",\n    value: function () {\n      var _addEncryptedPrivateKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(keyNode) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(this.passphrase !== null)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 3;\n                return this.encrypt({\n                  privateKeyBase58: this.privateKeyBase58\n                }, this.passphrase);\n\n              case 3:\n                keyNode.privateKeyJwe = _context.sent;\n                _context.next = 7;\n                break;\n\n              case 6:\n                // no passphrase, do not encrypt private key\n                keyNode.privateKeyBase58 = this.privateKeyBase58;\n\n              case 7:\n                return _context.abrupt(\"return\", keyNode);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function addEncryptedPrivateKey(_x) {\n        return _addEncryptedPrivateKey.apply(this, arguments);\n      }\n\n      return addEncryptedPrivateKey;\n    }()\n    /**\n     * Produces a 32-byte encrypted key.\n     * @example\n     * > const encryptedContent = await edKeyPair\n     *   .encrypt(privateKey, 'Test1244!');\n     * @param {string} privateKey - The base58 private key.\n     * @param {string} password - The password.\n     *\n     * @returns {Promise<JWE>} Produces JSON Web encrypted content.\n     * @see [JWE]{@link ./index.md#JWE}\n     */\n\n  }, {\n    key: \"encrypt\",\n    value: function () {\n      var _encrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(privateKey, password) {\n        var keySize, salt, iterations, key, jweHeader, iv, cipher, encrypted, tag, jwe;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                keySize = 32;\n                salt = forge.random.getBytesSync(32);\n                iterations = 4096;\n                _context2.next = 5;\n                return LDKeyPair.pbkdf2(password, salt, iterations, keySize);\n\n              case 5:\n                key = _context2.sent;\n                jweHeader = {\n                  alg: 'PBES2-A128GCMKW',\n                  enc: 'A128GCMKW',\n                  jwk: {\n                    kty: 'PBKDF2',\n                    s: base64url.encode(salt),\n                    c: iterations\n                  }\n                }; // FIXME: this probably needs to be cleaned up/made more standard\n\n                iv = forge.random.getBytesSync(12);\n                cipher = forge.cipher.createCipher('AES-GCM', key);\n                cipher.start({\n                  iv: iv\n                });\n                cipher.update(forge.util.createBuffer(JSON.stringify(privateKey)));\n                cipher.finish();\n                encrypted = cipher.output.getBytes();\n                tag = cipher.mode.tag.getBytes();\n                jwe = {\n                  unprotected: jweHeader,\n                  iv: base64url.encode(iv),\n                  ciphertext: base64url.encode(encrypted),\n                  tag: base64url.encode(tag)\n                };\n                return _context2.abrupt(\"return\", jwe);\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function encrypt(_x2, _x3) {\n        return _encrypt.apply(this, arguments);\n      }\n\n      return encrypt;\n    }()\n    /**\n     * Decrypts jwe content to a privateKey.\n     * @param {JWE} jwe - Encrypted content from a block.\n     * @param {string} password - Password for the key used to sign the content.\n     *\n     * @returns {Object} A Base58 private key.\n     * @see [JWE]{@link ./index.md#JWE}\n     */\n\n  }, {\n    key: \"decrypt\",\n    value: function () {\n      var _decrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(jwe, password) {\n        var keySize, iterations, salt, key, iv, tag, decipher, pass, privateKey;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                // FIXME: check header, implement according to JWE standard\n                keySize = 32;\n                iterations = jwe.unprotected.jwk.c;\n                salt = jwe.unprotected.jwk.s;\n                salt = base64url.encode(salt);\n                _context3.next = 6;\n                return LDKeyPair.pbkdf2(password, salt, iterations, keySize);\n\n              case 6:\n                key = _context3.sent;\n                iv = base64url.encode(jwe.iv);\n                tag = base64url.encode(jwe.tag);\n                decipher = forge.cipher.createDecipher('AES-GCM', key);\n                decipher.start({\n                  iv: iv,\n                  tag: tag\n                });\n                decipher.update(base64url.encode(jwe.ciphertext));\n                pass = decipher.finish();\n\n                if (pass) {\n                  _context3.next = 15;\n                  break;\n                }\n\n                throw new Error('Invalid password.');\n\n              case 15:\n                privateKey = JSON.parse(decipher.output.getBytes());\n                return _context3.abrupt(\"return\", privateKey);\n\n              case 17:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function decrypt(_x4, _x5) {\n        return _decrypt.apply(this, arguments);\n      }\n\n      return decrypt;\n    }()\n    /**\n     * Generates and returns a multiformats encoded\n     * ed25519 public key fingerprint (for use with cryptonyms, for example).\n     * @see https://github.com/multiformats/multicodec\n     *\n     * @param {string} publicKeyBase58 - The base58 encoded public key material.\n     *\n     * @returns {string} The fingerprint.\n     */\n\n  }, {\n    key: \"fingerprint\",\n    value:\n    /**\n     * Generates and returns a multiformats encoded\n     * ed25519 public key fingerprint (for use with cryptonyms, for example).\n     * @see https://github.com/multiformats/multicodec\n     *\n     * @returns {string} The fingerprint.\n     */\n    function fingerprint() {\n      var publicKeyBase58 = this.publicKeyBase58;\n      return Ed25519KeyPair.fingerprintFromPublicKey({\n        publicKeyBase58: publicKeyBase58\n      });\n    }\n    /**\n     * Tests whether the fingerprint was\n     * generated from a given key pair.\n     * @example\n     * > edKeyPair.verifyFingerprint('z2S2Q6MkaFJewa');\n     * {valid: true};\n     * @param {string} fingerprint - A Base58 public key.\n     *\n     * @returns {Object} An object indicating valid is true or false.\n     */\n\n  }, {\n    key: \"verifyFingerprint\",\n    value: function verifyFingerprint(fingerprint) {\n      // fingerprint should have `z` prefix indicating\n      // that it's multi-base encoded\n      if (!(typeof fingerprint === 'string' && fingerprint[0] === 'z')) {\n        return {\n          error: new Error('`fingerprint` must be a multibase encoded string.'),\n          valid: false\n        };\n      }\n\n      var fingerprintBuffer;\n\n      try {\n        fingerprintBuffer = util.base58Decode({\n          decode: base58.decode,\n          keyMaterial: fingerprint.slice(1),\n          type: \"fingerprint's\"\n        });\n      } catch (e) {\n        return {\n          error: e,\n          valid: false\n        };\n      }\n\n      var publicKeyBuffer;\n\n      try {\n        publicKeyBuffer = util.base58Decode({\n          decode: base58.decode,\n          keyMaterial: this.publicKeyBase58,\n          type: 'public'\n        });\n      } catch (e) {\n        return {\n          error: e,\n          valid: false\n        };\n      } // validate the first two multicodec bytes 0xed01\n\n\n      var valid = fingerprintBuffer.slice(0, 2).toString('hex') === 'ed01' && publicKeyBuffer.equals(fingerprintBuffer.slice(2));\n\n      if (!valid) {\n        return {\n          error: new Error('The fingerprint does not match the public key.'),\n          valid: false\n        };\n      }\n\n      return {\n        valid: valid\n      };\n    }\n  }], [{\n    key: \"generate\",\n    value: function () {\n      var _generate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var options,\n            bs58,\n            asn1,\n            _forge$ed,\n            privateKeyFromAsn1,\n            publicKeyFromAsn1,\n            ByteBuffer,\n            _require,\n            promisify,\n            _require2,\n            createPublicKey,\n            generateKeyPair,\n            publicKeyEncoding,\n            privateKeyEncoding,\n            generateKeyPairAsync,\n            _yield$generateKeyPai,\n            _publicKey3,\n            _privateKey3,\n            _publicKeyBytes,\n            _privateKeyFromAsn,\n            _privateKeyBytes,\n            seed,\n            seedBytes,\n            _privateKey,\n            _privateKey2,\n            _publicKey2,\n            publicKeyBytes,\n            _privateKeyFromAsn2,\n            privateKeyBytes,\n            sodium,\n            _bs,\n            _publicKey4,\n            _privateKey4,\n            generateOptions,\n            _ed25519$generateKeyP,\n            publicKey,\n            privateKey,\n            _args4 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                options = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {};\n\n                if (!(env.nodejs && require('semver').gte(process.version, '12.0.0'))) {\n                  _context4.next = 28;\n                  break;\n                }\n\n                bs58 = require('bs58');\n                asn1 = forge.asn1, _forge$ed = forge.ed25519, privateKeyFromAsn1 = _forge$ed.privateKeyFromAsn1, publicKeyFromAsn1 = _forge$ed.publicKeyFromAsn1, ByteBuffer = forge.util.ByteBuffer;\n                _require = require('util'), promisify = _require.promisify;\n                _require2 = require('crypto'), createPublicKey = _require2.createPublicKey, generateKeyPair = _require2.generateKeyPair;\n                publicKeyEncoding = {\n                  format: 'der',\n                  type: 'spki'\n                };\n                privateKeyEncoding = {\n                  format: 'der',\n                  type: 'pkcs8'\n                }; // if no seed provided, generate a random key\n\n                if ('seed' in options) {\n                  _context4.next = 18;\n                  break;\n                }\n\n                generateKeyPairAsync = promisify(generateKeyPair);\n                _context4.next = 12;\n                return generateKeyPairAsync('ed25519', {\n                  publicKeyEncoding: publicKeyEncoding,\n                  privateKeyEncoding: privateKeyEncoding\n                });\n\n              case 12:\n                _yield$generateKeyPai = _context4.sent;\n                _publicKey3 = _yield$generateKeyPai.publicKey;\n                _privateKey3 = _yield$generateKeyPai.privateKey;\n                _publicKeyBytes = publicKeyFromAsn1(asn1.fromDer(new ByteBuffer(_publicKey3)));\n                _privateKeyFromAsn = privateKeyFromAsn1(asn1.fromDer(new ByteBuffer(_privateKey3))), _privateKeyBytes = _privateKeyFromAsn.privateKeyBytes;\n                return _context4.abrupt(\"return\", new Ed25519KeyPair(_objectSpread({\n                  publicKeyBase58: bs58.encode(_publicKeyBytes),\n                  // private key is the 32 byte private key + 32 byte public key\n                  privateKeyBase58: bs58.encode(Buffer.concat([_privateKeyBytes, _publicKeyBytes]))\n                }, options)));\n\n              case 18:\n                // create a key from the provided seed\n                seed = options.seed;\n\n                if (seed instanceof Uint8Array || Buffer.isBuffer(seed)) {\n                  seedBytes = Buffer.from(seed);\n                }\n\n                if (Buffer.isBuffer(seedBytes) && seedBytes.length === 32) {\n                  _context4.next = 22;\n                  break;\n                }\n\n                throw new TypeError('`seed` must be a 32 byte Buffer or Uint8Array.');\n\n              case 22:\n                _privateKey = require('./ed25519PrivateKeyNode12'); // create a node private key\n\n                _privateKey2 = _privateKey.create({\n                  seedBytes: seedBytes\n                }); // create a node public key from the private key\n\n                _publicKey2 = createPublicKey(_privateKey2); // export the keys and extract key bytes from the exported DERs\n\n                publicKeyBytes = publicKeyFromAsn1(asn1.fromDer(new ByteBuffer(_publicKey2.export(publicKeyEncoding))));\n                _privateKeyFromAsn2 = privateKeyFromAsn1(asn1.fromDer(new ByteBuffer(_privateKey2.export(privateKeyEncoding)))), privateKeyBytes = _privateKeyFromAsn2.privateKeyBytes;\n                return _context4.abrupt(\"return\", new Ed25519KeyPair(_objectSpread({\n                  publicKeyBase58: bs58.encode(publicKeyBytes),\n                  // private key is the 32 byte private key + 32 byte public key\n                  privateKeyBase58: bs58.encode(Buffer.concat([privateKeyBytes, publicKeyBytes]))\n                }, options)));\n\n              case 28:\n                if (!env.nodejs) {\n                  _context4.next = 35;\n                  break;\n                }\n\n                // TODO: use native node crypto api once it's available\n                sodium = require('sodium-native');\n                _bs = require('bs58');\n                _publicKey4 = new Buffer.alloc(sodium.crypto_sign_PUBLICKEYBYTES);\n                _privateKey4 = new Buffer.alloc(sodium.crypto_sign_SECRETKEYBYTES);\n\n                if ('seed' in options) {\n                  sodium.crypto_sign_seed_keypair(_publicKey4, _privateKey4, options.seed);\n                } else {\n                  sodium.crypto_sign_keypair(_publicKey4, _privateKey4);\n                }\n\n                return _context4.abrupt(\"return\", new Ed25519KeyPair(_objectSpread({\n                  publicKeyBase58: _bs.encode(_publicKey4),\n                  privateKeyBase58: _bs.encode(_privateKey4)\n                }, options)));\n\n              case 35:\n                generateOptions = {};\n\n                if ('seed' in options) {\n                  generateOptions.seed = options.seed;\n                }\n\n                _ed25519$generateKeyP = ed25519.generateKeyPair(generateOptions), publicKey = _ed25519$generateKeyP.publicKey, privateKey = _ed25519$generateKeyP.privateKey;\n                return _context4.abrupt(\"return\", new Ed25519KeyPair(_objectSpread({\n                  publicKeyBase58: base58.encode(publicKey),\n                  privateKeyBase58: base58.encode(privateKey)\n                }, options)));\n\n              case 39:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function generate() {\n        return _generate.apply(this, arguments);\n      }\n\n      return generate;\n    }()\n    /**\n     * Creates an Ed25519 Key Pair from an existing private key.\n     * @example\n     * > const options = {\n     *   privateKeyBase58: privateKey\n     * };\n     * > const key = await Ed25519KeyPair.from(options);\n     * > key\n     * Ed25519KeyPair { ...\n     * @param {Object} options - Contains a private key.\n     * @param {Object} [options.privateKey] - A private key object.\n     * @param {string} [options.privateKeyBase58] - A Base58\n     * Private key string.\n     *\n     * @returns {Ed25519KeyPair} An Ed25519 Key Pair.\n     */\n\n  }, {\n    key: \"from\",\n    value: function () {\n      var _from = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(options) {\n        var privateKeyBase58, keyPair;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                privateKeyBase58 = options.privateKeyBase58 || // legacy privateDidDoc format\n                options.privateKey && options.privateKey.privateKeyBase58;\n                keyPair = new Ed25519KeyPair(_objectSpread({\n                  privateKeyBase58: privateKeyBase58,\n                  type: options.type || options.keyType\n                }, options));\n                return _context5.abrupt(\"return\", keyPair);\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function from(_x6) {\n        return _from.apply(this, arguments);\n      }\n\n      return from;\n    }()\n  }, {\n    key: \"fingerprintFromPublicKey\",\n    value: function fingerprintFromPublicKey(_ref) {\n      var publicKeyBase58 = _ref.publicKeyBase58;\n      // ed25519 cryptonyms are multicodec encoded values, specifically:\n      // (multicodec ed25519-pub 0xed01 + key bytes)\n      var pubkeyBytes = util.base58Decode({\n        decode: base58.decode,\n        keyMaterial: publicKeyBase58,\n        type: 'public'\n      });\n      var buffer = new Uint8Array(2 + pubkeyBytes.length);\n      buffer[0] = 0xed;\n      buffer[1] = 0x01;\n      buffer.set(pubkeyBytes, 2); // prefix with `z` to indicate multi-base base58btc encoding\n\n      return \"z\".concat(base58.encode(buffer));\n    }\n  }]);\n\n  return Ed25519KeyPair;\n}(LDKeyPair);\n/**\n * @ignore\n * Returns an object with an async sign function.\n * The sign function is bound to the KeyPair\n * and then returned by the KeyPair's signer method.\n * @param {Ed25519KeyPair} key - An ED25519KeyPair.\n * @example\n * > const mySigner = ed25519SignerFactory(edKeyPair);\n * > await mySigner.sign({data})\n *\n * @returns {{sign: Function}} An object with an async function sign\n * using the private key passed in.\n */\n\n\nfunction ed25519SignerFactory(key) {\n  if (!key.privateKeyBase58) {\n    return {\n      sign: function sign() {\n        return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n          return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n            while (1) {\n              switch (_context6.prev = _context6.next) {\n                case 0:\n                  throw new Error('No private key to sign with.');\n\n                case 1:\n                case \"end\":\n                  return _context6.stop();\n              }\n            }\n          }, _callee6);\n        }))();\n      }\n    };\n  }\n\n  if (env.nodejs && require('semver').gte(process.version, '12.0.0')) {\n    var bs58 = require('bs58');\n\n    var privateKeyBytes = util.base58Decode({\n      decode: bs58.decode,\n      keyMaterial: key.privateKeyBase58,\n      type: 'private'\n    });\n\n    var _privateKey = require('./ed25519PrivateKeyNode12'); // create a Node private key\n\n\n    var _privateKey5 = _privateKey.create({\n      privateKeyBytes: privateKeyBytes\n    });\n\n    var _require3 = require('crypto'),\n        _sign = _require3.sign;\n\n    return {\n      sign: function sign(_ref2) {\n        return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n          var data, signature;\n          return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n            while (1) {\n              switch (_context7.prev = _context7.next) {\n                case 0:\n                  data = _ref2.data;\n                  signature = _sign(null, Buffer.from(data.buffer, data.byteOffset, data.length), _privateKey5);\n                  return _context7.abrupt(\"return\", signature);\n\n                case 3:\n                case \"end\":\n                  return _context7.stop();\n              }\n            }\n          }, _callee7);\n        }))();\n      }\n    };\n  }\n\n  if (env.nodejs) {\n    var sodium = require('sodium-native');\n\n    var _bs2 = require('bs58');\n\n    var _privateKey6 = util.base58Decode({\n      decode: _bs2.decode,\n      keyMaterial: key.privateKeyBase58,\n      type: 'private'\n    });\n\n    return {\n      sign: function sign(_ref3) {\n        return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n          var data, signature;\n          return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n            while (1) {\n              switch (_context8.prev = _context8.next) {\n                case 0:\n                  data = _ref3.data;\n                  signature = Buffer.alloc(sodium.crypto_sign_BYTES);\n                  _context8.next = 4;\n                  return sodium.crypto_sign_detached(signature, Buffer.from(data.buffer, data.byteOffset, data.length), _privateKey6);\n\n                case 4:\n                  return _context8.abrupt(\"return\", signature);\n\n                case 5:\n                case \"end\":\n                  return _context8.stop();\n              }\n            }\n          }, _callee8);\n        }))();\n      }\n    };\n  } // browser implementation\n\n\n  var privateKey = util.base58Decode({\n    decode: base58.decode,\n    keyMaterial: key.privateKeyBase58,\n    type: 'private'\n  });\n  return {\n    sign: function sign(_ref4) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                data = _ref4.data;\n                return _context9.abrupt(\"return\", ed25519.sign({\n                  message: data,\n                  privateKey: privateKey\n                }));\n\n              case 2:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9);\n      }))();\n    }\n  };\n}\n/**\n * @ignore\n * Returns an object with an async verify function.\n * The verify function is bound to the KeyPair\n * and then returned by the KeyPair's verifier method.\n * @param {Ed25519KeyPair} key - An Ed25519KeyPair.\n * @example\n * > const myVerifier = ed25519Verifier(edKeyPair);\n * > await myVerifier.verify({data, signature});\n *\n * @returns {{verify: Function}} An async verifier specific\n * to the key passed in.\n */\n\n\nfunction ed25519VerifierFactory(key) {\n  if (env.nodejs && require('semver').gte(process.version, '12.0.0')) {\n    var bs58 = require('bs58');\n\n    var publicKeyBytes = util.base58Decode({\n      decode: bs58.decode,\n      keyMaterial: key.publicKeyBase58,\n      type: 'public'\n    });\n\n    var _publicKey = require('./ed25519PublicKeyNode12'); // create a Node public key\n\n\n    var _publicKey5 = _publicKey.create({\n      publicKeyBytes: publicKeyBytes\n    });\n\n    var _require4 = require('crypto'),\n        _verify = _require4.verify;\n\n    return {\n      verify: function verify(_ref5) {\n        return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n          var data, signature;\n          return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n            while (1) {\n              switch (_context10.prev = _context10.next) {\n                case 0:\n                  data = _ref5.data, signature = _ref5.signature;\n                  return _context10.abrupt(\"return\", _verify(null, Buffer.from(data.buffer, data.byteOffset, data.length), _publicKey5, signature));\n\n                case 2:\n                case \"end\":\n                  return _context10.stop();\n              }\n            }\n          }, _callee10);\n        }))();\n      }\n    };\n  }\n\n  if (env.nodejs) {\n    var sodium = require('sodium-native');\n\n    var _bs3 = require('bs58');\n\n    var _publicKey6 = util.base58Decode({\n      decode: _bs3.decode,\n      keyMaterial: key.publicKeyBase58,\n      type: 'public'\n    });\n\n    return {\n      verify: function verify(_ref6) {\n        return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n          var data, signature;\n          return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n            while (1) {\n              switch (_context11.prev = _context11.next) {\n                case 0:\n                  data = _ref6.data, signature = _ref6.signature;\n                  return _context11.abrupt(\"return\", sodium.crypto_sign_verify_detached(Buffer.from(signature.buffer, signature.byteOffset, signature.length), Buffer.from(data.buffer, data.byteOffset, data.length), _publicKey6));\n\n                case 2:\n                case \"end\":\n                  return _context11.stop();\n              }\n            }\n          }, _callee11);\n        }))();\n      }\n    };\n  } // browser implementation\n\n\n  var publicKey = util.base58Decode({\n    decode: base58.decode,\n    keyMaterial: key.publicKeyBase58,\n    type: 'public'\n  });\n  return {\n    verify: function verify(_ref7) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n        var data, signature;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                data = _ref7.data, signature = _ref7.signature;\n                return _context12.abrupt(\"return\", ed25519.verify({\n                  message: data,\n                  signature: signature,\n                  publicKey: publicKey\n                }));\n\n              case 2:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12);\n      }))();\n    }\n  };\n}\n\nmodule.exports = Ed25519KeyPair;","map":{"version":3,"sources":["D:/My Works/Git/cowin-verify/node_modules/crypto-ld/lib/Ed25519KeyPair.js"],"names":["env","require","forge","base64url","ed25519","pki","base58","util","binary","LDKeyPair","Ed25519KeyPair","options","type","privateKeyBase58","publicKeyBase58","ed25519SignerFactory","ed25519VerifierFactory","publicKeyNode","keyNode","passphrase","encrypt","privateKeyJwe","privateKey","password","keySize","salt","random","getBytesSync","iterations","pbkdf2","key","jweHeader","alg","enc","jwk","kty","s","encode","c","iv","cipher","createCipher","start","update","createBuffer","JSON","stringify","finish","encrypted","output","getBytes","tag","mode","jwe","unprotected","ciphertext","decipher","createDecipher","pass","Error","parse","fingerprintFromPublicKey","fingerprint","error","valid","fingerprintBuffer","base58Decode","decode","keyMaterial","slice","e","publicKeyBuffer","toString","equals","nodejs","gte","process","version","bs58","asn1","privateKeyFromAsn1","publicKeyFromAsn1","ByteBuffer","promisify","createPublicKey","generateKeyPair","publicKeyEncoding","format","privateKeyEncoding","generateKeyPairAsync","publicKey","publicKeyBytes","fromDer","privateKeyBytes","Buffer","concat","seed","Uint8Array","isBuffer","seedBytes","from","length","TypeError","_privateKey","create","export","sodium","alloc","crypto_sign_PUBLICKEYBYTES","crypto_sign_SECRETKEYBYTES","crypto_sign_seed_keypair","crypto_sign_keypair","generateOptions","keyPair","keyType","pubkeyBytes","buffer","set","sign","data","signature","byteOffset","crypto_sign_BYTES","crypto_sign_detached","message","_publicKey","verify","crypto_sign_verify_detached","module","exports"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2018-2019 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst env = require('./env');\nconst forge = require('node-forge');\nconst base64url = require('base64url-universal');\nconst {pki: {ed25519}, util: {binary: {base58}}} = forge;\nconst util = require('./util');\nconst LDKeyPair = require('./LDKeyPair');\n\nclass Ed25519KeyPair extends LDKeyPair {\n  /* eslint-disable max-len */\n  /**\n   * An implementation of\n   * [Ed25519 Signature 2018]{@link https://w3c-dvcg.github.io/lds-ed25519-2018/}\n   * for\n   * [jsonld-signatures.]{@link https://github.com/digitalbazaar/jsonld-signatures}\n   * @example\n   * > const privateKeyBase58 =\n   *   '3Mmk4UzTRJTEtxaKk61LxtgUxAa2Dg36jF6VogPtRiKvfpsQWKPCLesKSV182RMmvM'\n   *   + 'JKk6QErH3wgdHp8itkSSiF';\n   * > const options = {\n   *   publicKeyBase58: 'GycSSui454dpYRKiFdsQ5uaE8Gy3ac6dSMPcAoQsk8yq',\n   *   privateKeyBase58\n   * };\n   * > const EDKey = new Ed25519KeyPair(options);\n   * > EDKey\n   * Ed25519KeyPair { ...\n   * @param {KeyPairOptions} options - Base58 keys plus\n   * other options most follow\n   * [KeyPairOptions]{@link ./index.md#KeyPairOptions}.\n   * @param {string} options.publicKeyBase58 - Base58 encoded Public Key\n   * unencoded is 32-bytes.\n   * @param {string} options.privateKeyBase58 - Base58 Private Key\n   * unencoded is 64-bytes.\n   */\n  /* eslint-enable */\n  constructor(options = {}) {\n    super(options);\n    this.type = 'Ed25519VerificationKey2018';\n    this.privateKeyBase58 = options.privateKeyBase58;\n    this.publicKeyBase58 = options.publicKeyBase58;\n  }\n  /**\n   * Returns the Base58 encoded public key.\n   * @implements {LDKeyPair#publicKey}\n   * @readonly\n   *\n   * @returns {string} The Base58 encoded public key.\n   * @see [publicKey]{@link ./LDKeyPair.md#publicKey}\n   */\n  get publicKey() {\n    return this.publicKeyBase58;\n  }\n  /**\n   * Returns the Base58 encoded private key.\n   * @implements {LDKeyPair#privateKey}\n   * @readonly\n   *\n   * @returns {string} The Base58 encoded private key.\n   * @see [privateKey]{@link ./LDKeyPair.md#privateKey}\n   */\n  get privateKey() {\n    return this.privateKeyBase58;\n  }\n\n  /**\n   * Generates a KeyPair with an optional deterministic seed.\n   * @example\n   * > const keyPair = await Ed25519KeyPair.generate();\n   * > keyPair\n   * Ed25519KeyPair { ...\n   * @param {KeyPairOptions} [options={}] - See LDKeyPair\n   * docstring for full list.\n   * @param {Uint8Array|Buffer} [options.seed] -\n   * a 32-byte array seed for a deterministic key.\n   *\n   * @returns {Promise<Ed25519KeyPair>} Generates a key pair.\n   */\n  static async generate(options = {}) {\n    if(env.nodejs && require('semver').gte(process.version, '12.0.0')) {\n      const bs58 = require('bs58');\n      const {\n        asn1, ed25519: {privateKeyFromAsn1, publicKeyFromAsn1},\n        util: {ByteBuffer}\n      } = forge;\n      const {promisify} = require('util');\n      const {createPublicKey, generateKeyPair} = require('crypto');\n      const publicKeyEncoding = {format: 'der', type: 'spki'};\n      const privateKeyEncoding = {format: 'der', type: 'pkcs8'};\n      // if no seed provided, generate a random key\n      if(!('seed' in options)) {\n        const generateKeyPairAsync = promisify(generateKeyPair);\n        const {publicKey, privateKey} = await generateKeyPairAsync('ed25519', {\n          publicKeyEncoding, privateKeyEncoding\n        });\n        const publicKeyBytes = publicKeyFromAsn1(\n          asn1.fromDer(new ByteBuffer(publicKey)));\n        const {privateKeyBytes} = privateKeyFromAsn1(\n          asn1.fromDer(new ByteBuffer(privateKey)));\n\n        return new Ed25519KeyPair({\n          publicKeyBase58: bs58.encode(publicKeyBytes),\n          // private key is the 32 byte private key + 32 byte public key\n          privateKeyBase58: bs58.encode(Buffer.concat(\n            [privateKeyBytes, publicKeyBytes])),\n          ...options\n        });\n      }\n      // create a key from the provided seed\n      const {seed} = options;\n      let seedBytes;\n      if(seed instanceof Uint8Array || Buffer.isBuffer(seed)) {\n        seedBytes = Buffer.from(seed);\n      }\n      if(!(Buffer.isBuffer(seedBytes) && seedBytes.length === 32)) {\n        throw new TypeError('`seed` must be a 32 byte Buffer or Uint8Array.');\n      }\n      const _privateKey = require('./ed25519PrivateKeyNode12');\n\n      // create a node private key\n      const privateKey = _privateKey.create({seedBytes});\n\n      // create a node public key from the private key\n      const publicKey = createPublicKey(privateKey);\n\n      // export the keys and extract key bytes from the exported DERs\n      const publicKeyBytes = publicKeyFromAsn1(\n        asn1.fromDer(new ByteBuffer(publicKey.export(publicKeyEncoding))));\n      const {privateKeyBytes} = privateKeyFromAsn1(\n        asn1.fromDer(new ByteBuffer(privateKey.export(privateKeyEncoding))));\n\n      return new Ed25519KeyPair({\n        publicKeyBase58: bs58.encode(publicKeyBytes),\n        // private key is the 32 byte private key + 32 byte public key\n        privateKeyBase58: bs58.encode(Buffer.concat(\n          [privateKeyBytes, publicKeyBytes])),\n        ...options\n      });\n    }\n    if(env.nodejs) {\n      // TODO: use native node crypto api once it's available\n      const sodium = require('sodium-native');\n      const bs58 = require('bs58');\n      const publicKey = new Buffer.alloc(sodium.crypto_sign_PUBLICKEYBYTES);\n      const privateKey = new Buffer.alloc(sodium.crypto_sign_SECRETKEYBYTES);\n      if('seed' in options) {\n        sodium.crypto_sign_seed_keypair(publicKey, privateKey, options.seed);\n      } else {\n        sodium.crypto_sign_keypair(publicKey, privateKey);\n      }\n      return new Ed25519KeyPair({\n        publicKeyBase58: bs58.encode(publicKey),\n        privateKeyBase58: bs58.encode(privateKey),\n        ...options\n      });\n    }\n\n    const generateOptions = {};\n    if('seed' in options) {\n      generateOptions.seed = options.seed;\n    }\n    const {publicKey, privateKey} = ed25519.generateKeyPair(generateOptions);\n    return new Ed25519KeyPair({\n      publicKeyBase58: base58.encode(publicKey),\n      privateKeyBase58: base58.encode(privateKey),\n      ...options\n    });\n  }\n  /**\n   * Creates an Ed25519 Key Pair from an existing private key.\n   * @example\n   * > const options = {\n   *   privateKeyBase58: privateKey\n   * };\n   * > const key = await Ed25519KeyPair.from(options);\n   * > key\n   * Ed25519KeyPair { ...\n   * @param {Object} options - Contains a private key.\n   * @param {Object} [options.privateKey] - A private key object.\n   * @param {string} [options.privateKeyBase58] - A Base58\n   * Private key string.\n   *\n   * @returns {Ed25519KeyPair} An Ed25519 Key Pair.\n   */\n  static async from(options) {\n    const privateKeyBase58 = options.privateKeyBase58 ||\n      // legacy privateDidDoc format\n      (options.privateKey && options.privateKey.privateKeyBase58);\n    const keyPair = new Ed25519KeyPair({\n      privateKeyBase58,\n      type: options.type || options.keyType, // Todo: deprecate keyType usage\n      ...options\n    });\n\n    return keyPair;\n  }\n\n  /* eslint-disable max-len */\n  /**\n   * Returns a signer object for use with\n   * [jsonld-signatures]{@link https://github.com/digitalbazaar/jsonld-signatures}.\n   * @example\n   * > const signer = keyPair.signer();\n   * > signer\n   * { sign: [AsyncFunction: sign] }\n   * > signer.sign({data});\n   *\n   * @returns {{sign: Function}} A signer for the json-ld block.\n   */\n  /* eslint-enable */\n  signer() {\n    return ed25519SignerFactory(this);\n  }\n\n  /* eslint-disable max-len */\n  /**\n   * Returns a verifier object for use with\n   * [jsonld-signatures]{@link https://github.com/digitalbazaar/jsonld-signatures}.\n   * @example\n   * > const verifier = keyPair.verifier();\n   * > verifier\n   * { verify: [AsyncFunction: verify] }\n   * > verifier.verify(key);\n   *\n   * @returns {{verify: Function}} Used to verify jsonld-signatures.\n   */\n  /* eslint-enable */\n  verifier() {\n    return ed25519VerifierFactory(this);\n  }\n\n  /* eslint-disable max-len */\n  /**\n   * Adds a public key base to a public key node.\n   * @example\n   * > keyPair.addEncodedPublicKey({});\n   * { publicKeyBase58: 'GycSSui454dpYRKiFdsQ5uaE8Gy3ac6dSMPcAoQsk8yq' }\n   * @param {Object} publicKeyNode - The public key node in a jsonld-signature.\n   * @param {string} publicKeyNode.publicKeyBase58 - Base58 Public Key for\n   * [jsonld-signatures]{@link https://github.com/digitalbazaar/jsonld-signatures}.\n   *\n   * @returns {{verify: Function}} A PublicKeyNode in a block.\n   */\n  /* eslint-enable */\n  addEncodedPublicKey(publicKeyNode) {\n    publicKeyNode.publicKeyBase58 = this.publicKeyBase58;\n    return publicKeyNode;\n  }\n\n  /**\n   * Adds an encrypted private key to the KeyPair.\n   * @param {Object} keyNode - A plain object.\n   *\n   * @return {Object} The keyNode with an encrypted private key attached.\n   */\n  async addEncryptedPrivateKey(keyNode) {\n    if(this.passphrase !== null) {\n      keyNode.privateKeyJwe = await this.encrypt(\n        {privateKeyBase58: this.privateKeyBase58},\n        this.passphrase\n      );\n    } else {\n      // no passphrase, do not encrypt private key\n      keyNode.privateKeyBase58 = this.privateKeyBase58;\n    }\n    return keyNode;\n  }\n\n  /**\n   * Produces a 32-byte encrypted key.\n   * @example\n   * > const encryptedContent = await edKeyPair\n   *   .encrypt(privateKey, 'Test1244!');\n   * @param {string} privateKey - The base58 private key.\n   * @param {string} password - The password.\n   *\n   * @returns {Promise<JWE>} Produces JSON Web encrypted content.\n   * @see [JWE]{@link ./index.md#JWE}\n   */\n  async encrypt(privateKey, password) {\n    const keySize = 32;\n    const salt = forge.random.getBytesSync(32);\n    const iterations = 4096;\n    const key = await LDKeyPair.pbkdf2(password, salt, iterations, keySize);\n\n    const jweHeader = {\n      alg: 'PBES2-A128GCMKW',\n      enc: 'A128GCMKW',\n      jwk: {\n        kty: 'PBKDF2',\n        s: base64url.encode(salt),\n        c: iterations\n      }\n    };\n\n    // FIXME: this probably needs to be cleaned up/made more standard\n\n    const iv = forge.random.getBytesSync(12);\n    const cipher = forge.cipher.createCipher('AES-GCM', key);\n    cipher.start({iv});\n    cipher.update(forge.util.createBuffer(JSON.stringify(privateKey)));\n    cipher.finish();\n    const encrypted = cipher.output.getBytes();\n    const tag = cipher.mode.tag.getBytes();\n\n    const jwe = {\n      unprotected: jweHeader,\n      iv: base64url.encode(iv),\n      ciphertext: base64url.encode(encrypted),\n      tag: base64url.encode(tag)\n    };\n\n    return jwe;\n  }\n\n  /**\n   * Decrypts jwe content to a privateKey.\n   * @param {JWE} jwe - Encrypted content from a block.\n   * @param {string} password - Password for the key used to sign the content.\n   *\n   * @returns {Object} A Base58 private key.\n   * @see [JWE]{@link ./index.md#JWE}\n   */\n  async decrypt(jwe, password) {\n    // FIXME: check header, implement according to JWE standard\n    const keySize = 32;\n    const {c: iterations} = jwe.unprotected.jwk;\n    let {s: salt} = jwe.unprotected.jwk;\n    salt = base64url.encode(salt);\n    const key = await LDKeyPair.pbkdf2(password, salt, iterations, keySize);\n\n    const iv = base64url.encode(jwe.iv);\n    const tag = base64url.encode(jwe.tag);\n    const decipher = forge.cipher.createDecipher('AES-GCM', key);\n    decipher.start({iv, tag});\n    decipher.update(base64url.encode(jwe.ciphertext));\n    const pass = decipher.finish();\n    if(!pass) {\n      throw new Error('Invalid password.');\n    }\n\n    const privateKey = JSON.parse(decipher.output.getBytes());\n    return privateKey;\n  }\n\n  /**\n   * Generates and returns a multiformats encoded\n   * ed25519 public key fingerprint (for use with cryptonyms, for example).\n   * @see https://github.com/multiformats/multicodec\n   *\n   * @param {string} publicKeyBase58 - The base58 encoded public key material.\n   *\n   * @returns {string} The fingerprint.\n   */\n  static fingerprintFromPublicKey({publicKeyBase58}) {\n    // ed25519 cryptonyms are multicodec encoded values, specifically:\n    // (multicodec ed25519-pub 0xed01 + key bytes)\n    const pubkeyBytes = util.base58Decode({\n      decode: base58.decode,\n      keyMaterial: publicKeyBase58,\n      type: 'public'\n    });\n    const buffer = new Uint8Array(2 + pubkeyBytes.length);\n    buffer[0] = 0xed;\n    buffer[1] = 0x01;\n    buffer.set(pubkeyBytes, 2);\n    // prefix with `z` to indicate multi-base base58btc encoding\n    return `z${base58.encode(buffer)}`;\n  }\n\n  /**\n   * Generates and returns a multiformats encoded\n   * ed25519 public key fingerprint (for use with cryptonyms, for example).\n   * @see https://github.com/multiformats/multicodec\n   *\n   * @returns {string} The fingerprint.\n   */\n  fingerprint() {\n    const {publicKeyBase58} = this;\n    return Ed25519KeyPair.fingerprintFromPublicKey({publicKeyBase58});\n  }\n\n  /**\n   * Tests whether the fingerprint was\n   * generated from a given key pair.\n   * @example\n   * > edKeyPair.verifyFingerprint('z2S2Q6MkaFJewa');\n   * {valid: true};\n   * @param {string} fingerprint - A Base58 public key.\n   *\n   * @returns {Object} An object indicating valid is true or false.\n   */\n  verifyFingerprint(fingerprint) {\n    // fingerprint should have `z` prefix indicating\n    // that it's multi-base encoded\n    if(!(typeof fingerprint === 'string' && fingerprint[0] === 'z')) {\n      return {\n        error: new Error('`fingerprint` must be a multibase encoded string.'),\n        valid: false\n      };\n    }\n    let fingerprintBuffer;\n    try {\n      fingerprintBuffer = util.base58Decode({\n        decode: base58.decode,\n        keyMaterial: fingerprint.slice(1),\n        type: `fingerprint's`\n      });\n    } catch(e) {\n      return {error: e, valid: false};\n    }\n    let publicKeyBuffer;\n    try {\n      publicKeyBuffer = util.base58Decode({\n        decode: base58.decode,\n        keyMaterial: this.publicKeyBase58,\n        type: 'public'\n      });\n    } catch(e) {\n      return {error: e, valid: false};\n    }\n\n    // validate the first two multicodec bytes 0xed01\n    const valid = fingerprintBuffer.slice(0, 2).toString('hex') === 'ed01' &&\n      publicKeyBuffer.equals(fingerprintBuffer.slice(2));\n    if(!valid) {\n      return {\n        error: new Error('The fingerprint does not match the public key.'),\n        valid: false\n      };\n    }\n    return {valid};\n  }\n}\n\n/**\n * @ignore\n * Returns an object with an async sign function.\n * The sign function is bound to the KeyPair\n * and then returned by the KeyPair's signer method.\n * @param {Ed25519KeyPair} key - An ED25519KeyPair.\n * @example\n * > const mySigner = ed25519SignerFactory(edKeyPair);\n * > await mySigner.sign({data})\n *\n * @returns {{sign: Function}} An object with an async function sign\n * using the private key passed in.\n */\nfunction ed25519SignerFactory(key) {\n  if(!key.privateKeyBase58) {\n    return {\n      async sign() {\n        throw new Error('No private key to sign with.');\n      }\n    };\n  }\n\n  if(env.nodejs && require('semver').gte(process.version, '12.0.0')) {\n    const bs58 = require('bs58');\n    const privateKeyBytes = util.base58Decode({\n      decode: bs58.decode,\n      keyMaterial: key.privateKeyBase58,\n      type: 'private'\n    });\n\n    const _privateKey = require('./ed25519PrivateKeyNode12');\n    // create a Node private key\n    const privateKey = _privateKey.create({privateKeyBytes});\n    const {sign} = require('crypto');\n\n    return {\n      async sign({data}) {\n        const signature = sign(\n          null, Buffer.from(data.buffer, data.byteOffset, data.length),\n          privateKey);\n        return signature;\n      }\n    };\n  }\n  if(env.nodejs) {\n    const sodium = require('sodium-native');\n    const bs58 = require('bs58');\n    const privateKey = util.base58Decode({\n      decode: bs58.decode,\n      keyMaterial: key.privateKeyBase58,\n      type: 'private'\n    });\n    return {\n      async sign({data}) {\n        const signature = Buffer.alloc(sodium.crypto_sign_BYTES);\n        await sodium.crypto_sign_detached(\n          signature,\n          Buffer.from(data.buffer, data.byteOffset, data.length),\n          privateKey);\n        return signature;\n      }\n    };\n  }\n\n  // browser implementation\n  const privateKey = util.base58Decode({\n    decode: base58.decode,\n    keyMaterial: key.privateKeyBase58,\n    type: 'private'\n  });\n  return {\n    async sign({data}) {\n      return ed25519.sign({message: data, privateKey});\n    }\n  };\n}\n\n/**\n * @ignore\n * Returns an object with an async verify function.\n * The verify function is bound to the KeyPair\n * and then returned by the KeyPair's verifier method.\n * @param {Ed25519KeyPair} key - An Ed25519KeyPair.\n * @example\n * > const myVerifier = ed25519Verifier(edKeyPair);\n * > await myVerifier.verify({data, signature});\n *\n * @returns {{verify: Function}} An async verifier specific\n * to the key passed in.\n */\nfunction ed25519VerifierFactory(key) {\n  if(env.nodejs && require('semver').gte(process.version, '12.0.0')) {\n    const bs58 = require('bs58');\n    const publicKeyBytes = util.base58Decode({\n      decode: bs58.decode,\n      keyMaterial: key.publicKeyBase58,\n      type: 'public'\n    });\n    const _publicKey = require('./ed25519PublicKeyNode12');\n    // create a Node public key\n    const publicKey = _publicKey.create({publicKeyBytes});\n    const {verify} = require('crypto');\n    return {\n      async verify({data, signature}) {\n        return verify(\n          null, Buffer.from(data.buffer, data.byteOffset, data.length),\n          publicKey, signature);\n      }\n    };\n  }\n  if(env.nodejs) {\n    const sodium = require('sodium-native');\n    const bs58 = require('bs58');\n    const publicKey = util.base58Decode({\n      decode: bs58.decode,\n      keyMaterial: key.publicKeyBase58,\n      type: 'public'\n    });\n    return {\n      async verify({data, signature}) {\n        return sodium.crypto_sign_verify_detached(\n          Buffer.from(signature.buffer, signature.byteOffset, signature.length),\n          Buffer.from(data.buffer, data.byteOffset, data.length),\n          publicKey);\n      }\n    };\n  }\n\n  // browser implementation\n  const publicKey = util.base58Decode({\n    decode: base58.decode,\n    keyMaterial: key.publicKeyBase58,\n    type: 'public'\n  });\n  return {\n    async verify({data, signature}) {\n      return ed25519.verify({message: data, signature, publicKey});\n    }\n  };\n}\n\nmodule.exports = Ed25519KeyPair;\n"]},"metadata":{},"sourceType":"script"}