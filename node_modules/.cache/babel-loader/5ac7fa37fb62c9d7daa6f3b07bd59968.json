{"ast":null,"code":"/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nvar _defineProperty = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _createForOfIteratorHelper = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _require = require('./context'),\n    isKeyword = _require.isKeyword;\n\nvar graphTypes = require('./graphTypes');\n\nvar types = require('./types');\n\nvar util = require('./util');\n\nvar JsonLdError = require('./JsonLdError');\n\nvar _require2 = require('./nodeMap'),\n    _createNodeMap = _require2.createNodeMap,\n    _mergeNodeMapGraphs = _require2.mergeNodeMapGraphs;\n\nvar api = {};\nmodule.exports = api;\n/**\n * Performs JSON-LD `merged` framing.\n *\n * @param input the expanded JSON-LD to frame.\n * @param frame the expanded JSON-LD frame to use.\n * @param options the framing options.\n *\n * @return the framed output.\n */\n\napi.frameMergedOrDefault = function (input, frame, options) {\n  // create framing state\n  var state = {\n    options: options,\n    graph: '@default',\n    graphMap: {\n      '@default': {}\n    },\n    graphStack: [],\n    subjectStack: [],\n    link: {},\n    bnodeMap: {}\n  }; // produce a map of all graphs and name each bnode\n  // FIXME: currently uses subjects from @merged graph only\n\n  var issuer = new util.IdentifierIssuer('_:b');\n\n  _createNodeMap(input, state.graphMap, '@default', issuer);\n\n  if (options.merged) {\n    state.graphMap['@merged'] = _mergeNodeMapGraphs(state.graphMap);\n    state.graph = '@merged';\n  }\n\n  state.subjects = state.graphMap[state.graph]; // frame the subjects\n\n  var framed = [];\n  api.frame(state, Object.keys(state.subjects).sort(), frame, framed); // If pruning blank nodes, find those to prune\n\n  if (options.pruneBlankNodeIdentifiers) {\n    // remove all blank nodes appearing only once, done in compaction\n    options.bnodesToClear = Object.keys(state.bnodeMap).filter(function (id) {\n      return state.bnodeMap[id].length === 1;\n    });\n  }\n\n  return framed;\n};\n/**\n * Frames subjects according to the given frame.\n *\n * @param state the current framing state.\n * @param subjects the subjects to filter.\n * @param frame the frame.\n * @param parent the parent subject or top-level array.\n * @param property the parent property, initialized to null.\n */\n\n\napi.frame = function (state, subjects, frame, parent) {\n  var property = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n\n  // validate the frame\n  _validateFrame(frame);\n\n  frame = frame[0]; // get flags for current frame\n\n  var options = state.options;\n  var flags = {\n    embed: _getFrameFlag(frame, options, 'embed'),\n    explicit: _getFrameFlag(frame, options, 'explicit'),\n    requireAll: _getFrameFlag(frame, options, 'requireAll')\n  }; // filter out subjects that match the frame\n\n  var matches = _filterSubjects(state, subjects, frame, flags); // add matches to output\n\n\n  var ids = Object.keys(matches).sort();\n\n  var _iterator = _createForOfIteratorHelper(ids),\n      _step;\n\n  try {\n    var _loop = function _loop() {\n      var id = _step.value;\n      var subject = matches[id];\n\n      if (flags.embed === '@link' && id in state.link) {\n        // TODO: may want to also match an existing linked subject against\n        // the current frame ... so different frames could produce different\n        // subjects that are only shared in-memory when the frames are the same\n        // add existing linked subject\n        _addFrameOutput(parent, property, state.link[id]);\n\n        return \"continue\";\n      }\n      /* Note: In order to treat each top-level match as a compartmentalized\n      result, clear the unique embedded subjects map when the property is null,\n      which only occurs at the top-level. */\n\n\n      if (property === null) {\n        state.uniqueEmbeds = _defineProperty({}, state.graph, {});\n      } else {\n        state.uniqueEmbeds[state.graph] = state.uniqueEmbeds[state.graph] || {};\n      } // start output for subject\n\n\n      var output = {};\n      output['@id'] = id;\n\n      if (id.indexOf('_:') === 0) {\n        util.addValue(state.bnodeMap, id, output, {\n          propertyIsArray: true\n        });\n      }\n\n      state.link[id] = output; // if embed is @never or if a circular reference would be created by an\n      // embed, the subject cannot be embedded, just add the reference;\n      // note that a circular reference won't occur when the embed flag is\n      // `@link` as the above check will short-circuit before reaching this point\n\n      if (flags.embed === '@never' || _createsCircularReference(subject, state.graph, state.subjectStack)) {\n        _addFrameOutput(parent, property, output);\n\n        return \"continue\";\n      } // if only the last match should be embedded\n\n\n      if (flags.embed === '@last') {\n        // remove any existing embed\n        if (id in state.uniqueEmbeds[state.graph]) {\n          _removeEmbed(state, id);\n        }\n\n        state.uniqueEmbeds[state.graph][id] = {\n          parent: parent,\n          property: property\n        };\n      } // push matching subject onto stack to enable circular embed checks\n\n\n      state.subjectStack.push({\n        subject: subject,\n        graph: state.graph\n      }); // subject is also the name of a graph\n\n      if (id in state.graphMap) {\n        var recurse = false;\n        var subframe = null;\n\n        if (!('@graph' in frame)) {\n          recurse = state.graph !== '@merged';\n          subframe = {};\n        } else {\n          subframe = frame['@graph'][0];\n\n          if (!types.isObject(subframe)) {\n            subframe = {};\n          }\n\n          recurse = !(id === '@merged' || id === '@default');\n        }\n\n        if (recurse) {\n          state.graphStack.push(state.graph);\n          state.graph = id; // recurse into graph\n\n          api.frame(state, Object.keys(state.graphMap[id]).sort(), [subframe], output, '@graph');\n          state.graph = state.graphStack.pop;\n        }\n      } // iterate over subject properties\n\n\n      var _iterator2 = _createForOfIteratorHelper(Object.keys(subject).sort()),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var prop = _step2.value;\n\n          // copy keywords to output\n          if (isKeyword(prop)) {\n            output[prop] = util.clone(subject[prop]);\n\n            if (prop === '@type') {\n              // count bnode values of @type\n              var _iterator5 = _createForOfIteratorHelper(subject['@type']),\n                  _step5;\n\n              try {\n                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                  var type = _step5.value;\n\n                  if (type.indexOf('_:') === 0) {\n                    util.addValue(state.bnodeMap, type, output, {\n                      propertyIsArray: true\n                    });\n                  }\n                }\n              } catch (err) {\n                _iterator5.e(err);\n              } finally {\n                _iterator5.f();\n              }\n            }\n\n            continue;\n          } // explicit is on and property isn't in the frame, skip processing\n\n\n          if (flags.explicit && !(prop in frame)) {\n            continue;\n          } // add objects\n\n\n          var _iterator6 = _createForOfIteratorHelper(subject[prop]),\n              _step6;\n\n          try {\n            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n              var o = _step6.value;\n\n              var _subframe2 = prop in frame ? frame[prop] : _createImplicitFrame(flags); // recurse into list\n\n\n              if (graphTypes.isList(o)) {\n                // add empty list\n                var list = {\n                  '@list': []\n                };\n\n                _addFrameOutput(output, prop, list); // add list objects\n\n\n                var src = o['@list'];\n\n                for (var n in src) {\n                  o = src[n];\n\n                  if (graphTypes.isSubjectReference(o)) {\n                    var _subframe3 = prop in frame ? frame[prop][0]['@list'] : _createImplicitFrame(flags); // recurse into subject reference\n\n\n                    api.frame(state, [o['@id']], _subframe3, list, '@list');\n                  } else {\n                    // include other values automatically\n                    _addFrameOutput(list, '@list', util.clone(o));\n                  }\n                }\n\n                continue;\n              }\n\n              if (graphTypes.isSubjectReference(o)) {\n                // recurse into subject reference\n                api.frame(state, [o['@id']], _subframe2, output, prop);\n              } else if (_valueMatch(_subframe2[0], o)) {\n                // include other values, if they match\n                _addFrameOutput(output, prop, util.clone(o));\n              }\n            }\n          } catch (err) {\n            _iterator6.e(err);\n          } finally {\n            _iterator6.f();\n          }\n        } // handle defaults\n\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      var _iterator3 = _createForOfIteratorHelper(Object.keys(frame).sort()),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _prop = _step3.value;\n\n          // skip keywords\n          if (isKeyword(_prop)) {\n            continue;\n          } // if omit default is off, then include default values for properties\n          // that appear in the next frame but are not in the matching subject\n\n\n          var next = frame[_prop][0] || {};\n\n          var omitDefaultOn = _getFrameFlag(next, options, 'omitDefault');\n\n          if (!omitDefaultOn && !(_prop in output)) {\n            var preserve = '@null';\n\n            if ('@default' in next) {\n              preserve = util.clone(next['@default']);\n            }\n\n            if (!types.isArray(preserve)) {\n              preserve = [preserve];\n            }\n\n            output[_prop] = [{\n              '@preserve': preserve\n            }];\n          }\n        } // if embed reverse values by finding nodes having this subject as a value\n        // of the associated property\n\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      if ('@reverse' in frame) {\n        var _iterator4 = _createForOfIteratorHelper(Object.keys(frame['@reverse']).sort()),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var reverseProp = _step4.value;\n            var _subframe = frame['@reverse'][reverseProp];\n\n            for (var _i = 0, _Object$keys = Object.keys(state.subjects); _i < _Object$keys.length; _i++) {\n              var _subject = _Object$keys[_i];\n              var nodeValues = util.getValues(state.subjects[_subject], reverseProp);\n\n              if (nodeValues.some(function (v) {\n                return v['@id'] === id;\n              })) {\n                // node has property referencing this subject, recurse\n                output['@reverse'] = output['@reverse'] || {};\n                util.addValue(output['@reverse'], reverseProp, [], {\n                  propertyIsArray: true\n                });\n                api.frame(state, [_subject], _subframe, output['@reverse'][reverseProp], property);\n              }\n            }\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      } // add output to parent\n\n\n      _addFrameOutput(parent, property, output); // pop matching subject from circular ref-checking stack\n\n\n      state.subjectStack.pop();\n    };\n\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _ret = _loop();\n\n      if (_ret === \"continue\") continue;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n};\n/**\n * Creates an implicit frame when recursing through subject matches. If\n * a frame doesn't have an explicit frame for a particular property, then\n * a wildcard child frame will be created that uses the same flags that the\n * parent frame used.\n *\n * @param flags the current framing flags.\n *\n * @return the implicit frame.\n */\n\n\nfunction _createImplicitFrame(flags) {\n  var frame = {};\n\n  for (var key in flags) {\n    if (flags[key] !== undefined) {\n      frame['@' + key] = [flags[key]];\n    }\n  }\n\n  return [frame];\n}\n/**\n * Checks the current subject stack to see if embedding the given subject\n * would cause a circular reference.\n *\n * @param subjectToEmbed the subject to embed.\n * @param graph the graph the subject to embed is in.\n * @param subjectStack the current stack of subjects.\n *\n * @return true if a circular reference would be created, false if not.\n */\n\n\nfunction _createsCircularReference(subjectToEmbed, graph, subjectStack) {\n  for (var i = subjectStack.length - 1; i >= 0; --i) {\n    var subject = subjectStack[i];\n\n    if (subject.graph === graph && subject.subject['@id'] === subjectToEmbed['@id']) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Gets the frame flag value for the given flag name.\n *\n * @param frame the frame.\n * @param options the framing options.\n * @param name the flag name.\n *\n * @return the flag value.\n */\n\n\nfunction _getFrameFlag(frame, options, name) {\n  var flag = '@' + name;\n  var rval = flag in frame ? frame[flag][0] : options[name];\n\n  if (name === 'embed') {\n    // default is \"@last\"\n    // backwards-compatibility support for \"embed\" maps:\n    // true => \"@last\"\n    // false => \"@never\"\n    if (rval === true) {\n      rval = '@last';\n    } else if (rval === false) {\n      rval = '@never';\n    } else if (rval !== '@always' && rval !== '@never' && rval !== '@link') {\n      rval = '@last';\n    }\n  }\n\n  return rval;\n}\n/**\n * Validates a JSON-LD frame, throwing an exception if the frame is invalid.\n *\n * @param frame the frame to validate.\n */\n\n\nfunction _validateFrame(frame) {\n  if (!types.isArray(frame) || frame.length !== 1 || !types.isObject(frame[0])) {\n    throw new JsonLdError('Invalid JSON-LD syntax; a JSON-LD frame must be a single object.', 'jsonld.SyntaxError', {\n      frame: frame\n    });\n  }\n}\n/**\n * Returns a map of all of the subjects that match a parsed frame.\n *\n * @param state the current framing state.\n * @param subjects the set of subjects to filter.\n * @param frame the parsed frame.\n * @param flags the frame flags.\n *\n * @return all of the matched subjects.\n */\n\n\nfunction _filterSubjects(state, subjects, frame, flags) {\n  // filter subjects in @id order\n  var rval = {};\n\n  var _iterator7 = _createForOfIteratorHelper(subjects),\n      _step7;\n\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var id = _step7.value;\n      var subject = state.graphMap[state.graph][id];\n\n      if (_filterSubject(state, subject, frame, flags)) {\n        rval[id] = subject;\n      }\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n\n  return rval;\n}\n/**\n * Returns true if the given subject matches the given frame.\n *\n * Matches either based on explicit type inclusion where the node has any\n * type listed in the frame. If the frame has empty types defined matches\n * nodes not having a @type. If the frame has a type of {} defined matches\n * nodes having any type defined.\n *\n * Otherwise, does duck typing, where the node must have all of the\n * properties defined in the frame.\n *\n * @param state the current framing state.\n * @param subject the subject to check.\n * @param frame the frame to check.\n * @param flags the frame flags.\n *\n * @return true if the subject matches, false if not.\n */\n\n\nfunction _filterSubject(state, subject, frame, flags) {\n  // check ducktype\n  var wildcard = true;\n  var matchesSome = false;\n\n  var _loop2 = function _loop2(key) {\n    var matchThis = false;\n    var nodeValues = util.getValues(subject, key);\n    var isEmpty = util.getValues(frame, key).length === 0;\n\n    if (isKeyword(key)) {\n      // skip non-@id and non-@type\n      if (key !== '@id' && key !== '@type') {\n        return \"continue\";\n      }\n\n      wildcard = false; // check @id for a specific @id value\n\n      if (key === '@id') {\n        // if @id is not a wildcard and is not empty, then match or not on\n        // specific value\n        if (frame['@id'].length >= 0 && !types.isEmptyObject(frame['@id'][0])) {\n          return {\n            v: frame['@id'].includes(nodeValues[0])\n          };\n        }\n\n        matchThis = true;\n        return \"continue\";\n      } // check @type (object value means 'any' type, fall through to ducktyping)\n\n\n      if ('@type' in frame) {\n        if (isEmpty) {\n          if (nodeValues.length > 0) {\n            // don't match on no @type\n            return {\n              v: false\n            };\n          }\n\n          matchThis = true;\n        } else if (frame['@type'].length === 1 && types.isEmptyObject(frame['@type'][0])) {\n          // match on wildcard @type\n          matchThis = nodeValues.length > 0;\n        } else {\n          // match on a specific @type\n          var _iterator8 = _createForOfIteratorHelper(frame['@type']),\n              _step8;\n\n          try {\n            var _loop3 = function _loop3() {\n              var type = _step8.value;\n\n              if (nodeValues.some(function (tt) {\n                return tt === type;\n              })) {\n                return {\n                  v: {\n                    v: true\n                  }\n                };\n              }\n            };\n\n            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n              var _ret3 = _loop3();\n\n              if (typeof _ret3 === \"object\") return _ret3.v;\n            }\n          } catch (err) {\n            _iterator8.e(err);\n          } finally {\n            _iterator8.f();\n          }\n\n          return {\n            v: false\n          };\n        }\n      }\n    } // Forc a copy of this frame entry so it can be manipulated\n\n\n    var thisFrame = util.getValues(frame, key)[0];\n    var hasDefault = false;\n\n    if (thisFrame) {\n      _validateFrame([thisFrame]);\n\n      hasDefault = '@default' in thisFrame;\n    } // no longer a wildcard pattern if frame has any non-keyword properties\n\n\n    wildcard = false; // skip, but allow match if node has no value for property, and frame has a\n    // default value\n\n    if (nodeValues.length === 0 && hasDefault) {\n      return \"continue\";\n    } // if frame value is empty, don't match if subject has any value\n\n\n    if (nodeValues.length > 0 && isEmpty) {\n      return {\n        v: false\n      };\n    }\n\n    if (thisFrame === undefined) {\n      // node does not match if values is not empty and the value of property\n      // in frame is match none.\n      if (nodeValues.length > 0) {\n        return {\n          v: false\n        };\n      }\n\n      matchThis = true;\n    } else if (types.isObject(thisFrame)) {\n      // node matches if values is not empty and the value of property in frame\n      // is wildcard\n      matchThis = nodeValues.length > 0;\n    } else {\n      if (graphTypes.isValue(thisFrame)) {\n        // match on any matching value\n        matchThis = nodeValues.some(function (nv) {\n          return _valueMatch(thisFrame, nv);\n        });\n      } else if (graphTypes.isSubject(thisFrame) || graphTypes.isSubjectReference(thisFrame)) {\n        matchThis = nodeValues.some(function (nv) {\n          return _nodeMatch(state, thisFrame, nv, flags);\n        });\n      } else if (graphTypes.isList(thisFrame)) {\n        var listValue = thisFrame['@list'][0];\n\n        if (graphTypes.isList(nodeValues[0])) {\n          var nodeListValues = nodeValues[0]['@list'];\n\n          if (graphTypes.isValue(listValue)) {\n            // match on any matching value\n            matchThis = nodeListValues.some(function (lv) {\n              return _valueMatch(listValue, lv);\n            });\n          } else if (graphTypes.isSubject(listValue) || graphTypes.isSubjectReference(listValue)) {\n            matchThis = nodeListValues.some(function (lv) {\n              return _nodeMatch(state, listValue, lv, flags);\n            });\n          }\n        } else {\n          // value must be a list to match\n          matchThis = false;\n        }\n      }\n    } // all non-defaulted values must match if requireAll is set\n\n\n    if (!matchThis && flags.requireAll) {\n      return {\n        v: false\n      };\n    }\n\n    matchesSome = matchesSome || matchThis;\n  };\n\n  for (var key in frame) {\n    var _ret2 = _loop2(key);\n\n    if (_ret2 === \"continue\") continue;\n    if (typeof _ret2 === \"object\") return _ret2.v;\n  } // return true if wildcard or subject matches some properties\n\n\n  return wildcard || matchesSome;\n}\n/**\n * Removes an existing embed.\n *\n * @param state the current framing state.\n * @param id the @id of the embed to remove.\n */\n\n\nfunction _removeEmbed(state, id) {\n  // get existing embed\n  var embeds = state.uniqueEmbeds[state.graph];\n  var embed = embeds[id];\n  var parent = embed.parent;\n  var property = embed.property; // create reference to replace embed\n\n  var subject = {\n    '@id': id\n  }; // remove existing embed\n\n  if (types.isArray(parent)) {\n    // replace subject with reference\n    for (var i = 0; i < parent.length; ++i) {\n      if (util.compareValues(parent[i], subject)) {\n        parent[i] = subject;\n        break;\n      }\n    }\n  } else {\n    // replace subject with reference\n    var useArray = types.isArray(parent[property]);\n    util.removeValue(parent, property, subject, {\n      propertyIsArray: useArray\n    });\n    util.addValue(parent, property, subject, {\n      propertyIsArray: useArray\n    });\n  } // recursively remove dependent dangling embeds\n\n\n  var removeDependents = function removeDependents(id) {\n    // get embed keys as a separate array to enable deleting keys in map\n    var ids = Object.keys(embeds);\n\n    for (var _i2 = 0, _ids = ids; _i2 < _ids.length; _i2++) {\n      var next = _ids[_i2];\n\n      if (next in embeds && types.isObject(embeds[next].parent) && embeds[next].parent['@id'] === id) {\n        delete embeds[next];\n        removeDependents(next);\n      }\n    }\n  };\n\n  removeDependents(id);\n}\n/**\n * Adds framing output to the given parent.\n *\n * @param parent the parent to add to.\n * @param property the parent property.\n * @param output the output to add.\n */\n\n\nfunction _addFrameOutput(parent, property, output) {\n  if (types.isObject(parent)) {\n    util.addValue(parent, property, output, {\n      propertyIsArray: true\n    });\n  } else {\n    parent.push(output);\n  }\n}\n/**\n * Node matches if it is a node, and matches the pattern as a frame.\n *\n * @param state the current framing state.\n * @param pattern used to match value\n * @param value to check\n * @param flags the frame flags.\n */\n\n\nfunction _nodeMatch(state, pattern, value, flags) {\n  if (!('@id' in value)) {\n    return false;\n  }\n\n  var nodeObject = state.subjects[value['@id']];\n  return nodeObject && _filterSubject(state, nodeObject, pattern, flags);\n}\n/**\n * Value matches if it is a value and matches the value pattern\n *\n * * `pattern` is empty\n * * @values are the same, or `pattern[@value]` is a wildcard, and\n * * @types are the same or `value[@type]` is not null\n *   and `pattern[@type]` is `{}`, or `value[@type]` is null\n *   and `pattern[@type]` is null or `[]`, and\n * * @languages are the same or `value[@language]` is not null\n *   and `pattern[@language]` is `{}`, or `value[@language]` is null\n *   and `pattern[@language]` is null or `[]`.\n *\n * @param pattern used to match value\n * @param value to check\n */\n\n\nfunction _valueMatch(pattern, value) {\n  var v1 = value['@value'];\n  var t1 = value['@type'];\n  var l1 = value['@language'];\n  var v2 = pattern['@value'] ? types.isArray(pattern['@value']) ? pattern['@value'] : [pattern['@value']] : [];\n  var t2 = pattern['@type'] ? types.isArray(pattern['@type']) ? pattern['@type'] : [pattern['@type']] : [];\n  var l2 = pattern['@language'] ? types.isArray(pattern['@language']) ? pattern['@language'] : [pattern['@language']] : [];\n\n  if (v2.length === 0 && t2.length === 0 && l2.length === 0) {\n    return true;\n  }\n\n  if (!(v2.includes(v1) || types.isEmptyObject(v2[0]))) {\n    return false;\n  }\n\n  if (!(!t1 && t2.length === 0 || t2.includes(t1) || t1 && types.isEmptyObject(t2[0]))) {\n    return false;\n  }\n\n  if (!(!l1 && l2.length === 0 || l2.includes(l1) || l1 && types.isEmptyObject(l2[0]))) {\n    return false;\n  }\n\n  return true;\n}","map":{"version":3,"sources":["D:/My Works/Git/cowin-verify/node_modules/jsonld/lib/frame.js"],"names":["require","isKeyword","graphTypes","types","util","JsonLdError","_createNodeMap","createNodeMap","_mergeNodeMapGraphs","mergeNodeMapGraphs","api","module","exports","frameMergedOrDefault","input","frame","options","state","graph","graphMap","graphStack","subjectStack","link","bnodeMap","issuer","IdentifierIssuer","merged","subjects","framed","Object","keys","sort","pruneBlankNodeIdentifiers","bnodesToClear","filter","id","length","parent","property","_validateFrame","flags","embed","_getFrameFlag","explicit","requireAll","matches","_filterSubjects","ids","subject","_addFrameOutput","uniqueEmbeds","output","indexOf","addValue","propertyIsArray","_createsCircularReference","_removeEmbed","push","recurse","subframe","isObject","pop","prop","clone","type","o","_createImplicitFrame","isList","list","src","n","isSubjectReference","_valueMatch","next","omitDefaultOn","preserve","isArray","reverseProp","nodeValues","getValues","some","v","key","undefined","subjectToEmbed","i","name","flag","rval","_filterSubject","wildcard","matchesSome","matchThis","isEmpty","isEmptyObject","includes","tt","thisFrame","hasDefault","isValue","nv","isSubject","_nodeMatch","listValue","nodeListValues","lv","embeds","compareValues","useArray","removeValue","removeDependents","pattern","value","nodeObject","v1","t1","l1","v2","t2","l2"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst {isKeyword} = require('./context');\nconst graphTypes = require('./graphTypes');\nconst types = require('./types');\nconst util = require('./util');\nconst JsonLdError = require('./JsonLdError');\nconst {\n  createNodeMap: _createNodeMap,\n  mergeNodeMapGraphs: _mergeNodeMapGraphs\n} = require('./nodeMap');\n\nconst api = {};\nmodule.exports = api;\n\n/**\n * Performs JSON-LD `merged` framing.\n *\n * @param input the expanded JSON-LD to frame.\n * @param frame the expanded JSON-LD frame to use.\n * @param options the framing options.\n *\n * @return the framed output.\n */\napi.frameMergedOrDefault = (input, frame, options) => {\n  // create framing state\n  const state = {\n    options,\n    graph: '@default',\n    graphMap: {'@default': {}},\n    graphStack: [],\n    subjectStack: [],\n    link: {},\n    bnodeMap: {}\n  };\n\n  // produce a map of all graphs and name each bnode\n  // FIXME: currently uses subjects from @merged graph only\n  const issuer = new util.IdentifierIssuer('_:b');\n  _createNodeMap(input, state.graphMap, '@default', issuer);\n  if(options.merged) {\n    state.graphMap['@merged'] = _mergeNodeMapGraphs(state.graphMap);\n    state.graph = '@merged';\n  }\n  state.subjects = state.graphMap[state.graph];\n\n  // frame the subjects\n  const framed = [];\n  api.frame(state, Object.keys(state.subjects).sort(), frame, framed);\n\n  // If pruning blank nodes, find those to prune\n  if(options.pruneBlankNodeIdentifiers) {\n    // remove all blank nodes appearing only once, done in compaction\n    options.bnodesToClear =\n      Object.keys(state.bnodeMap).filter(id => state.bnodeMap[id].length === 1);\n  }\n\n  return framed;\n};\n\n/**\n * Frames subjects according to the given frame.\n *\n * @param state the current framing state.\n * @param subjects the subjects to filter.\n * @param frame the frame.\n * @param parent the parent subject or top-level array.\n * @param property the parent property, initialized to null.\n */\napi.frame = (state, subjects, frame, parent, property = null) => {\n  // validate the frame\n  _validateFrame(frame);\n  frame = frame[0];\n\n  // get flags for current frame\n  const options = state.options;\n  const flags = {\n    embed: _getFrameFlag(frame, options, 'embed'),\n    explicit: _getFrameFlag(frame, options, 'explicit'),\n    requireAll: _getFrameFlag(frame, options, 'requireAll')\n  };\n\n  // filter out subjects that match the frame\n  const matches = _filterSubjects(state, subjects, frame, flags);\n\n  // add matches to output\n  const ids = Object.keys(matches).sort();\n  for(const id of ids) {\n    const subject = matches[id];\n\n    if(flags.embed === '@link' && id in state.link) {\n      // TODO: may want to also match an existing linked subject against\n      // the current frame ... so different frames could produce different\n      // subjects that are only shared in-memory when the frames are the same\n\n      // add existing linked subject\n      _addFrameOutput(parent, property, state.link[id]);\n      continue;\n    }\n\n    /* Note: In order to treat each top-level match as a compartmentalized\n    result, clear the unique embedded subjects map when the property is null,\n    which only occurs at the top-level. */\n    if(property === null) {\n      state.uniqueEmbeds = {[state.graph]: {}};\n    } else {\n      state.uniqueEmbeds[state.graph] = state.uniqueEmbeds[state.graph] || {};\n    }\n\n    // start output for subject\n    const output = {};\n    output['@id'] = id;\n    if(id.indexOf('_:') === 0) {\n      util.addValue(state.bnodeMap, id, output, {propertyIsArray: true});\n    }\n    state.link[id] = output;\n\n    // if embed is @never or if a circular reference would be created by an\n    // embed, the subject cannot be embedded, just add the reference;\n    // note that a circular reference won't occur when the embed flag is\n    // `@link` as the above check will short-circuit before reaching this point\n    if(flags.embed === '@never' ||\n      _createsCircularReference(subject, state.graph, state.subjectStack)) {\n      _addFrameOutput(parent, property, output);\n      continue;\n    }\n\n    // if only the last match should be embedded\n    if(flags.embed === '@last') {\n      // remove any existing embed\n      if(id in state.uniqueEmbeds[state.graph]) {\n        _removeEmbed(state, id);\n      }\n      state.uniqueEmbeds[state.graph][id] =\n        {parent, property};\n    }\n\n    // push matching subject onto stack to enable circular embed checks\n    state.subjectStack.push({subject, graph: state.graph});\n\n    // subject is also the name of a graph\n    if(id in state.graphMap) {\n      let recurse = false;\n      let subframe = null;\n      if(!('@graph' in frame)) {\n        recurse = state.graph !== '@merged';\n        subframe = {};\n      } else {\n        subframe = frame['@graph'][0];\n        if(!types.isObject(subframe)) {\n          subframe = {};\n        }\n        recurse = !(id === '@merged' || id === '@default');\n      }\n\n      if(recurse) {\n        state.graphStack.push(state.graph);\n        state.graph = id;\n        // recurse into graph\n        api.frame(\n          state,\n          Object.keys(state.graphMap[id]).sort(), [subframe], output, '@graph');\n        state.graph = state.graphStack.pop;\n      }\n    }\n\n    // iterate over subject properties\n    for(const prop of Object.keys(subject).sort()) {\n      // copy keywords to output\n      if(isKeyword(prop)) {\n        output[prop] = util.clone(subject[prop]);\n\n        if(prop === '@type') {\n          // count bnode values of @type\n          for(const type of subject['@type']) {\n            if(type.indexOf('_:') === 0) {\n              util.addValue(\n                state.bnodeMap, type, output, {propertyIsArray: true});\n            }\n          }\n        }\n        continue;\n      }\n\n      // explicit is on and property isn't in the frame, skip processing\n      if(flags.explicit && !(prop in frame)) {\n        continue;\n      }\n\n      // add objects\n      for(let o of subject[prop]) {\n        const subframe = (prop in frame ?\n          frame[prop] : _createImplicitFrame(flags));\n\n        // recurse into list\n        if(graphTypes.isList(o)) {\n          // add empty list\n          const list = {'@list': []};\n          _addFrameOutput(output, prop, list);\n\n          // add list objects\n          const src = o['@list'];\n          for(const n in src) {\n            o = src[n];\n            if(graphTypes.isSubjectReference(o)) {\n              const subframe = (prop in frame ?\n                frame[prop][0]['@list'] : _createImplicitFrame(flags));\n              // recurse into subject reference\n              api.frame(state, [o['@id']], subframe, list, '@list');\n            } else {\n              // include other values automatically\n              _addFrameOutput(list, '@list', util.clone(o));\n            }\n          }\n          continue;\n        }\n\n        if(graphTypes.isSubjectReference(o)) {\n          // recurse into subject reference\n          api.frame(state, [o['@id']], subframe, output, prop);\n        } else if(_valueMatch(subframe[0], o)) {\n          // include other values, if they match\n          _addFrameOutput(output, prop, util.clone(o));\n        }\n      }\n    }\n\n    // handle defaults\n    for(const prop of Object.keys(frame).sort()) {\n      // skip keywords\n      if(isKeyword(prop)) {\n        continue;\n      }\n\n      // if omit default is off, then include default values for properties\n      // that appear in the next frame but are not in the matching subject\n      const next = frame[prop][0] || {};\n      const omitDefaultOn = _getFrameFlag(next, options, 'omitDefault');\n      if(!omitDefaultOn && !(prop in output)) {\n        let preserve = '@null';\n        if('@default' in next) {\n          preserve = util.clone(next['@default']);\n        }\n        if(!types.isArray(preserve)) {\n          preserve = [preserve];\n        }\n        output[prop] = [{'@preserve': preserve}];\n      }\n    }\n\n    // if embed reverse values by finding nodes having this subject as a value\n    // of the associated property\n    if('@reverse' in frame) {\n      for(const reverseProp of Object.keys(frame['@reverse']).sort()) {\n        const subframe = frame['@reverse'][reverseProp];\n        for(const subject of Object.keys(state.subjects)) {\n          const nodeValues =\n            util.getValues(state.subjects[subject], reverseProp);\n          if(nodeValues.some(v => v['@id'] === id)) {\n            // node has property referencing this subject, recurse\n            output['@reverse'] = output['@reverse'] || {};\n            util.addValue(\n              output['@reverse'], reverseProp, [], {propertyIsArray: true});\n            api.frame(\n              state, [subject], subframe, output['@reverse'][reverseProp],\n              property);\n          }\n        }\n      }\n    }\n\n    // add output to parent\n    _addFrameOutput(parent, property, output);\n\n    // pop matching subject from circular ref-checking stack\n    state.subjectStack.pop();\n  }\n};\n\n/**\n * Creates an implicit frame when recursing through subject matches. If\n * a frame doesn't have an explicit frame for a particular property, then\n * a wildcard child frame will be created that uses the same flags that the\n * parent frame used.\n *\n * @param flags the current framing flags.\n *\n * @return the implicit frame.\n */\nfunction _createImplicitFrame(flags) {\n  const frame = {};\n  for(const key in flags) {\n    if(flags[key] !== undefined) {\n      frame['@' + key] = [flags[key]];\n    }\n  }\n  return [frame];\n}\n\n/**\n * Checks the current subject stack to see if embedding the given subject\n * would cause a circular reference.\n *\n * @param subjectToEmbed the subject to embed.\n * @param graph the graph the subject to embed is in.\n * @param subjectStack the current stack of subjects.\n *\n * @return true if a circular reference would be created, false if not.\n */\nfunction _createsCircularReference(subjectToEmbed, graph, subjectStack) {\n  for(let i = subjectStack.length - 1; i >= 0; --i) {\n    const subject = subjectStack[i];\n    if(subject.graph === graph &&\n      subject.subject['@id'] === subjectToEmbed['@id']) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Gets the frame flag value for the given flag name.\n *\n * @param frame the frame.\n * @param options the framing options.\n * @param name the flag name.\n *\n * @return the flag value.\n */\nfunction _getFrameFlag(frame, options, name) {\n  const flag = '@' + name;\n  let rval = (flag in frame ? frame[flag][0] : options[name]);\n  if(name === 'embed') {\n    // default is \"@last\"\n    // backwards-compatibility support for \"embed\" maps:\n    // true => \"@last\"\n    // false => \"@never\"\n    if(rval === true) {\n      rval = '@last';\n    } else if(rval === false) {\n      rval = '@never';\n    } else if(rval !== '@always' && rval !== '@never' && rval !== '@link') {\n      rval = '@last';\n    }\n  }\n  return rval;\n}\n\n/**\n * Validates a JSON-LD frame, throwing an exception if the frame is invalid.\n *\n * @param frame the frame to validate.\n */\nfunction _validateFrame(frame) {\n  if(!types.isArray(frame) || frame.length !== 1 || !types.isObject(frame[0])) {\n    throw new JsonLdError(\n      'Invalid JSON-LD syntax; a JSON-LD frame must be a single object.',\n      'jsonld.SyntaxError', {frame});\n  }\n}\n\n/**\n * Returns a map of all of the subjects that match a parsed frame.\n *\n * @param state the current framing state.\n * @param subjects the set of subjects to filter.\n * @param frame the parsed frame.\n * @param flags the frame flags.\n *\n * @return all of the matched subjects.\n */\nfunction _filterSubjects(state, subjects, frame, flags) {\n  // filter subjects in @id order\n  const rval = {};\n  for(const id of subjects) {\n    const subject = state.graphMap[state.graph][id];\n    if(_filterSubject(state, subject, frame, flags)) {\n      rval[id] = subject;\n    }\n  }\n  return rval;\n}\n\n/**\n * Returns true if the given subject matches the given frame.\n *\n * Matches either based on explicit type inclusion where the node has any\n * type listed in the frame. If the frame has empty types defined matches\n * nodes not having a @type. If the frame has a type of {} defined matches\n * nodes having any type defined.\n *\n * Otherwise, does duck typing, where the node must have all of the\n * properties defined in the frame.\n *\n * @param state the current framing state.\n * @param subject the subject to check.\n * @param frame the frame to check.\n * @param flags the frame flags.\n *\n * @return true if the subject matches, false if not.\n */\nfunction _filterSubject(state, subject, frame, flags) {\n  // check ducktype\n  let wildcard = true;\n  let matchesSome = false;\n\n  for(const key in frame) {\n    let matchThis = false;\n    const nodeValues = util.getValues(subject, key);\n    const isEmpty = util.getValues(frame, key).length === 0;\n\n    if(isKeyword(key)) {\n      // skip non-@id and non-@type\n      if(key !== '@id' && key !== '@type') {\n        continue;\n      }\n      wildcard = false;\n\n      // check @id for a specific @id value\n      if(key === '@id') {\n        // if @id is not a wildcard and is not empty, then match or not on\n        // specific value\n        if(frame['@id'].length >= 0 && !types.isEmptyObject(frame['@id'][0])) {\n          return frame['@id'].includes(nodeValues[0]);\n        }\n        matchThis = true;\n        continue;\n      }\n\n      // check @type (object value means 'any' type, fall through to ducktyping)\n      if('@type' in frame) {\n        if(isEmpty) {\n          if(nodeValues.length > 0) {\n            // don't match on no @type\n            return false;\n          }\n          matchThis = true;\n        } else if(frame['@type'].length === 1 &&\n          types.isEmptyObject(frame['@type'][0])) {\n          // match on wildcard @type\n          matchThis = nodeValues.length > 0;\n        } else {\n          // match on a specific @type\n          for(const type of frame['@type']) {\n            if(nodeValues.some(tt => tt === type)) {\n              return true;\n            }\n          }\n          return false;\n        }\n      }\n    }\n\n    // Forc a copy of this frame entry so it can be manipulated\n    const thisFrame = util.getValues(frame, key)[0];\n    let hasDefault = false;\n    if(thisFrame) {\n      _validateFrame([thisFrame]);\n      hasDefault = '@default' in thisFrame;\n    }\n\n    // no longer a wildcard pattern if frame has any non-keyword properties\n    wildcard = false;\n\n    // skip, but allow match if node has no value for property, and frame has a\n    // default value\n    if(nodeValues.length === 0 && hasDefault) {\n      continue;\n    }\n\n    // if frame value is empty, don't match if subject has any value\n    if(nodeValues.length > 0 && isEmpty) {\n      return false;\n    }\n\n    if(thisFrame === undefined) {\n      // node does not match if values is not empty and the value of property\n      // in frame is match none.\n      if(nodeValues.length > 0) {\n        return false;\n      }\n      matchThis = true;\n    } else if(types.isObject(thisFrame)) {\n      // node matches if values is not empty and the value of property in frame\n      // is wildcard\n      matchThis = nodeValues.length > 0;\n    } else {\n      if(graphTypes.isValue(thisFrame)) {\n        // match on any matching value\n        matchThis = nodeValues.some(nv => _valueMatch(thisFrame, nv));\n      } else if(graphTypes.isSubject(thisFrame) ||\n        graphTypes.isSubjectReference(thisFrame)) {\n        matchThis =\n          nodeValues.some(nv => _nodeMatch(state, thisFrame, nv, flags));\n      } else if(graphTypes.isList(thisFrame)) {\n        const listValue = thisFrame['@list'][0];\n        if(graphTypes.isList(nodeValues[0])) {\n          const nodeListValues = nodeValues[0]['@list'];\n\n          if(graphTypes.isValue(listValue)) {\n            // match on any matching value\n            matchThis = nodeListValues.some(lv => _valueMatch(listValue, lv));\n          } else if(graphTypes.isSubject(listValue) ||\n            graphTypes.isSubjectReference(listValue)) {\n            matchThis = nodeListValues.some(lv => _nodeMatch(\n              state, listValue, lv, flags));\n          }\n        } else {\n          // value must be a list to match\n          matchThis = false;\n        }\n      }\n    }\n\n    // all non-defaulted values must match if requireAll is set\n    if(!matchThis && flags.requireAll) {\n      return false;\n    }\n\n    matchesSome = matchesSome || matchThis;\n  }\n\n  // return true if wildcard or subject matches some properties\n  return wildcard || matchesSome;\n}\n\n/**\n * Removes an existing embed.\n *\n * @param state the current framing state.\n * @param id the @id of the embed to remove.\n */\nfunction _removeEmbed(state, id) {\n  // get existing embed\n  const embeds = state.uniqueEmbeds[state.graph];\n  const embed = embeds[id];\n  const parent = embed.parent;\n  const property = embed.property;\n\n  // create reference to replace embed\n  const subject = {'@id': id};\n\n  // remove existing embed\n  if(types.isArray(parent)) {\n    // replace subject with reference\n    for(let i = 0; i < parent.length; ++i) {\n      if(util.compareValues(parent[i], subject)) {\n        parent[i] = subject;\n        break;\n      }\n    }\n  } else {\n    // replace subject with reference\n    const useArray = types.isArray(parent[property]);\n    util.removeValue(parent, property, subject, {propertyIsArray: useArray});\n    util.addValue(parent, property, subject, {propertyIsArray: useArray});\n  }\n\n  // recursively remove dependent dangling embeds\n  const removeDependents = id => {\n    // get embed keys as a separate array to enable deleting keys in map\n    const ids = Object.keys(embeds);\n    for(const next of ids) {\n      if(next in embeds && types.isObject(embeds[next].parent) &&\n        embeds[next].parent['@id'] === id) {\n        delete embeds[next];\n        removeDependents(next);\n      }\n    }\n  };\n  removeDependents(id);\n}\n\n/**\n * Adds framing output to the given parent.\n *\n * @param parent the parent to add to.\n * @param property the parent property.\n * @param output the output to add.\n */\nfunction _addFrameOutput(parent, property, output) {\n  if(types.isObject(parent)) {\n    util.addValue(parent, property, output, {propertyIsArray: true});\n  } else {\n    parent.push(output);\n  }\n}\n\n/**\n * Node matches if it is a node, and matches the pattern as a frame.\n *\n * @param state the current framing state.\n * @param pattern used to match value\n * @param value to check\n * @param flags the frame flags.\n */\nfunction _nodeMatch(state, pattern, value, flags) {\n  if(!('@id' in value)) {\n    return false;\n  }\n  const nodeObject = state.subjects[value['@id']];\n  return nodeObject && _filterSubject(state, nodeObject, pattern, flags);\n}\n\n/**\n * Value matches if it is a value and matches the value pattern\n *\n * * `pattern` is empty\n * * @values are the same, or `pattern[@value]` is a wildcard, and\n * * @types are the same or `value[@type]` is not null\n *   and `pattern[@type]` is `{}`, or `value[@type]` is null\n *   and `pattern[@type]` is null or `[]`, and\n * * @languages are the same or `value[@language]` is not null\n *   and `pattern[@language]` is `{}`, or `value[@language]` is null\n *   and `pattern[@language]` is null or `[]`.\n *\n * @param pattern used to match value\n * @param value to check\n */\nfunction _valueMatch(pattern, value) {\n  const v1 = value['@value'];\n  const t1 = value['@type'];\n  const l1 = value['@language'];\n  const v2 = pattern['@value'] ?\n    (types.isArray(pattern['@value']) ?\n      pattern['@value'] : [pattern['@value']]) :\n    [];\n  const t2 = pattern['@type'] ?\n    (types.isArray(pattern['@type']) ?\n      pattern['@type'] : [pattern['@type']]) :\n    [];\n  const l2 = pattern['@language'] ?\n    (types.isArray(pattern['@language']) ?\n      pattern['@language'] : [pattern['@language']]) :\n    [];\n\n  if(v2.length === 0 && t2.length === 0 && l2.length === 0) {\n    return true;\n  }\n  if(!(v2.includes(v1) || types.isEmptyObject(v2[0]))) {\n    return false;\n  }\n  if(!(!t1 && t2.length === 0 || t2.includes(t1) || t1 &&\n    types.isEmptyObject(t2[0]))) {\n    return false;\n  }\n  if(!(!l1 && l2.length === 0 || l2.includes(l1) || l1 &&\n    types.isEmptyObject(l2[0]))) {\n    return false;\n  }\n  return true;\n}\n"]},"metadata":{},"sourceType":"script"}