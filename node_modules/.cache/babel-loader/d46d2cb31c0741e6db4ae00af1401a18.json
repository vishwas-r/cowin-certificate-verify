{"ast":null,"code":"/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nvar _regeneratorRuntime = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('../util'),\n    parseLinkHeader = _require.parseLinkHeader,\n    buildHeaders = _require.buildHeaders;\n\nvar _require2 = require('../constants'),\n    LINK_HEADER_REL = _require2.LINK_HEADER_REL;\n\nvar JsonLdError = require('../JsonLdError');\n\nvar RequestQueue = require('../RequestQueue');\n\nvar REGEX_LINK_HEADER = /(^|(\\r\\n))link:/i;\n/**\n * Creates a built-in XMLHttpRequest document loader.\n *\n * @param options the options to use:\n *          secure: require all URLs to use HTTPS.\n *          headers: an object (map) of headers which will be passed as request\n *            headers for the requested document. Accept is not allowed.\n *          [xhr]: the XMLHttpRequest API to use.\n *\n * @return the XMLHttpRequest document loader.\n */\n\nmodule.exports = function () {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    headers: {}\n  },\n      secure = _ref.secure,\n      _ref$headers = _ref.headers,\n      headers = _ref$headers === void 0 ? {} : _ref$headers,\n      xhr = _ref.xhr;\n\n  headers = buildHeaders(headers);\n  var queue = new RequestQueue();\n  return queue.wrapLoader(loader);\n\n  function loader(_x) {\n    return _loader.apply(this, arguments);\n  }\n\n  function _loader() {\n    _loader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {\n      var req, doc, contentType, linkHeader;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(url.indexOf('http:') !== 0 && url.indexOf('https:') !== 0)) {\n                _context.next = 2;\n                break;\n              }\n\n              throw new JsonLdError('URL could not be dereferenced; only \"http\" and \"https\" URLs are ' + 'supported.', 'jsonld.InvalidUrl', {\n                code: 'loading document failed',\n                url: url\n              });\n\n            case 2:\n              if (!(secure && url.indexOf('https') !== 0)) {\n                _context.next = 4;\n                break;\n              }\n\n              throw new JsonLdError('URL could not be dereferenced; secure mode is enabled and ' + 'the URL\\'s scheme is not \"https\".', 'jsonld.InvalidUrl', {\n                code: 'loading document failed',\n                url: url\n              });\n\n            case 4:\n              _context.prev = 4;\n              _context.next = 7;\n              return _get(xhr, url, headers);\n\n            case 7:\n              req = _context.sent;\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](4);\n              throw new JsonLdError('URL could not be dereferenced, an error occurred.', 'jsonld.LoadDocumentError', {\n                code: 'loading document failed',\n                url: url,\n                cause: _context.t0\n              });\n\n            case 13:\n              if (!(req.status >= 400)) {\n                _context.next = 15;\n                break;\n              }\n\n              throw new JsonLdError('URL could not be dereferenced: ' + req.statusText, 'jsonld.LoadDocumentError', {\n                code: 'loading document failed',\n                url: url,\n                httpStatusCode: req.status\n              });\n\n            case 15:\n              doc = {\n                contextUrl: null,\n                documentUrl: url,\n                document: req.response\n              }; // handle Link Header (avoid unsafe header warning by existence testing)\n\n              contentType = req.getResponseHeader('Content-Type');\n\n              if (REGEX_LINK_HEADER.test(req.getAllResponseHeaders())) {\n                linkHeader = req.getResponseHeader('Link');\n              }\n\n              if (!(linkHeader && contentType !== 'application/ld+json')) {\n                _context.next = 23;\n                break;\n              }\n\n              // only 1 related link header permitted\n              linkHeader = parseLinkHeader(linkHeader)[LINK_HEADER_REL];\n\n              if (!Array.isArray(linkHeader)) {\n                _context.next = 22;\n                break;\n              }\n\n              throw new JsonLdError('URL could not be dereferenced, it has more than one ' + 'associated HTTP Link Header.', 'jsonld.InvalidUrl', {\n                code: 'multiple context link headers',\n                url: url\n              });\n\n            case 22:\n              if (linkHeader) {\n                doc.contextUrl = linkHeader.target;\n              }\n\n            case 23:\n              return _context.abrupt(\"return\", doc);\n\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[4, 10]]);\n    }));\n    return _loader.apply(this, arguments);\n  }\n};\n\nfunction _get(xhr, url, headers) {\n  xhr = xhr || XMLHttpRequest;\n  var req = new xhr();\n  return new Promise(function (resolve, reject) {\n    req.onload = function () {\n      return resolve(req);\n    };\n\n    req.onerror = function (err) {\n      return reject(err);\n    };\n\n    req.open('GET', url, true);\n\n    for (var k in headers) {\n      req.setRequestHeader(k, headers[k]);\n    }\n\n    req.send();\n  });\n}","map":{"version":3,"sources":["D:/My Works/Git/cowin-verify/node_modules/jsonld/lib/documentLoaders/xhr.js"],"names":["require","parseLinkHeader","buildHeaders","LINK_HEADER_REL","JsonLdError","RequestQueue","REGEX_LINK_HEADER","module","exports","headers","secure","xhr","queue","wrapLoader","loader","url","indexOf","code","_get","req","cause","status","statusText","httpStatusCode","doc","contextUrl","documentUrl","document","response","contentType","getResponseHeader","test","getAllResponseHeaders","linkHeader","Array","isArray","target","XMLHttpRequest","Promise","resolve","reject","onload","onerror","err","open","k","setRequestHeader","send"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst {parseLinkHeader, buildHeaders} = require('../util');\nconst {LINK_HEADER_REL} = require('../constants');\nconst JsonLdError = require('../JsonLdError');\nconst RequestQueue = require('../RequestQueue');\n\nconst REGEX_LINK_HEADER = /(^|(\\r\\n))link:/i;\n\n/**\n * Creates a built-in XMLHttpRequest document loader.\n *\n * @param options the options to use:\n *          secure: require all URLs to use HTTPS.\n *          headers: an object (map) of headers which will be passed as request\n *            headers for the requested document. Accept is not allowed.\n *          [xhr]: the XMLHttpRequest API to use.\n *\n * @return the XMLHttpRequest document loader.\n */\nmodule.exports = ({\n  secure,\n  headers = {},\n  xhr\n} = {headers: {}}) => {\n  headers = buildHeaders(headers);\n  const queue = new RequestQueue();\n  return queue.wrapLoader(loader);\n\n  async function loader(url) {\n    if(url.indexOf('http:') !== 0 && url.indexOf('https:') !== 0) {\n      throw new JsonLdError(\n        'URL could not be dereferenced; only \"http\" and \"https\" URLs are ' +\n        'supported.',\n        'jsonld.InvalidUrl', {code: 'loading document failed', url});\n    }\n    if(secure && url.indexOf('https') !== 0) {\n      throw new JsonLdError(\n        'URL could not be dereferenced; secure mode is enabled and ' +\n        'the URL\\'s scheme is not \"https\".',\n        'jsonld.InvalidUrl', {code: 'loading document failed', url});\n    }\n\n    let req;\n    try {\n      req = await _get(xhr, url, headers);\n    } catch(e) {\n      throw new JsonLdError(\n        'URL could not be dereferenced, an error occurred.',\n        'jsonld.LoadDocumentError',\n        {code: 'loading document failed', url, cause: e});\n    }\n\n    if(req.status >= 400) {\n      throw new JsonLdError(\n        'URL could not be dereferenced: ' + req.statusText,\n        'jsonld.LoadDocumentError', {\n          code: 'loading document failed',\n          url,\n          httpStatusCode: req.status\n        });\n    }\n\n    const doc = {contextUrl: null, documentUrl: url, document: req.response};\n\n    // handle Link Header (avoid unsafe header warning by existence testing)\n    const contentType = req.getResponseHeader('Content-Type');\n    let linkHeader;\n    if(REGEX_LINK_HEADER.test(req.getAllResponseHeaders())) {\n      linkHeader = req.getResponseHeader('Link');\n    }\n    if(linkHeader && contentType !== 'application/ld+json') {\n      // only 1 related link header permitted\n      linkHeader = parseLinkHeader(linkHeader)[LINK_HEADER_REL];\n      if(Array.isArray(linkHeader)) {\n        throw new JsonLdError(\n          'URL could not be dereferenced, it has more than one ' +\n          'associated HTTP Link Header.',\n          'jsonld.InvalidUrl',\n          {code: 'multiple context link headers', url});\n      }\n      if(linkHeader) {\n        doc.contextUrl = linkHeader.target;\n      }\n    }\n\n    return doc;\n  }\n};\n\nfunction _get(xhr, url, headers) {\n  xhr = xhr || XMLHttpRequest;\n  const req = new xhr();\n  return new Promise((resolve, reject) => {\n    req.onload = () => resolve(req);\n    req.onerror = err => reject(err);\n    req.open('GET', url, true);\n    for(const k in headers) {\n      req.setRequestHeader(k, headers[k]);\n    }\n    req.send();\n  });\n}\n"]},"metadata":{},"sourceType":"script"}