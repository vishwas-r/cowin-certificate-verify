{"ast":null,"code":"/*\n * Copyright (c) 2017-2019 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nvar _toConsumableArray = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _slicedToArray = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _asyncToGenerator = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar util = require('./util');\n\nvar JsonLdError = require('./JsonLdError');\n\nvar _require = require('./types'),\n    _isArray = _require.isArray,\n    _isObject = _require.isObject,\n    _isString = _require.isString,\n    _isUndefined = _require.isUndefined;\n\nvar _require2 = require('./url'),\n    _isAbsoluteIri = _require2.isAbsolute,\n    _isRelativeIri = _require2.isRelative,\n    prependBase = _require2.prependBase,\n    parseUrl = _require2.parse;\n\nvar _require3 = require('./util'),\n    _asArray = _require3.asArray,\n    _compareShortestLeast = _require3.compareShortestLeast;\n\nvar INITIAL_CONTEXT_CACHE = new Map();\nvar INITIAL_CONTEXT_CACHE_MAX_SIZE = 10000;\nvar api = {};\nmodule.exports = api;\n/**\n * Processes a local context and returns a new active context.\n *\n * @param activeCtx the current active context.\n * @param localCtx the local context to process.\n * @param options the context processing options.\n * @param propagate `true` if `false`, retains any previously defined term,\n *   which can be rolled back when the descending into a new node object.\n * @param overrideProtected `false` allows protected terms to be modified.\n *\n * @return a Promise that resolves to the new active context.\n */\n\napi.process = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var activeCtx, localCtx, options, _ref$propagate, propagate, _ref$overrideProtecte, overrideProtected, ctxs, resolved, rval, _iterator, _step, resolvedContext, ctx, protectedMode, oldActiveCtx, _i, _Object$entries, _Object$entries$_i, term, _protected, processed, defined, base, value, _value, _value2, key;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            activeCtx = _ref.activeCtx, localCtx = _ref.localCtx, options = _ref.options, _ref$propagate = _ref.propagate, propagate = _ref$propagate === void 0 ? true : _ref$propagate, _ref$overrideProtecte = _ref.overrideProtected, overrideProtected = _ref$overrideProtecte === void 0 ? false : _ref$overrideProtecte;\n\n            // normalize local context to an array of @context objects\n            if (_isObject(localCtx) && '@context' in localCtx && _isArray(localCtx['@context'])) {\n              localCtx = localCtx['@context'];\n            }\n\n            ctxs = _asArray(localCtx); // no contexts in array, return current active context w/o changes\n\n            if (!(ctxs.length === 0)) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\", activeCtx);\n\n          case 5:\n            _context.next = 7;\n            return options.contextResolver.resolve({\n              context: localCtx,\n              documentLoader: options.documentLoader,\n              base: options.base\n            });\n\n          case 7:\n            resolved = _context.sent;\n\n            // override propagate if first resolved context has `@propagate`\n            if (_isObject(resolved[0].document) && typeof resolved[0].document['@propagate'] === 'boolean') {\n              // retrieve early, error checking done later\n              propagate = resolved[0].document['@propagate'];\n            } // process each context in order, update active context\n            // on each iteration to ensure proper caching\n\n\n            rval = activeCtx; // track the previous context\n            // if not propagating, make sure rval has a previous context\n\n            if (!propagate && !rval.previousContext) {\n              // clone `rval` context before updating\n              rval = rval.clone();\n              rval.previousContext = activeCtx;\n            }\n\n            _iterator = _createForOfIteratorHelper(resolved);\n            _context.prev = 12;\n\n            _iterator.s();\n\n          case 14:\n            if ((_step = _iterator.n()).done) {\n              _context.next = 110;\n              break;\n            }\n\n            resolvedContext = _step.value;\n            ctx = resolvedContext.document; // update active context to one computed from last iteration\n\n            activeCtx = rval; // reset to initial context\n\n            if (!(ctx === null)) {\n              _context.next = 36;\n              break;\n            }\n\n            if (!(!overrideProtected && Object.keys(activeCtx.protected).length !== 0)) {\n              _context.next = 34;\n              break;\n            }\n\n            protectedMode = options && options.protectedMode || 'error';\n\n            if (!(protectedMode === 'error')) {\n              _context.next = 25;\n              break;\n            }\n\n            throw new JsonLdError('Tried to nullify a context with protected terms outside of ' + 'a term definition.', 'jsonld.SyntaxError', {\n              code: 'invalid context nullification'\n            });\n\n          case 25:\n            if (!(protectedMode === 'warn')) {\n              _context.next = 33;\n              break;\n            }\n\n            // FIXME: remove logging and use a handler\n            console.warn('WARNING: invalid context nullification');\n            oldActiveCtx = activeCtx; // copy all protected term definitions to fresh initial context\n\n            rval = activeCtx = api.getInitialContext(options).clone();\n\n            for (_i = 0, _Object$entries = Object.entries(oldActiveCtx.protected); _i < _Object$entries.length; _i++) {\n              _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2), term = _Object$entries$_i[0], _protected = _Object$entries$_i[1];\n\n              if (_protected) {\n                activeCtx.mappings[term] = util.clone(oldActiveCtx.mappings[term]);\n              }\n            }\n\n            activeCtx.protected = util.clone(oldActiveCtx.protected); // cache processed result\n\n            resolvedContext.setProcessed(oldActiveCtx, rval);\n            return _context.abrupt(\"continue\", 108);\n\n          case 33:\n            throw new JsonLdError('Invalid protectedMode.', 'jsonld.SyntaxError', {\n              code: 'invalid protected mode',\n              context: localCtx,\n              protectedMode: protectedMode\n            });\n\n          case 34:\n            rval = activeCtx = api.getInitialContext(options).clone();\n            return _context.abrupt(\"continue\", 108);\n\n          case 36:\n            // get processed context from cache if available\n            processed = resolvedContext.getProcessed(activeCtx);\n\n            if (!processed) {\n              _context.next = 40;\n              break;\n            }\n\n            rval = activeCtx = processed;\n            return _context.abrupt(\"continue\", 108);\n\n          case 40:\n            // dereference @context key if present\n            if (_isObject(ctx) && '@context' in ctx) {\n              ctx = ctx['@context'];\n            } // context must be an object by now, all URLs retrieved before this call\n\n\n            if (_isObject(ctx)) {\n              _context.next = 43;\n              break;\n            }\n\n            throw new JsonLdError('Invalid JSON-LD syntax; @context must be an object.', 'jsonld.SyntaxError', {\n              code: 'invalid local context',\n              context: ctx\n            });\n\n          case 43:\n            // TODO: there is likely a `previousContext` cloning optimization that\n            // could be applied here (no need to copy it under certain conditions)\n            // clone context before updating it\n            rval = rval.clone(); // define context mappings for keys in local context\n\n            defined = new Map(); // handle @version\n\n            if (!('@version' in ctx)) {\n              _context.next = 53;\n              break;\n            }\n\n            if (!(ctx['@version'] !== 1.1)) {\n              _context.next = 48;\n              break;\n            }\n\n            throw new JsonLdError('Unsupported JSON-LD version: ' + ctx['@version'], 'jsonld.UnsupportedVersion', {\n              code: 'invalid @version value',\n              context: ctx\n            });\n\n          case 48:\n            if (!(activeCtx.processingMode && activeCtx.processingMode === 'json-ld-1.0')) {\n              _context.next = 50;\n              break;\n            }\n\n            throw new JsonLdError('@version: ' + ctx['@version'] + ' not compatible with ' + activeCtx.processingMode, 'jsonld.ProcessingModeConflict', {\n              code: 'processing mode conflict',\n              context: ctx\n            });\n\n          case 50:\n            rval.processingMode = 'json-ld-1.1';\n            rval['@version'] = ctx['@version'];\n            defined.set('@version', true);\n\n          case 53:\n            // if not set explicitly, set processingMode to \"json-ld-1.1\"\n            rval.processingMode = rval.processingMode || activeCtx.processingMode; // handle @base\n\n            if (!('@base' in ctx)) {\n              _context.next = 70;\n              break;\n            }\n\n            base = ctx['@base'];\n\n            if (!(base === null)) {\n              _context.next = 59;\n              break;\n            }\n\n            _context.next = 68;\n            break;\n\n          case 59:\n            if (!_isAbsoluteIri(base)) {\n              _context.next = 63;\n              break;\n            }\n\n            base = parseUrl(base);\n            _context.next = 68;\n            break;\n\n          case 63:\n            if (!_isRelativeIri(base)) {\n              _context.next = 67;\n              break;\n            }\n\n            base = parseUrl(prependBase(rval['@base'].href, base));\n            _context.next = 68;\n            break;\n\n          case 67:\n            throw new JsonLdError('Invalid JSON-LD syntax; the value of \"@base\" in a ' + '@context must be an absolute IRI, a relative IRI, or null.', 'jsonld.SyntaxError', {\n              code: 'invalid base IRI',\n              context: ctx\n            });\n\n          case 68:\n            rval['@base'] = base;\n            defined.set('@base', true);\n\n          case 70:\n            if (!('@vocab' in ctx)) {\n              _context.next = 86;\n              break;\n            }\n\n            value = ctx['@vocab'];\n\n            if (!(value === null)) {\n              _context.next = 76;\n              break;\n            }\n\n            delete rval['@vocab'];\n            _context.next = 85;\n            break;\n\n          case 76:\n            if (_isString(value)) {\n              _context.next = 80;\n              break;\n            }\n\n            throw new JsonLdError('Invalid JSON-LD syntax; the value of \"@vocab\" in a ' + '@context must be a string or null.', 'jsonld.SyntaxError', {\n              code: 'invalid vocab mapping',\n              context: ctx\n            });\n\n          case 80:\n            if (!(!_isAbsoluteIri(value) && api.processingMode(rval, 1.0))) {\n              _context.next = 84;\n              break;\n            }\n\n            throw new JsonLdError('Invalid JSON-LD syntax; the value of \"@vocab\" in a ' + '@context must be an absolute IRI.', 'jsonld.SyntaxError', {\n              code: 'invalid vocab mapping',\n              context: ctx\n            });\n\n          case 84:\n            rval['@vocab'] = _expandIri(rval, value, {\n              vocab: true,\n              base: true\n            }, undefined, undefined, options);\n\n          case 85:\n            defined.set('@vocab', true);\n\n          case 86:\n            if (!('@language' in ctx)) {\n              _context.next = 98;\n              break;\n            }\n\n            _value = ctx['@language'];\n\n            if (!(_value === null)) {\n              _context.next = 92;\n              break;\n            }\n\n            delete rval['@language'];\n            _context.next = 97;\n            break;\n\n          case 92:\n            if (_isString(_value)) {\n              _context.next = 96;\n              break;\n            }\n\n            throw new JsonLdError('Invalid JSON-LD syntax; the value of \"@language\" in a ' + '@context must be a string or null.', 'jsonld.SyntaxError', {\n              code: 'invalid default language',\n              context: ctx\n            });\n\n          case 96:\n            rval['@language'] = _value.toLowerCase();\n\n          case 97:\n            defined.set('@language', true);\n\n          case 98:\n            if (!('@propagate' in ctx)) {\n              _context.next = 105;\n              break;\n            }\n\n            _value2 = ctx['@propagate'];\n\n            if (!(activeCtx.processingMode === 'json-ld-1.0')) {\n              _context.next = 102;\n              break;\n            }\n\n            throw new JsonLdError('Invalid JSON-LD syntax; @propagate not compatible with ' + activeCtx.processingMode, 'jsonld.SyntaxError', {\n              code: 'invalid context member',\n              context: ctx\n            });\n\n          case 102:\n            if (!(typeof _value2 !== 'boolean')) {\n              _context.next = 104;\n              break;\n            }\n\n            throw new JsonLdError('Invalid JSON-LD syntax; @propagate value must be a boolean.', 'jsonld.SyntaxError', {\n              code: 'invalid @propagate value',\n              context: localCtx\n            });\n\n          case 104:\n            defined.set('@propagate', true);\n\n          case 105:\n            // handle @protected; determine whether this sub-context is declaring\n            // all its terms to be \"protected\" (exceptions can be made on a\n            // per-definition basis)\n            defined.set('@protected', ctx['@protected'] || false); // process all other keys\n\n            for (key in ctx) {\n              api.createTermDefinition({\n                activeCtx: rval,\n                localCtx: ctx,\n                term: key,\n                defined: defined,\n                options: options,\n                overrideProtected: overrideProtected\n              });\n            } // cache processed result\n\n\n            resolvedContext.setProcessed(activeCtx, rval);\n\n          case 108:\n            _context.next = 14;\n            break;\n\n          case 110:\n            _context.next = 115;\n            break;\n\n          case 112:\n            _context.prev = 112;\n            _context.t0 = _context[\"catch\"](12);\n\n            _iterator.e(_context.t0);\n\n          case 115:\n            _context.prev = 115;\n\n            _iterator.f();\n\n            return _context.finish(115);\n\n          case 118:\n            return _context.abrupt(\"return\", rval);\n\n          case 119:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[12, 112, 115, 118]]);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n/**\n * Creates a term definition during context processing.\n *\n * @param activeCtx the current active context.\n * @param localCtx the local context being processed.\n * @param term the term in the local context to define the mapping for.\n * @param defined a map of defining/defined keys to detect cycles and prevent\n *          double definitions.\n * @param {Object} [options] - creation options.\n * @param {string} [options.protectedMode=\"error\"] - \"error\" to throw error\n *   on `@protected` constraint violation, \"warn\" to allow violations and\n *   signal a warning.\n * @param overrideProtected `false` allows protected terms to be modified.\n */\n\n\napi.createTermDefinition = function (_ref3) {\n  var activeCtx = _ref3.activeCtx,\n      localCtx = _ref3.localCtx,\n      term = _ref3.term,\n      defined = _ref3.defined,\n      options = _ref3.options,\n      _ref3$overrideProtect = _ref3.overrideProtected,\n      overrideProtected = _ref3$overrideProtect === void 0 ? false : _ref3$overrideProtect;\n\n  if (defined.has(term)) {\n    // term already defined\n    if (defined.get(term)) {\n      return;\n    } // cycle detected\n\n\n    throw new JsonLdError('Cyclical context definition detected.', 'jsonld.CyclicalContext', {\n      code: 'cyclic IRI mapping',\n      context: localCtx,\n      term: term\n    });\n  } // now defining term\n\n\n  defined.set(term, false); // get context term value\n\n  var value;\n\n  if (localCtx.hasOwnProperty(term)) {\n    value = localCtx[term];\n  }\n\n  if (term === '@type' && _isObject(value) && value['@container'] === '@set' && api.processingMode(activeCtx, 1.1)) {\n    var _validKeys = ['@container', '@id', '@protected'];\n\n    if (Object.keys(value).some(function (k) {\n      return !_validKeys.includes(k);\n    })) {\n      throw new JsonLdError('Invalid JSON-LD syntax; keywords cannot be overridden.', 'jsonld.SyntaxError', {\n        code: 'keyword redefinition',\n        context: localCtx,\n        term: term\n      });\n    }\n  } else if (api.isKeyword(term)) {\n    throw new JsonLdError('Invalid JSON-LD syntax; keywords cannot be overridden.', 'jsonld.SyntaxError', {\n      code: 'keyword redefinition',\n      context: localCtx,\n      term: term\n    });\n  } else if (term === '') {\n    throw new JsonLdError('Invalid JSON-LD syntax; a term cannot be an empty string.', 'jsonld.SyntaxError', {\n      code: 'invalid term definition',\n      context: localCtx\n    });\n  } // keep reference to previous mapping for potential `@protected` check\n\n\n  var previousMapping = activeCtx.mappings.get(term); // remove old mapping\n\n  if (activeCtx.mappings.has(term)) {\n    activeCtx.mappings.delete(term);\n  } // clear context entry\n\n\n  if (value === null || _isObject(value) && value['@id'] === null) {\n    activeCtx.mappings.set(term, null);\n    defined.set(term, true);\n    return;\n  } // convert short-hand value to object w/@id\n\n\n  var simpleTerm = false;\n\n  if (_isString(value)) {\n    simpleTerm = true;\n    value = {\n      '@id': value\n    };\n  }\n\n  if (!_isObject(value)) {\n    throw new JsonLdError('Invalid JSON-LD syntax; @context term values must be ' + 'strings or objects.', 'jsonld.SyntaxError', {\n      code: 'invalid term definition',\n      context: localCtx\n    });\n  } // create new mapping\n\n\n  var mapping = {};\n  activeCtx.mappings.set(term, mapping);\n  mapping.reverse = false; // make sure term definition only has expected keywords\n\n  var validKeys = ['@container', '@id', '@language', '@reverse', '@type']; // JSON-LD 1.1 support\n\n  if (api.processingMode(activeCtx, 1.1)) {\n    validKeys.push('@context', '@index', '@nest', '@prefix', '@protected');\n  }\n\n  for (var kw in value) {\n    if (!validKeys.includes(kw)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; a term definition must not contain ' + kw, 'jsonld.SyntaxError', {\n        code: 'invalid term definition',\n        context: localCtx\n      });\n    }\n  } // always compute whether term has a colon as an optimization for\n  // _compactIri\n\n\n  var colon = term.indexOf(':');\n  mapping._termHasColon = colon > 0;\n\n  if ('@reverse' in value) {\n    if ('@id' in value) {\n      throw new JsonLdError('Invalid JSON-LD syntax; a @reverse term definition must not ' + 'contain @id.', 'jsonld.SyntaxError', {\n        code: 'invalid reverse property',\n        context: localCtx\n      });\n    }\n\n    if ('@nest' in value) {\n      throw new JsonLdError('Invalid JSON-LD syntax; a @reverse term definition must not ' + 'contain @nest.', 'jsonld.SyntaxError', {\n        code: 'invalid reverse property',\n        context: localCtx\n      });\n    }\n\n    var reverse = value['@reverse'];\n\n    if (!_isString(reverse)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; a @context @reverse value must be a string.', 'jsonld.SyntaxError', {\n        code: 'invalid IRI mapping',\n        context: localCtx\n      });\n    } // expand and add @id mapping\n\n\n    var _id = _expandIri(activeCtx, reverse, {\n      vocab: true,\n      base: false\n    }, localCtx, defined, options);\n\n    if (!_isAbsoluteIri(_id)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; a @context @reverse value must be an ' + 'absolute IRI or a blank node identifier.', 'jsonld.SyntaxError', {\n        code: 'invalid IRI mapping',\n        context: localCtx\n      });\n    }\n\n    mapping['@id'] = _id;\n    mapping.reverse = true;\n  } else if ('@id' in value) {\n    var _id2 = value['@id'];\n\n    if (!_isString(_id2)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; a @context @id value must be an array ' + 'of strings or a string.', 'jsonld.SyntaxError', {\n        code: 'invalid IRI mapping',\n        context: localCtx\n      });\n    }\n\n    if (_id2 !== term) {\n      // expand and add @id mapping\n      _id2 = _expandIri(activeCtx, _id2, {\n        vocab: true,\n        base: false\n      }, localCtx, defined, options);\n\n      if (!_isAbsoluteIri(_id2) && !api.isKeyword(_id2)) {\n        throw new JsonLdError('Invalid JSON-LD syntax; a @context @id value must be an ' + 'absolute IRI, a blank node identifier, or a keyword.', 'jsonld.SyntaxError', {\n          code: 'invalid IRI mapping',\n          context: localCtx\n        });\n      }\n\n      mapping['@id'] = _id2; // indicate if this term may be used as a compact IRI prefix\n\n      mapping._prefix = simpleTerm && !mapping._termHasColon && _id2.match(/[:\\/\\?#\\[\\]@]$/);\n    }\n  }\n\n  if (!('@id' in mapping)) {\n    // see if the term has a prefix\n    if (mapping._termHasColon) {\n      var prefix = term.substr(0, colon);\n\n      if (localCtx.hasOwnProperty(prefix)) {\n        // define parent prefix\n        api.createTermDefinition({\n          activeCtx: activeCtx,\n          localCtx: localCtx,\n          term: prefix,\n          defined: defined,\n          options: options\n        });\n      }\n\n      if (activeCtx.mappings.has(prefix)) {\n        // set @id based on prefix parent\n        var suffix = term.substr(colon + 1);\n        mapping['@id'] = activeCtx.mappings.get(prefix)['@id'] + suffix;\n      } else {\n        // term is an absolute IRI\n        mapping['@id'] = term;\n      }\n    } else if (term == '@type') {\n      // Special case, were we've previously determined that container is @set\n      mapping['@id'] = term;\n    } else {\n      // non-IRIs *must* define @ids if @vocab is not available\n      if (!('@vocab' in activeCtx)) {\n        throw new JsonLdError('Invalid JSON-LD syntax; @context terms must define an @id.', 'jsonld.SyntaxError', {\n          code: 'invalid IRI mapping',\n          context: localCtx,\n          term: term\n        });\n      } // prepend vocab to term\n\n\n      mapping['@id'] = activeCtx['@vocab'] + term;\n    }\n  } // Handle term protection\n\n\n  if (value['@protected'] === true || defined.get('@protected') === true && value['@protected'] !== false) {\n    activeCtx.protected[term] = true;\n    mapping.protected = true;\n  } // IRI mapping now defined\n\n\n  defined.set(term, true);\n\n  if ('@type' in value) {\n    var type = value['@type'];\n\n    if (!_isString(type)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; an @context @type value must be a string.', 'jsonld.SyntaxError', {\n        code: 'invalid type mapping',\n        context: localCtx\n      });\n    }\n\n    if (type === '@json' || type === '@none') {\n      if (api.processingMode(activeCtx, 1.0)) {\n        throw new JsonLdError('Invalid JSON-LD syntax; an @context @type value must not be ' + \"\\\"\".concat(type, \"\\\" in JSON-LD 1.0 mode.\"), 'jsonld.SyntaxError', {\n          code: 'invalid type mapping',\n          context: localCtx\n        });\n      }\n    } else if (type !== '@id' && type !== '@vocab') {\n      // expand @type to full IRI\n      type = _expandIri(activeCtx, type, {\n        vocab: true,\n        base: false\n      }, localCtx, defined, options);\n\n      if (!_isAbsoluteIri(type)) {\n        throw new JsonLdError('Invalid JSON-LD syntax; an @context @type value must be an ' + 'absolute IRI.', 'jsonld.SyntaxError', {\n          code: 'invalid type mapping',\n          context: localCtx\n        });\n      }\n\n      if (type.indexOf('_:') === 0) {\n        throw new JsonLdError('Invalid JSON-LD syntax; an @context @type value must be an IRI, ' + 'not a blank node identifier.', 'jsonld.SyntaxError', {\n          code: 'invalid type mapping',\n          context: localCtx\n        });\n      }\n    } // add @type to mapping\n\n\n    mapping['@type'] = type;\n  }\n\n  if ('@container' in value) {\n    // normalize container to an array form\n    var container = _isString(value['@container']) ? [value['@container']] : value['@container'] || [];\n    var validContainers = ['@list', '@set', '@index', '@language'];\n    var isValid = true;\n    var hasSet = container.includes('@set'); // JSON-LD 1.1 support\n\n    if (api.processingMode(activeCtx, 1.1)) {\n      validContainers.push('@graph', '@id', '@type'); // check container length\n\n      if (container.includes('@list')) {\n        if (container.length !== 1) {\n          throw new JsonLdError('Invalid JSON-LD syntax; @context @container with @list must ' + 'have no other values', 'jsonld.SyntaxError', {\n            code: 'invalid container mapping',\n            context: localCtx\n          });\n        }\n      } else if (container.includes('@graph')) {\n        if (container.some(function (key) {\n          return key !== '@graph' && key !== '@id' && key !== '@index' && key !== '@set';\n        })) {\n          throw new JsonLdError('Invalid JSON-LD syntax; @context @container with @graph must ' + 'have no other values other than @id, @index, and @set', 'jsonld.SyntaxError', {\n            code: 'invalid container mapping',\n            context: localCtx\n          });\n        }\n      } else {\n        // otherwise, container may also include @set\n        isValid &= container.length <= (hasSet ? 2 : 1);\n      }\n\n      if (container.includes('@type')) {\n        // If mapping does not have an @type,\n        // set it to @id\n        mapping['@type'] = mapping['@type'] || '@id'; // type mapping must be either @id or @vocab\n\n        if (!['@id', '@vocab'].includes(mapping['@type'])) {\n          throw new JsonLdError('Invalid JSON-LD syntax; container: @type requires @type to be ' + '@id or @vocab.', 'jsonld.SyntaxError', {\n            code: 'invalid type mapping',\n            context: localCtx\n          });\n        }\n      }\n    } else {\n      // in JSON-LD 1.0, container must not be an array (it must be a string,\n      // which is one of the validContainers)\n      isValid &= !_isArray(value['@container']); // check container length\n\n      isValid &= container.length <= 1;\n    } // check against valid containers\n\n\n    isValid &= container.every(function (c) {\n      return validContainers.includes(c);\n    }); // @set not allowed with @list\n\n    isValid &= !(hasSet && container.includes('@list'));\n\n    if (!isValid) {\n      throw new JsonLdError('Invalid JSON-LD syntax; @context @container value must be ' + 'one of the following: ' + validContainers.join(', '), 'jsonld.SyntaxError', {\n        code: 'invalid container mapping',\n        context: localCtx\n      });\n    }\n\n    if (mapping.reverse && !container.every(function (c) {\n      return ['@index', '@set'].includes(c);\n    })) {\n      throw new JsonLdError('Invalid JSON-LD syntax; @context @container value for a @reverse ' + 'type definition must be @index or @set.', 'jsonld.SyntaxError', {\n        code: 'invalid reverse property',\n        context: localCtx\n      });\n    } // add @container to mapping\n\n\n    mapping['@container'] = container;\n  } // property indexing\n\n\n  if ('@index' in value) {\n    if (!('@container' in value) || !mapping['@container'].includes('@index')) {\n      throw new JsonLdError('Invalid JSON-LD syntax; @index without @index in @container: ' + \"\\\"\".concat(value['@index'], \"\\\" on term \\\"\").concat(term, \"\\\".\"), 'jsonld.SyntaxError', {\n        code: 'invalid term definition',\n        context: localCtx\n      });\n    }\n\n    if (!_isString(value['@index']) || value['@index'].indexOf('@') === 0) {\n      throw new JsonLdError('Invalid JSON-LD syntax; @index must expand to an IRI: ' + \"\\\"\".concat(value['@index'], \"\\\" on term \\\"\").concat(term, \"\\\".\"), 'jsonld.SyntaxError', {\n        code: 'invalid term definition',\n        context: localCtx\n      });\n    }\n\n    mapping['@index'] = value['@index'];\n  } // scoped contexts\n\n\n  if ('@context' in value) {\n    mapping['@context'] = value['@context'];\n  }\n\n  if ('@language' in value && !('@type' in value)) {\n    var language = value['@language'];\n\n    if (language !== null && !_isString(language)) {\n      throw new JsonLdError('Invalid JSON-LD syntax; @context @language value must be ' + 'a string or null.', 'jsonld.SyntaxError', {\n        code: 'invalid language mapping',\n        context: localCtx\n      });\n    } // add @language to mapping\n\n\n    if (language !== null) {\n      language = language.toLowerCase();\n    }\n\n    mapping['@language'] = language;\n  } // term may be used as a prefix\n\n\n  if ('@prefix' in value) {\n    if (mapping._termHasColon) {\n      throw new JsonLdError('Invalid JSON-LD syntax; @context @prefix used on a compact IRI term', 'jsonld.SyntaxError', {\n        code: 'invalid term definition',\n        context: localCtx\n      });\n    }\n\n    if (typeof value['@prefix'] === 'boolean') {\n      mapping._prefix = value['@prefix'] === true;\n    } else {\n      throw new JsonLdError('Invalid JSON-LD syntax; @context value for @prefix must be boolean', 'jsonld.SyntaxError', {\n        code: 'invalid @prefix value',\n        context: localCtx\n      });\n    }\n  }\n\n  if ('@nest' in value) {\n    var nest = value['@nest'];\n\n    if (!_isString(nest) || nest !== '@nest' && nest.indexOf('@') === 0) {\n      throw new JsonLdError('Invalid JSON-LD syntax; @context @nest value must be ' + 'a string which is not a keyword other than @nest.', 'jsonld.SyntaxError', {\n        code: 'invalid @nest value',\n        context: localCtx\n      });\n    }\n\n    mapping['@nest'] = nest;\n  } // disallow aliasing @context and @preserve\n\n\n  var id = mapping['@id'];\n\n  if (id === '@context' || id === '@preserve') {\n    throw new JsonLdError('Invalid JSON-LD syntax; @context and @preserve cannot be aliased.', 'jsonld.SyntaxError', {\n      code: 'invalid keyword alias',\n      context: localCtx\n    });\n  } // Check for overriding protected terms\n\n\n  if (previousMapping && previousMapping.protected && !overrideProtected) {\n    // force new term to continue to be protected and see if the mappings would\n    // be equal\n    activeCtx.protected[term] = true;\n    mapping.protected = true;\n\n    if (!_deepCompare(previousMapping, mapping)) {\n      var protectedMode = options && options.protectedMode || 'error';\n\n      if (protectedMode === 'error') {\n        throw new JsonLdError('Invalid JSON-LD syntax; tried to redefine a protected term.', 'jsonld.SyntaxError', {\n          code: 'protected term redefinition',\n          context: localCtx,\n          term: term\n        });\n      } else if (protectedMode === 'warn') {\n        // FIXME: remove logging and use a handler\n        console.warn('WARNING: protected term redefinition', {\n          term: term\n        });\n        return;\n      }\n\n      throw new JsonLdError('Invalid protectedMode.', 'jsonld.SyntaxError', {\n        code: 'invalid protected mode',\n        context: localCtx,\n        term: term,\n        protectedMode: protectedMode\n      });\n    }\n  }\n};\n/**\n * Expands a string to a full IRI. The string may be a term, a prefix, a\n * relative IRI, or an absolute IRI. The associated absolute IRI will be\n * returned.\n *\n * @param activeCtx the current active context.\n * @param value the string to expand.\n * @param relativeTo options for how to resolve relative IRIs:\n *          base: true to resolve against the base IRI, false not to.\n *          vocab: true to concatenate after @vocab, false not to.\n * @param {Object} [options] - processing options.\n *\n * @return the expanded value.\n */\n\n\napi.expandIri = function (activeCtx, value, relativeTo, options) {\n  return _expandIri(activeCtx, value, relativeTo, undefined, undefined, options);\n};\n/**\n * Expands a string to a full IRI. The string may be a term, a prefix, a\n * relative IRI, or an absolute IRI. The associated absolute IRI will be\n * returned.\n *\n * @param activeCtx the current active context.\n * @param value the string to expand.\n * @param relativeTo options for how to resolve relative IRIs:\n *          base: true to resolve against the base IRI, false not to.\n *          vocab: true to concatenate after @vocab, false not to.\n * @param localCtx the local context being processed (only given if called\n *          during context processing).\n * @param defined a map for tracking cycles in context definitions (only given\n *          if called during context processing).\n * @param {Object} [options] - processing options.\n *\n * @return the expanded value.\n */\n\n\nfunction _expandIri(activeCtx, value, relativeTo, localCtx, defined, options) {\n  // already expanded\n  if (value === null || !_isString(value) || api.isKeyword(value)) {\n    return value;\n  } // define term dependency if not defined\n\n\n  if (localCtx && localCtx.hasOwnProperty(value) && defined.get(value) !== true) {\n    api.createTermDefinition({\n      activeCtx: activeCtx,\n      localCtx: localCtx,\n      term: value,\n      defined: defined,\n      options: options\n    });\n  }\n\n  relativeTo = relativeTo || {};\n\n  if (relativeTo.vocab) {\n    var mapping = activeCtx.mappings.get(value); // value is explicitly ignored with a null mapping\n\n    if (mapping === null) {\n      return null;\n    }\n\n    if (mapping) {\n      // value is a term\n      return mapping['@id'];\n    }\n  } // split value into prefix:suffix\n\n\n  var colon = value.indexOf(':');\n\n  if (colon > 0) {\n    var prefix = value.substr(0, colon);\n    var suffix = value.substr(colon + 1); // do not expand blank nodes (prefix of '_') or already-absolute\n    // IRIs (suffix of '//')\n\n    if (prefix === '_' || suffix.indexOf('//') === 0) {\n      return value;\n    } // prefix dependency not defined, define it\n\n\n    if (localCtx && localCtx.hasOwnProperty(prefix)) {\n      api.createTermDefinition({\n        activeCtx: activeCtx,\n        localCtx: localCtx,\n        term: prefix,\n        defined: defined,\n        options: options\n      });\n    } // use mapping if prefix is defined\n\n\n    var _mapping = activeCtx.mappings.get(prefix);\n\n    if (_mapping && _mapping._prefix) {\n      return _mapping['@id'] + suffix;\n    } // already absolute IRI\n\n\n    if (_isAbsoluteIri(value)) {\n      return value;\n    }\n  } // prepend vocab\n\n\n  if (relativeTo.vocab && '@vocab' in activeCtx) {\n    return activeCtx['@vocab'] + value;\n  } // prepend base\n\n\n  if (relativeTo.base) {\n    return prependBase(activeCtx['@base'], value);\n  }\n\n  return value;\n}\n/**\n * Gets the initial context.\n *\n * @param options the options to use:\n *          [base] the document base IRI.\n *\n * @return the initial context.\n */\n\n\napi.getInitialContext = function (options) {\n  var base = parseUrl(options.base || '');\n  var key = JSON.stringify({\n    base: base,\n    processingMode: options.processingMode\n  });\n  var cached = INITIAL_CONTEXT_CACHE.get(key);\n\n  if (cached) {\n    return cached;\n  }\n\n  var initialContext = {\n    '@base': base,\n    processingMode: options.processingMode,\n    mappings: new Map(),\n    inverse: null,\n    getInverse: _createInverseContext,\n    clone: _cloneActiveContext,\n    revertToPreviousContext: _revertToPreviousContext,\n    protected: {}\n  }; // TODO: consider using LRU cache instead\n\n  if (INITIAL_CONTEXT_CACHE.size === INITIAL_CONTEXT_CACHE_MAX_SIZE) {\n    // clear whole cache -- assumes scenario where the cache fills means\n    // the cache isn't being used very efficiently anyway\n    INITIAL_CONTEXT_CACHE.clear();\n  }\n\n  INITIAL_CONTEXT_CACHE.set(key, initialContext);\n  return initialContext;\n  /**\n   * Generates an inverse context for use in the compaction algorithm, if\n   * not already generated for the given active context.\n   *\n   * @return the inverse context.\n   */\n\n  function _createInverseContext() {\n    var activeCtx = this; // lazily create inverse\n\n    if (activeCtx.inverse) {\n      return activeCtx.inverse;\n    }\n\n    var inverse = activeCtx.inverse = {}; // variables for building fast CURIE map\n\n    var fastCurieMap = activeCtx.fastCurieMap = {};\n    var irisToTerms = {}; // handle default language\n\n    var defaultLanguage = activeCtx['@language'] || '@none'; // create term selections for each mapping in the context, ordered by\n    // shortest and then lexicographically least\n\n    var mappings = activeCtx.mappings;\n\n    var terms = _toConsumableArray(mappings.keys()).sort(_compareShortestLeast);\n\n    var _iterator2 = _createForOfIteratorHelper(terms),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var term = _step2.value;\n        var mapping = mappings.get(term);\n\n        if (mapping === null) {\n          continue;\n        }\n\n        var container = mapping['@container'] || '@none';\n        container = [].concat(container).sort().join(''); // iterate over every IRI in the mapping\n\n        var ids = _asArray(mapping['@id']);\n\n        var _iterator3 = _createForOfIteratorHelper(ids),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var iri = _step3.value;\n            var entry = inverse[iri];\n            var isKeyword = api.isKeyword(iri);\n\n            if (!entry) {\n              // initialize entry\n              inverse[iri] = entry = {};\n\n              if (!isKeyword && !mapping._termHasColon) {\n                // init IRI to term map and fast CURIE prefixes\n                irisToTerms[iri] = [term];\n                var fastCurieEntry = {\n                  iri: iri,\n                  terms: irisToTerms[iri]\n                };\n\n                if (iri[0] in fastCurieMap) {\n                  fastCurieMap[iri[0]].push(fastCurieEntry);\n                } else {\n                  fastCurieMap[iri[0]] = [fastCurieEntry];\n                }\n              }\n            } else if (!isKeyword && !mapping._termHasColon) {\n              // add IRI to term match\n              irisToTerms[iri].push(term);\n            } // add new entry\n\n\n            if (!entry[container]) {\n              entry[container] = {\n                '@language': {},\n                '@type': {},\n                '@any': {}\n              };\n            }\n\n            entry = entry[container];\n\n            _addPreferredTerm(term, entry['@any'], '@none');\n\n            if (mapping.reverse) {\n              // term is preferred for values using @reverse\n              _addPreferredTerm(term, entry['@type'], '@reverse');\n            } else if (mapping['@type'] === '@none') {\n              _addPreferredTerm(term, entry['@any'], '@none');\n\n              _addPreferredTerm(term, entry['@language'], '@none');\n\n              _addPreferredTerm(term, entry['@type'], '@none');\n            } else if ('@type' in mapping) {\n              // term is preferred for values using specific type\n              _addPreferredTerm(term, entry['@type'], mapping['@type']);\n            } else if ('@language' in mapping) {\n              // term is preferred for values using specific language\n              var language = mapping['@language'] || '@null';\n\n              _addPreferredTerm(term, entry['@language'], language);\n            } else {\n              // term is preferred for values w/default language or no type and\n              // no language\n              // add an entry for the default language\n              _addPreferredTerm(term, entry['@language'], defaultLanguage); // add entries for no type and no language\n\n\n              _addPreferredTerm(term, entry['@type'], '@none');\n\n              _addPreferredTerm(term, entry['@language'], '@none');\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      } // build fast CURIE map\n\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    for (var _key in fastCurieMap) {\n      _buildIriMap(fastCurieMap, _key, 1);\n    }\n\n    return inverse;\n  }\n  /**\n   * Runs a recursive algorithm to build a lookup map for quickly finding\n   * potential CURIEs.\n   *\n   * @param iriMap the map to build.\n   * @param key the current key in the map to work on.\n   * @param idx the index into the IRI to compare.\n   */\n\n\n  function _buildIriMap(iriMap, key, idx) {\n    var entries = iriMap[key];\n    var next = iriMap[key] = {};\n    var iri;\n    var letter;\n\n    var _iterator4 = _createForOfIteratorHelper(entries),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var entry = _step4.value;\n        iri = entry.iri;\n\n        if (idx >= iri.length) {\n          letter = '';\n        } else {\n          letter = iri[idx];\n        }\n\n        if (letter in next) {\n          next[letter].push(entry);\n        } else {\n          next[letter] = [entry];\n        }\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n\n    for (var _key2 in next) {\n      if (_key2 === '') {\n        continue;\n      }\n\n      _buildIriMap(next, _key2, idx + 1);\n    }\n  }\n  /**\n   * Adds the term for the given entry if not already added.\n   *\n   * @param term the term to add.\n   * @param entry the inverse context typeOrLanguage entry to add to.\n   * @param typeOrLanguageValue the key in the entry to add to.\n   */\n\n\n  function _addPreferredTerm(term, entry, typeOrLanguageValue) {\n    if (!entry.hasOwnProperty(typeOrLanguageValue)) {\n      entry[typeOrLanguageValue] = term;\n    }\n  }\n  /**\n   * Clones an active context, creating a child active context.\n   *\n   * @return a clone (child) of the active context.\n   */\n\n\n  function _cloneActiveContext() {\n    var child = {};\n    child['@base'] = this['@base'];\n    child.mappings = util.clone(this.mappings);\n    child.clone = this.clone;\n    child.inverse = null;\n    child.getInverse = this.getInverse;\n    child.protected = util.clone(this.protected);\n\n    if (this.previousContext) {\n      child.previousContext = this.previousContext.clone();\n    }\n\n    child.revertToPreviousContext = this.revertToPreviousContext;\n\n    if ('@language' in this) {\n      child['@language'] = this['@language'];\n    }\n\n    if ('@vocab' in this) {\n      child['@vocab'] = this['@vocab'];\n    }\n\n    return child;\n  }\n  /**\n   * Reverts any type-scoped context in this active context to the previous\n   * context.\n   */\n\n\n  function _revertToPreviousContext() {\n    if (!this.previousContext) {\n      return this;\n    }\n\n    return this.previousContext.clone();\n  }\n};\n/**\n * Gets the value for the given active context key and type, null if none is\n * set or undefined if none is set and type is '@context'.\n *\n * @param ctx the active context.\n * @param key the context key.\n * @param [type] the type of value to get (eg: '@id', '@type'), if not\n *          specified gets the entire entry for a key, null if not found.\n *\n * @return the value, null, or undefined.\n */\n\n\napi.getContextValue = function (ctx, key, type) {\n  // invalid key\n  if (key === null) {\n    if (type === '@context') {\n      return undefined;\n    }\n\n    return null;\n  } // get specific entry information\n\n\n  if (ctx.mappings.has(key)) {\n    var entry = ctx.mappings.get(key);\n\n    if (_isUndefined(type)) {\n      // return whole entry\n      return entry;\n    }\n\n    if (entry.hasOwnProperty(type)) {\n      // return entry value for type\n      return entry[type];\n    }\n  } // get default language\n\n\n  if (type === '@language' && ctx.hasOwnProperty(type)) {\n    return ctx[type];\n  }\n\n  if (type === '@context') {\n    return undefined;\n  }\n\n  return null;\n};\n/**\n * Processing Mode check.\n *\n * @param activeCtx the current active context.\n * @param version the string or numeric version to check.\n *\n * @return boolean.\n */\n\n\napi.processingMode = function (activeCtx, version) {\n  if (version.toString() >= '1.1') {\n    return !activeCtx.processingMode || activeCtx.processingMode >= 'json-ld-' + version.toString();\n  } else {\n    return activeCtx.processingMode === 'json-ld-1.0';\n  }\n};\n/**\n * Returns whether or not the given value is a keyword.\n *\n * @param v the value to check.\n *\n * @return true if the value is a keyword, false if not.\n */\n\n\napi.isKeyword = function (v) {\n  if (!_isString(v) || v[0] !== '@') {\n    return false;\n  }\n\n  switch (v) {\n    case '@base':\n    case '@container':\n    case '@context':\n    case '@default':\n    case '@embed':\n    case '@explicit':\n    case '@graph':\n    case '@id':\n    case '@index':\n    case '@json':\n    case '@language':\n    case '@list':\n    case '@nest':\n    case '@none':\n    case '@omitDefault':\n    case '@prefix':\n    case '@preserve':\n    case '@protected':\n    case '@requireAll':\n    case '@reverse':\n    case '@set':\n    case '@type':\n    case '@value':\n    case '@version':\n    case '@vocab':\n      return true;\n  }\n\n  return false;\n};\n\nfunction _deepCompare(x1, x2) {\n  // compare `null` or primitive types directly\n  if (!(x1 && typeof x1 === 'object') || !(x2 && typeof x2 === 'object')) {\n    return x1 === x2;\n  } // x1 and x2 are objects (also potentially arrays)\n\n\n  var x1Array = Array.isArray(x1);\n\n  if (x1Array !== Array.isArray(x2)) {\n    return false;\n  }\n\n  if (x1Array) {\n    if (x1.length !== x2.length) {\n      return false;\n    }\n\n    for (var i = 0; i < x1.length; ++i) {\n      if (!_deepCompare(x1[i], x2[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  } // x1 and x2 are non-array objects\n\n\n  var k1s = Object.keys(x1);\n  var k2s = Object.keys(x2);\n\n  if (k1s.length !== k2s.length) {\n    return false;\n  }\n\n  for (var k1 in x1) {\n    var v1 = x1[k1];\n    var v2 = x2[k1]; // special case: `@container` can be in any order\n\n    if (k1 === '@container') {\n      if (Array.isArray(v1) && Array.isArray(v2)) {\n        v1 = v1.slice().sort();\n        v2 = v2.slice().sort();\n      }\n    }\n\n    if (!_deepCompare(v1, v2)) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["D:/My Works/Git/cowin-verify/node_modules/jsonld/lib/context.js"],"names":["util","require","JsonLdError","_isArray","isArray","_isObject","isObject","_isString","isString","_isUndefined","isUndefined","_isAbsoluteIri","isAbsolute","_isRelativeIri","isRelative","prependBase","parseUrl","parse","_asArray","asArray","_compareShortestLeast","compareShortestLeast","INITIAL_CONTEXT_CACHE","Map","INITIAL_CONTEXT_CACHE_MAX_SIZE","api","module","exports","process","activeCtx","localCtx","options","propagate","overrideProtected","ctxs","length","contextResolver","resolve","context","documentLoader","base","resolved","document","rval","previousContext","clone","resolvedContext","ctx","Object","keys","protected","protectedMode","code","console","warn","oldActiveCtx","getInitialContext","entries","term","_protected","mappings","setProcessed","processed","getProcessed","defined","processingMode","set","href","value","_expandIri","vocab","undefined","toLowerCase","key","createTermDefinition","has","get","hasOwnProperty","validKeys","some","k","includes","isKeyword","previousMapping","delete","simpleTerm","mapping","reverse","push","kw","colon","indexOf","_termHasColon","id","_prefix","match","prefix","substr","suffix","type","container","validContainers","isValid","hasSet","every","c","join","language","nest","_deepCompare","expandIri","relativeTo","JSON","stringify","cached","initialContext","inverse","getInverse","_createInverseContext","_cloneActiveContext","revertToPreviousContext","_revertToPreviousContext","size","clear","fastCurieMap","irisToTerms","defaultLanguage","terms","sort","concat","ids","iri","entry","fastCurieEntry","_addPreferredTerm","_buildIriMap","iriMap","idx","next","letter","typeOrLanguageValue","child","getContextValue","version","toString","v","x1","x2","x1Array","Array","i","k1s","k2s","k1","v1","v2","slice"],"mappings":"AAAA;AACA;AACA;AACA;;;;;;;;;;;;AAEA,IAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAMC,WAAW,GAAGD,OAAO,CAAC,eAAD,CAA3B;;AAEA,eAKIA,OAAO,CAAC,SAAD,CALX;AAAA,IACWE,QADX,YACEC,OADF;AAAA,IAEYC,SAFZ,YAEEC,QAFF;AAAA,IAGYC,SAHZ,YAGEC,QAHF;AAAA,IAIeC,YAJf,YAIEC,WAJF;;AAOA,gBAKIT,OAAO,CAAC,OAAD,CALX;AAAA,IACcU,cADd,aACEC,UADF;AAAA,IAEcC,cAFd,aAEEC,UAFF;AAAA,IAGEC,WAHF,aAGEA,WAHF;AAAA,IAISC,QAJT,aAIEC,KAJF;;AAOA,gBAGIhB,OAAO,CAAC,QAAD,CAHX;AAAA,IACWiB,QADX,aACEC,OADF;AAAA,IAEwBC,qBAFxB,aAEEC,oBAFF;;AAKA,IAAMC,qBAAqB,GAAG,IAAIC,GAAJ,EAA9B;AACA,IAAMC,8BAA8B,GAAG,KAAvC;AAEA,IAAMC,GAAG,GAAG,EAAZ;AACAC,MAAM,CAACC,OAAP,GAAiBF,GAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,GAAG,CAACG,OAAJ;AAAA,uEAAc;AAAA;;AAAA;AAAA;AAAA;AAAA;AACZC,YAAAA,SADY,QACZA,SADY,EACDC,QADC,QACDA,QADC,EACSC,OADT,QACSA,OADT,wBAEZC,SAFY,EAEZA,SAFY,+BAEA,IAFA,gDAGZC,iBAHY,EAGZA,iBAHY,sCAGQ,KAHR;;AAKZ;AACA,gBAAG5B,SAAS,CAACyB,QAAD,CAAT,IAAuB,cAAcA,QAArC,IACD3B,QAAQ,CAAC2B,QAAQ,CAAC,UAAD,CAAT,CADV,EACkC;AAChCA,cAAAA,QAAQ,GAAGA,QAAQ,CAAC,UAAD,CAAnB;AACD;;AACKI,YAAAA,IAVM,GAUChB,QAAQ,CAACY,QAAD,CAVT,EAYZ;;AAZY,kBAaTI,IAAI,CAACC,MAAL,KAAgB,CAbP;AAAA;AAAA;AAAA;;AAAA,6CAcHN,SAdG;;AAAA;AAAA;AAAA,mBAkBWE,OAAO,CAACK,eAAR,CAAwBC,OAAxB,CAAgC;AACrDC,cAAAA,OAAO,EAAER,QAD4C;AAErDS,cAAAA,cAAc,EAAER,OAAO,CAACQ,cAF6B;AAGrDC,cAAAA,IAAI,EAAET,OAAO,CAACS;AAHuC,aAAhC,CAlBX;;AAAA;AAkBNC,YAAAA,QAlBM;;AAwBZ;AACA,gBAAGpC,SAAS,CAACoC,QAAQ,CAAC,CAAD,CAAR,CAAYC,QAAb,CAAT,IACD,OAAOD,QAAQ,CAAC,CAAD,CAAR,CAAYC,QAAZ,CAAqB,YAArB,CAAP,KAA8C,SADhD,EAC2D;AACzD;AACAV,cAAAA,SAAS,GAAGS,QAAQ,CAAC,CAAD,CAAR,CAAYC,QAAZ,CAAqB,YAArB,CAAZ;AACD,aA7BW,CA+BZ;AACA;;;AACIC,YAAAA,IAjCQ,GAiCDd,SAjCC,EAmCZ;AACA;;AACA,gBAAG,CAACG,SAAD,IAAc,CAACW,IAAI,CAACC,eAAvB,EAAwC;AACtC;AACAD,cAAAA,IAAI,GAAGA,IAAI,CAACE,KAAL,EAAP;AACAF,cAAAA,IAAI,CAACC,eAAL,GAAuBf,SAAvB;AACD;;AAzCW,mDA2CiBY,QA3CjB;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA2CFK,YAAAA,eA3CE;AA4CKC,YAAAA,GA5CL,GA4CYD,eA5CZ,CA4CLJ,QA5CK,EA8CV;;AACAb,YAAAA,SAAS,GAAGc,IAAZ,CA/CU,CAiDV;;AAjDU,kBAkDPI,GAAG,KAAK,IAlDD;AAAA;AAAA;AAAA;;AAAA,kBAqDL,CAACd,iBAAD,IACDe,MAAM,CAACC,IAAP,CAAYpB,SAAS,CAACqB,SAAtB,EAAiCf,MAAjC,KAA4C,CAtDtC;AAAA;AAAA;AAAA;;AAuDAgB,YAAAA,aAvDA,GAuDiBpB,OAAO,IAAIA,OAAO,CAACoB,aAApB,IAAsC,OAvDtD;;AAAA,kBAwDHA,aAAa,KAAK,OAxDf;AAAA;AAAA;AAAA;;AAAA,kBAyDE,IAAIjD,WAAJ,CACJ,gEACA,oBAFI,EAGJ,oBAHI,EAIJ;AAACkD,cAAAA,IAAI,EAAE;AAAP,aAJI,CAzDF;;AAAA;AAAA,kBA8DID,aAAa,KAAK,MA9DtB;AAAA;AAAA;AAAA;;AA+DJ;AACAE,YAAAA,OAAO,CAACC,IAAR,CAAa,wCAAb;AACMC,YAAAA,YAjEF,GAiEiB1B,SAjEjB,EAkEJ;;AACAc,YAAAA,IAAI,GAAGd,SAAS,GAAGJ,GAAG,CAAC+B,iBAAJ,CAAsBzB,OAAtB,EAA+Bc,KAA/B,EAAnB;;AACA,2CACEG,MAAM,CAACS,OAAP,CAAeF,YAAY,CAACL,SAA5B,CADF,qCAC0C;AAAA,2EAD/BQ,IAC+B,0BADzBC,UACyB;;AACxC,kBAAGA,UAAH,EAAe;AACb9B,gBAAAA,SAAS,CAAC+B,QAAV,CAAmBF,IAAnB,IACE1D,IAAI,CAAC6C,KAAL,CAAWU,YAAY,CAACK,QAAb,CAAsBF,IAAtB,CAAX,CADF;AAED;AACF;;AACD7B,YAAAA,SAAS,CAACqB,SAAV,GAAsBlD,IAAI,CAAC6C,KAAL,CAAWU,YAAY,CAACL,SAAxB,CAAtB,CA3EI,CA6EJ;;AACAJ,YAAAA,eAAe,CAACe,YAAhB,CAA6BN,YAA7B,EAA2CZ,IAA3C;AA9EI;;AAAA;AAAA,kBAiFA,IAAIzC,WAAJ,CACJ,wBADI,EAEJ,oBAFI,EAGJ;AAACkD,cAAAA,IAAI,EAAE,wBAAP;AAAiCd,cAAAA,OAAO,EAAER,QAA1C;AAAoDqB,cAAAA,aAAa,EAAbA;AAApD,aAHI,CAjFA;;AAAA;AAsFRR,YAAAA,IAAI,GAAGd,SAAS,GAAGJ,GAAG,CAAC+B,iBAAJ,CAAsBzB,OAAtB,EAA+Bc,KAA/B,EAAnB;AAtFQ;;AAAA;AA0FV;AACMiB,YAAAA,SA3FI,GA2FQhB,eAAe,CAACiB,YAAhB,CAA6BlC,SAA7B,CA3FR;;AAAA,iBA4FPiC,SA5FO;AAAA;AAAA;AAAA;;AA6FRnB,YAAAA,IAAI,GAAGd,SAAS,GAAGiC,SAAnB;AA7FQ;;AAAA;AAiGV;AACA,gBAAGzD,SAAS,CAAC0C,GAAD,CAAT,IAAkB,cAAcA,GAAnC,EAAwC;AACtCA,cAAAA,GAAG,GAAGA,GAAG,CAAC,UAAD,CAAT;AACD,aApGS,CAsGV;;;AAtGU,gBAuGN1C,SAAS,CAAC0C,GAAD,CAvGH;AAAA;AAAA;AAAA;;AAAA,kBAwGF,IAAI7C,WAAJ,CACJ,qDADI,EAEJ,oBAFI,EAEkB;AAACkD,cAAAA,IAAI,EAAE,uBAAP;AAAgCd,cAAAA,OAAO,EAAES;AAAzC,aAFlB,CAxGE;;AAAA;AA6GV;AACA;AAEA;AACAJ,YAAAA,IAAI,GAAGA,IAAI,CAACE,KAAL,EAAP,CAjHU,CAmHV;;AACMmB,YAAAA,OApHI,GAoHM,IAAIzC,GAAJ,EApHN,EAsHV;;AAtHU,kBAuHP,cAAcwB,GAvHP;AAAA;AAAA;AAAA;;AAAA,kBAwHLA,GAAG,CAAC,UAAD,CAAH,KAAoB,GAxHf;AAAA;AAAA;AAAA;;AAAA,kBAyHA,IAAI7C,WAAJ,CACJ,kCAAkC6C,GAAG,CAAC,UAAD,CADjC,EAEJ,2BAFI,EAGJ;AAACK,cAAAA,IAAI,EAAE,wBAAP;AAAiCd,cAAAA,OAAO,EAAES;AAA1C,aAHI,CAzHA;;AAAA;AAAA,kBA8HLlB,SAAS,CAACoC,cAAV,IACDpC,SAAS,CAACoC,cAAV,KAA6B,aA/HvB;AAAA;AAAA;AAAA;;AAAA,kBAgIA,IAAI/D,WAAJ,CACJ,eAAe6C,GAAG,CAAC,UAAD,CAAlB,GAAiC,uBAAjC,GACAlB,SAAS,CAACoC,cAFN,EAGJ,+BAHI,EAIJ;AAACb,cAAAA,IAAI,EAAE,0BAAP;AAAmCd,cAAAA,OAAO,EAAES;AAA5C,aAJI,CAhIA;;AAAA;AAsIRJ,YAAAA,IAAI,CAACsB,cAAL,GAAsB,aAAtB;AACAtB,YAAAA,IAAI,CAAC,UAAD,CAAJ,GAAmBI,GAAG,CAAC,UAAD,CAAtB;AACAiB,YAAAA,OAAO,CAACE,GAAR,CAAY,UAAZ,EAAwB,IAAxB;;AAxIQ;AA2IV;AACAvB,YAAAA,IAAI,CAACsB,cAAL,GACEtB,IAAI,CAACsB,cAAL,IAAuBpC,SAAS,CAACoC,cADnC,CA5IU,CA+IV;;AA/IU,kBAgJP,WAAWlB,GAhJJ;AAAA;AAAA;AAAA;;AAiJJP,YAAAA,IAjJI,GAiJGO,GAAG,CAAC,OAAD,CAjJN;;AAAA,kBAmJLP,IAAI,KAAK,IAnJJ;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,iBAqJE7B,cAAc,CAAC6B,IAAD,CArJhB;AAAA;AAAA;AAAA;;AAsJNA,YAAAA,IAAI,GAAGxB,QAAQ,CAACwB,IAAD,CAAf;AAtJM;AAAA;;AAAA;AAAA,iBAuJE3B,cAAc,CAAC2B,IAAD,CAvJhB;AAAA;AAAA;AAAA;;AAwJNA,YAAAA,IAAI,GAAGxB,QAAQ,CAACD,WAAW,CAAC4B,IAAI,CAAC,OAAD,CAAJ,CAAcwB,IAAf,EAAqB3B,IAArB,CAAZ,CAAf;AAxJM;AAAA;;AAAA;AAAA,kBA0JA,IAAItC,WAAJ,CACJ,uDACA,4DAFI,EAGJ,oBAHI,EAGkB;AAACkD,cAAAA,IAAI,EAAE,kBAAP;AAA2Bd,cAAAA,OAAO,EAAES;AAApC,aAHlB,CA1JA;;AAAA;AAgKRJ,YAAAA,IAAI,CAAC,OAAD,CAAJ,GAAgBH,IAAhB;AACAwB,YAAAA,OAAO,CAACE,GAAR,CAAY,OAAZ,EAAqB,IAArB;;AAjKQ;AAAA,kBAqKP,YAAYnB,GArKL;AAAA;AAAA;AAAA;;AAsKFqB,YAAAA,KAtKE,GAsKMrB,GAAG,CAAC,QAAD,CAtKT;;AAAA,kBAuKLqB,KAAK,KAAK,IAvKL;AAAA;AAAA;AAAA;;AAwKN,mBAAOzB,IAAI,CAAC,QAAD,CAAX;AAxKM;AAAA;;AAAA;AAAA,gBAyKGpC,SAAS,CAAC6D,KAAD,CAzKZ;AAAA;AAAA;AAAA;;AAAA,kBA0KA,IAAIlE,WAAJ,CACJ,wDACA,oCAFI,EAGJ,oBAHI,EAGkB;AAACkD,cAAAA,IAAI,EAAE,uBAAP;AAAgCd,cAAAA,OAAO,EAAES;AAAzC,aAHlB,CA1KA;;AAAA;AAAA,kBA8KE,CAACpC,cAAc,CAACyD,KAAD,CAAf,IAA0B3C,GAAG,CAACwC,cAAJ,CAAmBtB,IAAnB,EAAyB,GAAzB,CA9K5B;AAAA;AAAA;AAAA;;AAAA,kBA+KA,IAAIzC,WAAJ,CACJ,wDACA,mCAFI,EAGJ,oBAHI,EAGkB;AAACkD,cAAAA,IAAI,EAAE,uBAAP;AAAgCd,cAAAA,OAAO,EAAES;AAAzC,aAHlB,CA/KA;;AAAA;AAoLNJ,YAAAA,IAAI,CAAC,QAAD,CAAJ,GAAiB0B,UAAU,CAAC1B,IAAD,EAAOyB,KAAP,EAAc;AAACE,cAAAA,KAAK,EAAE,IAAR;AAAc9B,cAAAA,IAAI,EAAE;AAApB,aAAd,EACzB+B,SADyB,EACdA,SADc,EACHxC,OADG,CAA3B;;AApLM;AAuLRiC,YAAAA,OAAO,CAACE,GAAR,CAAY,QAAZ,EAAsB,IAAtB;;AAvLQ;AAAA,kBA2LP,eAAenB,GA3LR;AAAA;AAAA;AAAA;;AA4LFqB,YAAAA,MA5LE,GA4LMrB,GAAG,CAAC,WAAD,CA5LT;;AAAA,kBA6LLqB,MAAK,KAAK,IA7LL;AAAA;AAAA;AAAA;;AA8LN,mBAAOzB,IAAI,CAAC,WAAD,CAAX;AA9LM;AAAA;;AAAA;AAAA,gBA+LGpC,SAAS,CAAC6D,MAAD,CA/LZ;AAAA;AAAA;AAAA;;AAAA,kBAgMA,IAAIlE,WAAJ,CACJ,2DACA,oCAFI,EAGJ,oBAHI,EAIJ;AAACkD,cAAAA,IAAI,EAAE,0BAAP;AAAmCd,cAAAA,OAAO,EAAES;AAA5C,aAJI,CAhMA;;AAAA;AAsMNJ,YAAAA,IAAI,CAAC,WAAD,CAAJ,GAAoByB,MAAK,CAACI,WAAN,EAApB;;AAtMM;AAwMRR,YAAAA,OAAO,CAACE,GAAR,CAAY,WAAZ,EAAyB,IAAzB;;AAxMQ;AAAA,kBA6MP,gBAAgBnB,GA7MT;AAAA;AAAA;AAAA;;AA8MFqB,YAAAA,OA9ME,GA8MMrB,GAAG,CAAC,YAAD,CA9MT;;AAAA,kBA+MLlB,SAAS,CAACoC,cAAV,KAA6B,aA/MxB;AAAA;AAAA;AAAA;;AAAA,kBAgNA,IAAI/D,WAAJ,CACJ,4DACA2B,SAAS,CAACoC,cAFN,EAGJ,oBAHI,EAIJ;AAACb,cAAAA,IAAI,EAAE,wBAAP;AAAiCd,cAAAA,OAAO,EAAES;AAA1C,aAJI,CAhNA;;AAAA;AAAA,kBAsNL,OAAOqB,OAAP,KAAiB,SAtNZ;AAAA;AAAA;AAAA;;AAAA,kBAuNA,IAAIlE,WAAJ,CACJ,6DADI,EAEJ,oBAFI,EAGJ;AAACkD,cAAAA,IAAI,EAAE,0BAAP;AAAmCd,cAAAA,OAAO,EAAER;AAA5C,aAHI,CAvNA;;AAAA;AA4NRkC,YAAAA,OAAO,CAACE,GAAR,CAAY,YAAZ,EAA0B,IAA1B;;AA5NQ;AA+NV;AACA;AACA;AACAF,YAAAA,OAAO,CAACE,GAAR,CAAY,YAAZ,EAA0BnB,GAAG,CAAC,YAAD,CAAH,IAAqB,KAA/C,EAlOU,CAoOV;;AACA,iBAAU0B,GAAV,IAAiB1B,GAAjB,EAAsB;AACpBtB,cAAAA,GAAG,CAACiD,oBAAJ,CAAyB;AACvB7C,gBAAAA,SAAS,EAAEc,IADY;AAEvBb,gBAAAA,QAAQ,EAAEiB,GAFa;AAGvBW,gBAAAA,IAAI,EAAEe,GAHiB;AAIvBT,gBAAAA,OAAO,EAAPA,OAJuB;AAKvBjC,gBAAAA,OAAO,EAAPA,OALuB;AAMvBE,gBAAAA,iBAAiB,EAAjBA;AANuB,eAAzB;AAQD,aA9OS,CAgPV;;;AACAa,YAAAA,eAAe,CAACe,YAAhB,CAA6BhC,SAA7B,EAAwCc,IAAxC;;AAjPU;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA,6CAoPLA,IApPK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAd;;AAAA;AAAA;AAAA;AAAA;AAuPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAlB,GAAG,CAACiD,oBAAJ,GAA2B,iBAOrB;AAAA,MANJ7C,SAMI,SANJA,SAMI;AAAA,MALJC,QAKI,SALJA,QAKI;AAAA,MAJJ4B,IAII,SAJJA,IAII;AAAA,MAHJM,OAGI,SAHJA,OAGI;AAAA,MAFJjC,OAEI,SAFJA,OAEI;AAAA,oCADJE,iBACI;AAAA,MADJA,iBACI,sCADgB,KAChB;;AACJ,MAAG+B,OAAO,CAACW,GAAR,CAAYjB,IAAZ,CAAH,EAAsB;AACpB;AACA,QAAGM,OAAO,CAACY,GAAR,CAAYlB,IAAZ,CAAH,EAAsB;AACpB;AACD,KAJmB,CAKpB;;;AACA,UAAM,IAAIxD,WAAJ,CACJ,uCADI,EAEJ,wBAFI,EAGJ;AAACkD,MAAAA,IAAI,EAAE,oBAAP;AAA6Bd,MAAAA,OAAO,EAAER,QAAtC;AAAgD4B,MAAAA,IAAI,EAAJA;AAAhD,KAHI,CAAN;AAID,GAXG,CAaJ;;;AACAM,EAAAA,OAAO,CAACE,GAAR,CAAYR,IAAZ,EAAkB,KAAlB,EAdI,CAgBJ;;AACA,MAAIU,KAAJ;;AACA,MAAGtC,QAAQ,CAAC+C,cAAT,CAAwBnB,IAAxB,CAAH,EAAkC;AAChCU,IAAAA,KAAK,GAAGtC,QAAQ,CAAC4B,IAAD,CAAhB;AACD;;AAED,MAAGA,IAAI,KAAK,OAAT,IACArD,SAAS,CAAC+D,KAAD,CADT,IAEAA,KAAK,CAAC,YAAD,CAAL,KAAwB,MAFxB,IAGA3C,GAAG,CAACwC,cAAJ,CAAmBpC,SAAnB,EAA8B,GAA9B,CAHH,EAGuC;AAErC,QAAMiD,UAAS,GAAG,CAAC,YAAD,EAAe,KAAf,EAAsB,YAAtB,CAAlB;;AACA,QAAG9B,MAAM,CAACC,IAAP,CAAYmB,KAAZ,EAAmBW,IAAnB,CAAwB,UAAAC,CAAC;AAAA,aAAI,CAACF,UAAS,CAACG,QAAV,CAAmBD,CAAnB,CAAL;AAAA,KAAzB,CAAH,EAAyD;AACvD,YAAM,IAAI9E,WAAJ,CACJ,wDADI,EAEJ,oBAFI,EAGJ;AAACkD,QAAAA,IAAI,EAAE,sBAAP;AAA+Bd,QAAAA,OAAO,EAAER,QAAxC;AAAkD4B,QAAAA,IAAI,EAAJA;AAAlD,OAHI,CAAN;AAID;AACF,GAZD,MAYO,IAAGjC,GAAG,CAACyD,SAAJ,CAAcxB,IAAd,CAAH,EAAwB;AAC7B,UAAM,IAAIxD,WAAJ,CACJ,wDADI,EAEJ,oBAFI,EAGJ;AAACkD,MAAAA,IAAI,EAAE,sBAAP;AAA+Bd,MAAAA,OAAO,EAAER,QAAxC;AAAkD4B,MAAAA,IAAI,EAAJA;AAAlD,KAHI,CAAN;AAID,GALM,MAKA,IAAGA,IAAI,KAAK,EAAZ,EAAgB;AACrB,UAAM,IAAIxD,WAAJ,CACJ,2DADI,EAEJ,oBAFI,EAGJ;AAACkD,MAAAA,IAAI,EAAE,yBAAP;AAAkCd,MAAAA,OAAO,EAAER;AAA3C,KAHI,CAAN;AAID,GA5CG,CA8CJ;;;AACA,MAAMqD,eAAe,GAAGtD,SAAS,CAAC+B,QAAV,CAAmBgB,GAAnB,CAAuBlB,IAAvB,CAAxB,CA/CI,CAiDJ;;AACA,MAAG7B,SAAS,CAAC+B,QAAV,CAAmBe,GAAnB,CAAuBjB,IAAvB,CAAH,EAAiC;AAC/B7B,IAAAA,SAAS,CAAC+B,QAAV,CAAmBwB,MAAnB,CAA0B1B,IAA1B;AACD,GApDG,CAsDJ;;;AACA,MAAGU,KAAK,KAAK,IAAV,IAAmB/D,SAAS,CAAC+D,KAAD,CAAT,IAAoBA,KAAK,CAAC,KAAD,CAAL,KAAiB,IAA3D,EAAkE;AAChEvC,IAAAA,SAAS,CAAC+B,QAAV,CAAmBM,GAAnB,CAAuBR,IAAvB,EAA6B,IAA7B;AACAM,IAAAA,OAAO,CAACE,GAAR,CAAYR,IAAZ,EAAkB,IAAlB;AACA;AACD,GA3DG,CA6DJ;;;AACA,MAAI2B,UAAU,GAAG,KAAjB;;AACA,MAAG9E,SAAS,CAAC6D,KAAD,CAAZ,EAAqB;AACnBiB,IAAAA,UAAU,GAAG,IAAb;AACAjB,IAAAA,KAAK,GAAG;AAAC,aAAOA;AAAR,KAAR;AACD;;AAED,MAAG,CAAC/D,SAAS,CAAC+D,KAAD,CAAb,EAAsB;AACpB,UAAM,IAAIlE,WAAJ,CACJ,0DACA,qBAFI,EAGJ,oBAHI,EAIJ;AAACkD,MAAAA,IAAI,EAAE,yBAAP;AAAkCd,MAAAA,OAAO,EAAER;AAA3C,KAJI,CAAN;AAKD,GA1EG,CA4EJ;;;AACA,MAAMwD,OAAO,GAAG,EAAhB;AACAzD,EAAAA,SAAS,CAAC+B,QAAV,CAAmBM,GAAnB,CAAuBR,IAAvB,EAA6B4B,OAA7B;AACAA,EAAAA,OAAO,CAACC,OAAR,GAAkB,KAAlB,CA/EI,CAiFJ;;AACA,MAAMT,SAAS,GAAG,CAAC,YAAD,EAAe,KAAf,EAAsB,WAAtB,EAAmC,UAAnC,EAA+C,OAA/C,CAAlB,CAlFI,CAoFJ;;AACA,MAAGrD,GAAG,CAACwC,cAAJ,CAAmBpC,SAAnB,EAA8B,GAA9B,CAAH,EAAuC;AACrCiD,IAAAA,SAAS,CAACU,IAAV,CAAe,UAAf,EAA2B,QAA3B,EAAqC,OAArC,EAA8C,SAA9C,EAAyD,YAAzD;AACD;;AAED,OAAI,IAAMC,EAAV,IAAgBrB,KAAhB,EAAuB;AACrB,QAAG,CAACU,SAAS,CAACG,QAAV,CAAmBQ,EAAnB,CAAJ,EAA4B;AAC1B,YAAM,IAAIvF,WAAJ,CACJ,gEAAgEuF,EAD5D,EAEJ,oBAFI,EAGJ;AAACrC,QAAAA,IAAI,EAAE,yBAAP;AAAkCd,QAAAA,OAAO,EAAER;AAA3C,OAHI,CAAN;AAID;AACF,GAhGG,CAkGJ;AACA;;;AACA,MAAM4D,KAAK,GAAGhC,IAAI,CAACiC,OAAL,CAAa,GAAb,CAAd;AACAL,EAAAA,OAAO,CAACM,aAAR,GAAyBF,KAAK,GAAG,CAAjC;;AAEA,MAAG,cAActB,KAAjB,EAAwB;AACtB,QAAG,SAASA,KAAZ,EAAmB;AACjB,YAAM,IAAIlE,WAAJ,CACJ,iEACA,cAFI,EAEY,oBAFZ,EAGJ;AAACkD,QAAAA,IAAI,EAAE,0BAAP;AAAmCd,QAAAA,OAAO,EAAER;AAA5C,OAHI,CAAN;AAID;;AACD,QAAG,WAAWsC,KAAd,EAAqB;AACnB,YAAM,IAAIlE,WAAJ,CACJ,iEACA,gBAFI,EAEc,oBAFd,EAGJ;AAACkD,QAAAA,IAAI,EAAE,0BAAP;AAAmCd,QAAAA,OAAO,EAAER;AAA5C,OAHI,CAAN;AAID;;AACD,QAAMyD,OAAO,GAAGnB,KAAK,CAAC,UAAD,CAArB;;AACA,QAAG,CAAC7D,SAAS,CAACgF,OAAD,CAAb,EAAwB;AACtB,YAAM,IAAIrF,WAAJ,CACJ,qEADI,EAEJ,oBAFI,EAEkB;AAACkD,QAAAA,IAAI,EAAE,qBAAP;AAA8Bd,QAAAA,OAAO,EAAER;AAAvC,OAFlB,CAAN;AAGD,KAlBqB,CAoBtB;;;AACA,QAAM+D,GAAE,GAAGxB,UAAU,CACnBxC,SADmB,EACR0D,OADQ,EACC;AAACjB,MAAAA,KAAK,EAAE,IAAR;AAAc9B,MAAAA,IAAI,EAAE;AAApB,KADD,EAC6BV,QAD7B,EACuCkC,OADvC,EAEnBjC,OAFmB,CAArB;;AAGA,QAAG,CAACpB,cAAc,CAACkF,GAAD,CAAlB,EAAwB;AACtB,YAAM,IAAI3F,WAAJ,CACJ,kEACA,0CAFI,EAGJ,oBAHI,EAGkB;AAACkD,QAAAA,IAAI,EAAE,qBAAP;AAA8Bd,QAAAA,OAAO,EAAER;AAAvC,OAHlB,CAAN;AAID;;AACDwD,IAAAA,OAAO,CAAC,KAAD,CAAP,GAAiBO,GAAjB;AACAP,IAAAA,OAAO,CAACC,OAAR,GAAkB,IAAlB;AACD,GAhCD,MAgCO,IAAG,SAASnB,KAAZ,EAAmB;AACxB,QAAIyB,IAAE,GAAGzB,KAAK,CAAC,KAAD,CAAd;;AACA,QAAG,CAAC7D,SAAS,CAACsF,IAAD,CAAb,EAAmB;AACjB,YAAM,IAAI3F,WAAJ,CACJ,mEACA,yBAFI,EAGJ,oBAHI,EAGkB;AAACkD,QAAAA,IAAI,EAAE,qBAAP;AAA8Bd,QAAAA,OAAO,EAAER;AAAvC,OAHlB,CAAN;AAID;;AACD,QAAG+D,IAAE,KAAKnC,IAAV,EAAgB;AACd;AACAmC,MAAAA,IAAE,GAAGxB,UAAU,CACbxC,SADa,EACFgE,IADE,EACE;AAACvB,QAAAA,KAAK,EAAE,IAAR;AAAc9B,QAAAA,IAAI,EAAE;AAApB,OADF,EAC8BV,QAD9B,EACwCkC,OADxC,EACiDjC,OADjD,CAAf;;AAEA,UAAG,CAACpB,cAAc,CAACkF,IAAD,CAAf,IAAuB,CAACpE,GAAG,CAACyD,SAAJ,CAAcW,IAAd,CAA3B,EAA8C;AAC5C,cAAM,IAAI3F,WAAJ,CACJ,6DACA,sDAFI,EAGJ,oBAHI,EAIJ;AAACkD,UAAAA,IAAI,EAAE,qBAAP;AAA8Bd,UAAAA,OAAO,EAAER;AAAvC,SAJI,CAAN;AAKD;;AACDwD,MAAAA,OAAO,CAAC,KAAD,CAAP,GAAiBO,IAAjB,CAXc,CAYd;;AACAP,MAAAA,OAAO,CAACQ,OAAR,GAAmBT,UAAU,IAC3B,CAACC,OAAO,CAACM,aADQ,IAEjBC,IAAE,CAACE,KAAH,CAAS,gBAAT,CAFF;AAGD;AACF;;AAED,MAAG,EAAE,SAAST,OAAX,CAAH,EAAwB;AACtB;AACA,QAAGA,OAAO,CAACM,aAAX,EAA0B;AACxB,UAAMI,MAAM,GAAGtC,IAAI,CAACuC,MAAL,CAAY,CAAZ,EAAeP,KAAf,CAAf;;AACA,UAAG5D,QAAQ,CAAC+C,cAAT,CAAwBmB,MAAxB,CAAH,EAAoC;AAClC;AACAvE,QAAAA,GAAG,CAACiD,oBAAJ,CAAyB;AACvB7C,UAAAA,SAAS,EAATA,SADuB;AACZC,UAAAA,QAAQ,EAARA,QADY;AACF4B,UAAAA,IAAI,EAAEsC,MADJ;AACYhC,UAAAA,OAAO,EAAPA,OADZ;AACqBjC,UAAAA,OAAO,EAAPA;AADrB,SAAzB;AAGD;;AAED,UAAGF,SAAS,CAAC+B,QAAV,CAAmBe,GAAnB,CAAuBqB,MAAvB,CAAH,EAAmC;AACjC;AACA,YAAME,MAAM,GAAGxC,IAAI,CAACuC,MAAL,CAAYP,KAAK,GAAG,CAApB,CAAf;AACAJ,QAAAA,OAAO,CAAC,KAAD,CAAP,GAAiBzD,SAAS,CAAC+B,QAAV,CAAmBgB,GAAnB,CAAuBoB,MAAvB,EAA+B,KAA/B,IAAwCE,MAAzD;AACD,OAJD,MAIO;AACL;AACAZ,QAAAA,OAAO,CAAC,KAAD,CAAP,GAAiB5B,IAAjB;AACD;AACF,KAjBD,MAiBO,IAAGA,IAAI,IAAI,OAAX,EAAoB;AACzB;AACA4B,MAAAA,OAAO,CAAC,KAAD,CAAP,GAAiB5B,IAAjB;AACD,KAHM,MAGA;AACL;AACA,UAAG,EAAE,YAAY7B,SAAd,CAAH,EAA6B;AAC3B,cAAM,IAAI3B,WAAJ,CACJ,4DADI,EAEJ,oBAFI,EAGJ;AAACkD,UAAAA,IAAI,EAAE,qBAAP;AAA8Bd,UAAAA,OAAO,EAAER,QAAvC;AAAiD4B,UAAAA,IAAI,EAAJA;AAAjD,SAHI,CAAN;AAID,OAPI,CAQL;;;AACA4B,MAAAA,OAAO,CAAC,KAAD,CAAP,GAAiBzD,SAAS,CAAC,QAAD,CAAT,GAAsB6B,IAAvC;AACD;AACF,GAnMG,CAqMJ;;;AACA,MAAGU,KAAK,CAAC,YAAD,CAAL,KAAwB,IAAxB,IACAJ,OAAO,CAACY,GAAR,CAAY,YAAZ,MAA8B,IAA9B,IAAsCR,KAAK,CAAC,YAAD,CAAL,KAAwB,KADjE,EACyE;AACvEvC,IAAAA,SAAS,CAACqB,SAAV,CAAoBQ,IAApB,IAA4B,IAA5B;AACA4B,IAAAA,OAAO,CAACpC,SAAR,GAAoB,IAApB;AACD,GA1MG,CA4MJ;;;AACAc,EAAAA,OAAO,CAACE,GAAR,CAAYR,IAAZ,EAAkB,IAAlB;;AAEA,MAAG,WAAWU,KAAd,EAAqB;AACnB,QAAI+B,IAAI,GAAG/B,KAAK,CAAC,OAAD,CAAhB;;AACA,QAAG,CAAC7D,SAAS,CAAC4F,IAAD,CAAb,EAAqB;AACnB,YAAM,IAAIjG,WAAJ,CACJ,mEADI,EAEJ,oBAFI,EAGJ;AAACkD,QAAAA,IAAI,EAAE,sBAAP;AAA+Bd,QAAAA,OAAO,EAAER;AAAxC,OAHI,CAAN;AAID;;AAED,QAAIqE,IAAI,KAAK,OAAT,IAAoBA,IAAI,KAAK,OAAjC,EAA2C;AACzC,UAAG1E,GAAG,CAACwC,cAAJ,CAAmBpC,SAAnB,EAA8B,GAA9B,CAAH,EAAuC;AACrC,cAAM,IAAI3B,WAAJ,CACJ,6EACIiG,IADJ,4BADI,EAGJ,oBAHI,EAIJ;AAAC/C,UAAAA,IAAI,EAAE,sBAAP;AAA+Bd,UAAAA,OAAO,EAAER;AAAxC,SAJI,CAAN;AAKD;AACF,KARD,MAQO,IAAGqE,IAAI,KAAK,KAAT,IAAkBA,IAAI,KAAK,QAA9B,EAAwC;AAC7C;AACAA,MAAAA,IAAI,GAAG9B,UAAU,CACfxC,SADe,EACJsE,IADI,EACE;AAAC7B,QAAAA,KAAK,EAAE,IAAR;AAAc9B,QAAAA,IAAI,EAAE;AAApB,OADF,EAC8BV,QAD9B,EACwCkC,OADxC,EAEfjC,OAFe,CAAjB;;AAGA,UAAG,CAACpB,cAAc,CAACwF,IAAD,CAAlB,EAA0B;AACxB,cAAM,IAAIjG,WAAJ,CACJ,gEACA,eAFI,EAGJ,oBAHI,EAIJ;AAACkD,UAAAA,IAAI,EAAE,sBAAP;AAA+Bd,UAAAA,OAAO,EAAER;AAAxC,SAJI,CAAN;AAKD;;AACD,UAAGqE,IAAI,CAACR,OAAL,CAAa,IAAb,MAAuB,CAA1B,EAA6B;AAC3B,cAAM,IAAIzF,WAAJ,CACJ,qEACA,8BAFI,EAGJ,oBAHI,EAIJ;AAACkD,UAAAA,IAAI,EAAE,sBAAP;AAA+Bd,UAAAA,OAAO,EAAER;AAAxC,SAJI,CAAN;AAKD;AACF,KApCkB,CAsCnB;;;AACAwD,IAAAA,OAAO,CAAC,OAAD,CAAP,GAAmBa,IAAnB;AACD;;AAED,MAAG,gBAAgB/B,KAAnB,EAA0B;AACxB;AACA,QAAMgC,SAAS,GAAG7F,SAAS,CAAC6D,KAAK,CAAC,YAAD,CAAN,CAAT,GAChB,CAACA,KAAK,CAAC,YAAD,CAAN,CADgB,GACSA,KAAK,CAAC,YAAD,CAAL,IAAuB,EADlD;AAEA,QAAMiC,eAAe,GAAG,CAAC,OAAD,EAAU,MAAV,EAAkB,QAAlB,EAA4B,WAA5B,CAAxB;AACA,QAAIC,OAAO,GAAG,IAAd;AACA,QAAMC,MAAM,GAAGH,SAAS,CAACnB,QAAV,CAAmB,MAAnB,CAAf,CANwB,CAQxB;;AACA,QAAGxD,GAAG,CAACwC,cAAJ,CAAmBpC,SAAnB,EAA8B,GAA9B,CAAH,EAAuC;AACrCwE,MAAAA,eAAe,CAACb,IAAhB,CAAqB,QAArB,EAA+B,KAA/B,EAAsC,OAAtC,EADqC,CAGrC;;AACA,UAAGY,SAAS,CAACnB,QAAV,CAAmB,OAAnB,CAAH,EAAgC;AAC9B,YAAGmB,SAAS,CAACjE,MAAV,KAAqB,CAAxB,EAA2B;AACzB,gBAAM,IAAIjC,WAAJ,CACJ,iEACA,sBAFI,EAGJ,oBAHI,EAIJ;AAACkD,YAAAA,IAAI,EAAE,2BAAP;AAAoCd,YAAAA,OAAO,EAAER;AAA7C,WAJI,CAAN;AAKD;AACF,OARD,MAQO,IAAGsE,SAAS,CAACnB,QAAV,CAAmB,QAAnB,CAAH,EAAiC;AACtC,YAAGmB,SAAS,CAACrB,IAAV,CAAe,UAAAN,GAAG;AAAA,iBACnBA,GAAG,KAAK,QAAR,IAAoBA,GAAG,KAAK,KAA5B,IAAqCA,GAAG,KAAK,QAA7C,IACAA,GAAG,KAAK,MAFW;AAAA,SAAlB,CAAH,EAEmB;AACjB,gBAAM,IAAIvE,WAAJ,CACJ,kEACA,uDAFI,EAGJ,oBAHI,EAIJ;AAACkD,YAAAA,IAAI,EAAE,2BAAP;AAAoCd,YAAAA,OAAO,EAAER;AAA7C,WAJI,CAAN;AAKD;AACF,OAVM,MAUA;AACL;AACAwE,QAAAA,OAAO,IAAIF,SAAS,CAACjE,MAAV,KAAqBoE,MAAM,GAAG,CAAH,GAAO,CAAlC,CAAX;AACD;;AAED,UAAGH,SAAS,CAACnB,QAAV,CAAmB,OAAnB,CAAH,EAAgC;AAC9B;AACA;AACAK,QAAAA,OAAO,CAAC,OAAD,CAAP,GAAmBA,OAAO,CAAC,OAAD,CAAP,IAAoB,KAAvC,CAH8B,CAK9B;;AACA,YAAG,CAAC,CAAC,KAAD,EAAQ,QAAR,EAAkBL,QAAlB,CAA2BK,OAAO,CAAC,OAAD,CAAlC,CAAJ,EAAkD;AAChD,gBAAM,IAAIpF,WAAJ,CACJ,mEACA,gBAFI,EAGJ,oBAHI,EAIJ;AAACkD,YAAAA,IAAI,EAAE,sBAAP;AAA+Bd,YAAAA,OAAO,EAAER;AAAxC,WAJI,CAAN;AAKD;AACF;AACF,KAzCD,MAyCO;AACL;AACA;AACAwE,MAAAA,OAAO,IAAI,CAACnG,QAAQ,CAACiE,KAAK,CAAC,YAAD,CAAN,CAApB,CAHK,CAKL;;AACAkC,MAAAA,OAAO,IAAIF,SAAS,CAACjE,MAAV,IAAoB,CAA/B;AACD,KAzDuB,CA2DxB;;;AACAmE,IAAAA,OAAO,IAAIF,SAAS,CAACI,KAAV,CAAgB,UAAAC,CAAC;AAAA,aAAIJ,eAAe,CAACpB,QAAhB,CAAyBwB,CAAzB,CAAJ;AAAA,KAAjB,CAAX,CA5DwB,CA8DxB;;AACAH,IAAAA,OAAO,IAAI,EAAEC,MAAM,IAAIH,SAAS,CAACnB,QAAV,CAAmB,OAAnB,CAAZ,CAAX;;AAEA,QAAG,CAACqB,OAAJ,EAAa;AACX,YAAM,IAAIpG,WAAJ,CACJ,+DACA,wBADA,GAC2BmG,eAAe,CAACK,IAAhB,CAAqB,IAArB,CAFvB,EAGJ,oBAHI,EAIJ;AAACtD,QAAAA,IAAI,EAAE,2BAAP;AAAoCd,QAAAA,OAAO,EAAER;AAA7C,OAJI,CAAN;AAKD;;AAED,QAAGwD,OAAO,CAACC,OAAR,IACD,CAACa,SAAS,CAACI,KAAV,CAAgB,UAAAC,CAAC;AAAA,aAAI,CAAC,QAAD,EAAW,MAAX,EAAmBxB,QAAnB,CAA4BwB,CAA5B,CAAJ;AAAA,KAAjB,CADH,EACyD;AACvD,YAAM,IAAIvG,WAAJ,CACJ,sEACA,yCAFI,EAEuC,oBAFvC,EAGJ;AAACkD,QAAAA,IAAI,EAAE,0BAAP;AAAmCd,QAAAA,OAAO,EAAER;AAA5C,OAHI,CAAN;AAID,KA/EuB,CAiFxB;;;AACAwD,IAAAA,OAAO,CAAC,YAAD,CAAP,GAAwBc,SAAxB;AACD,GA5UG,CA8UJ;;;AACA,MAAG,YAAYhC,KAAf,EAAsB;AACpB,QAAG,EAAE,gBAAgBA,KAAlB,KAA4B,CAACkB,OAAO,CAAC,YAAD,CAAP,CAAsBL,QAAtB,CAA+B,QAA/B,CAAhC,EAA0E;AACxE,YAAM,IAAI/E,WAAJ,CACJ,8EACIkE,KAAK,CAAC,QAAD,CADT,0BACiCV,IADjC,QADI,EAEuC,oBAFvC,EAGJ;AAACN,QAAAA,IAAI,EAAE,yBAAP;AAAkCd,QAAAA,OAAO,EAAER;AAA3C,OAHI,CAAN;AAID;;AACD,QAAG,CAACvB,SAAS,CAAC6D,KAAK,CAAC,QAAD,CAAN,CAAV,IAA+BA,KAAK,CAAC,QAAD,CAAL,CAAgBuB,OAAhB,CAAwB,GAAxB,MAAiC,CAAnE,EAAsE;AACpE,YAAM,IAAIzF,WAAJ,CACJ,uEACIkE,KAAK,CAAC,QAAD,CADT,0BACiCV,IADjC,QADI,EAEuC,oBAFvC,EAGJ;AAACN,QAAAA,IAAI,EAAE,yBAAP;AAAkCd,QAAAA,OAAO,EAAER;AAA3C,OAHI,CAAN;AAID;;AACDwD,IAAAA,OAAO,CAAC,QAAD,CAAP,GAAoBlB,KAAK,CAAC,QAAD,CAAzB;AACD,GA7VG,CA+VJ;;;AACA,MAAG,cAAcA,KAAjB,EAAwB;AACtBkB,IAAAA,OAAO,CAAC,UAAD,CAAP,GAAsBlB,KAAK,CAAC,UAAD,CAA3B;AACD;;AAED,MAAG,eAAeA,KAAf,IAAwB,EAAE,WAAWA,KAAb,CAA3B,EAAgD;AAC9C,QAAIuC,QAAQ,GAAGvC,KAAK,CAAC,WAAD,CAApB;;AACA,QAAGuC,QAAQ,KAAK,IAAb,IAAqB,CAACpG,SAAS,CAACoG,QAAD,CAAlC,EAA8C;AAC5C,YAAM,IAAIzG,WAAJ,CACJ,8DACA,mBAFI,EAEiB,oBAFjB,EAGJ;AAACkD,QAAAA,IAAI,EAAE,0BAAP;AAAmCd,QAAAA,OAAO,EAAER;AAA5C,OAHI,CAAN;AAID,KAP6C,CAS9C;;;AACA,QAAG6E,QAAQ,KAAK,IAAhB,EAAsB;AACpBA,MAAAA,QAAQ,GAAGA,QAAQ,CAACnC,WAAT,EAAX;AACD;;AACDc,IAAAA,OAAO,CAAC,WAAD,CAAP,GAAuBqB,QAAvB;AACD,GAlXG,CAoXJ;;;AACA,MAAG,aAAavC,KAAhB,EAAuB;AACrB,QAAGkB,OAAO,CAACM,aAAX,EAA0B;AACxB,YAAM,IAAI1F,WAAJ,CACJ,qEADI,EAEJ,oBAFI,EAGJ;AAACkD,QAAAA,IAAI,EAAE,yBAAP;AAAkCd,QAAAA,OAAO,EAAER;AAA3C,OAHI,CAAN;AAID;;AACD,QAAG,OAAOsC,KAAK,CAAC,SAAD,CAAZ,KAA4B,SAA/B,EAA0C;AACxCkB,MAAAA,OAAO,CAACQ,OAAR,GAAkB1B,KAAK,CAAC,SAAD,CAAL,KAAqB,IAAvC;AACD,KAFD,MAEO;AACL,YAAM,IAAIlE,WAAJ,CACJ,oEADI,EAEJ,oBAFI,EAGJ;AAACkD,QAAAA,IAAI,EAAE,uBAAP;AAAgCd,QAAAA,OAAO,EAAER;AAAzC,OAHI,CAAN;AAID;AACF;;AAED,MAAG,WAAWsC,KAAd,EAAqB;AACnB,QAAMwC,IAAI,GAAGxC,KAAK,CAAC,OAAD,CAAlB;;AACA,QAAG,CAAC7D,SAAS,CAACqG,IAAD,CAAV,IAAqBA,IAAI,KAAK,OAAT,IAAoBA,IAAI,CAACjB,OAAL,CAAa,GAAb,MAAsB,CAAlE,EAAsE;AACpE,YAAM,IAAIzF,WAAJ,CACJ,0DACA,mDAFI,EAGJ,oBAHI,EAIJ;AAACkD,QAAAA,IAAI,EAAE,qBAAP;AAA8Bd,QAAAA,OAAO,EAAER;AAAvC,OAJI,CAAN;AAKD;;AACDwD,IAAAA,OAAO,CAAC,OAAD,CAAP,GAAmBsB,IAAnB;AACD,GAhZG,CAkZJ;;;AACA,MAAMf,EAAE,GAAGP,OAAO,CAAC,KAAD,CAAlB;;AACA,MAAGO,EAAE,KAAK,UAAP,IAAqBA,EAAE,KAAK,WAA/B,EAA4C;AAC1C,UAAM,IAAI3F,WAAJ,CACJ,mEADI,EAEJ,oBAFI,EAEkB;AAACkD,MAAAA,IAAI,EAAE,uBAAP;AAAgCd,MAAAA,OAAO,EAAER;AAAzC,KAFlB,CAAN;AAGD,GAxZG,CA0ZJ;;;AACA,MAAGqD,eAAe,IAAIA,eAAe,CAACjC,SAAnC,IAAgD,CAACjB,iBAApD,EAAuE;AACrE;AACA;AACAJ,IAAAA,SAAS,CAACqB,SAAV,CAAoBQ,IAApB,IAA4B,IAA5B;AACA4B,IAAAA,OAAO,CAACpC,SAAR,GAAoB,IAApB;;AACA,QAAG,CAAC2D,YAAY,CAAC1B,eAAD,EAAkBG,OAAlB,CAAhB,EAA4C;AAC1C,UAAMnC,aAAa,GAAIpB,OAAO,IAAIA,OAAO,CAACoB,aAApB,IAAsC,OAA5D;;AACA,UAAGA,aAAa,KAAK,OAArB,EAA8B;AAC5B,cAAM,IAAIjD,WAAJ,CACJ,6DADI,EAEJ,oBAFI,EAGJ;AAACkD,UAAAA,IAAI,EAAE,6BAAP;AAAsCd,UAAAA,OAAO,EAAER,QAA/C;AAAyD4B,UAAAA,IAAI,EAAJA;AAAzD,SAHI,CAAN;AAID,OALD,MAKO,IAAGP,aAAa,KAAK,MAArB,EAA6B;AAClC;AACAE,QAAAA,OAAO,CAACC,IAAR,CAAa,sCAAb,EAAqD;AAACI,UAAAA,IAAI,EAAJA;AAAD,SAArD;AACA;AACD;;AACD,YAAM,IAAIxD,WAAJ,CACJ,wBADI,EAEJ,oBAFI,EAGJ;AAACkD,QAAAA,IAAI,EAAE,wBAAP;AAAiCd,QAAAA,OAAO,EAAER,QAA1C;AAAoD4B,QAAAA,IAAI,EAAJA,IAApD;AACEP,QAAAA,aAAa,EAAbA;AADF,OAHI,CAAN;AAKD;AACF;AACF,CA1bD;AA4bA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA1B,GAAG,CAACqF,SAAJ,GAAgB,UAACjF,SAAD,EAAYuC,KAAZ,EAAmB2C,UAAnB,EAA+BhF,OAA/B,EAA2C;AACzD,SAAOsC,UAAU,CAACxC,SAAD,EAAYuC,KAAZ,EAAmB2C,UAAnB,EAA+BxC,SAA/B,EAA0CA,SAA1C,EACfxC,OADe,CAAjB;AAED,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASsC,UAAT,CAAoBxC,SAApB,EAA+BuC,KAA/B,EAAsC2C,UAAtC,EAAkDjF,QAAlD,EAA4DkC,OAA5D,EAAqEjC,OAArE,EAA8E;AAC5E;AACA,MAAGqC,KAAK,KAAK,IAAV,IAAkB,CAAC7D,SAAS,CAAC6D,KAAD,CAA5B,IAAuC3C,GAAG,CAACyD,SAAJ,CAAcd,KAAd,CAA1C,EAAgE;AAC9D,WAAOA,KAAP;AACD,GAJ2E,CAM5E;;;AACA,MAAGtC,QAAQ,IAAIA,QAAQ,CAAC+C,cAAT,CAAwBT,KAAxB,CAAZ,IACDJ,OAAO,CAACY,GAAR,CAAYR,KAAZ,MAAuB,IADzB,EAC+B;AAC7B3C,IAAAA,GAAG,CAACiD,oBAAJ,CAAyB;AACvB7C,MAAAA,SAAS,EAATA,SADuB;AACZC,MAAAA,QAAQ,EAARA,QADY;AACF4B,MAAAA,IAAI,EAAEU,KADJ;AACWJ,MAAAA,OAAO,EAAPA,OADX;AACoBjC,MAAAA,OAAO,EAAPA;AADpB,KAAzB;AAGD;;AAEDgF,EAAAA,UAAU,GAAGA,UAAU,IAAI,EAA3B;;AACA,MAAGA,UAAU,CAACzC,KAAd,EAAqB;AACnB,QAAMgB,OAAO,GAAGzD,SAAS,CAAC+B,QAAV,CAAmBgB,GAAnB,CAAuBR,KAAvB,CAAhB,CADmB,CAGnB;;AACA,QAAGkB,OAAO,KAAK,IAAf,EAAqB;AACnB,aAAO,IAAP;AACD;;AAED,QAAGA,OAAH,EAAY;AACV;AACA,aAAOA,OAAO,CAAC,KAAD,CAAd;AACD;AACF,GA3B2E,CA6B5E;;;AACA,MAAMI,KAAK,GAAGtB,KAAK,CAACuB,OAAN,CAAc,GAAd,CAAd;;AACA,MAAGD,KAAK,GAAG,CAAX,EAAc;AACZ,QAAMM,MAAM,GAAG5B,KAAK,CAAC6B,MAAN,CAAa,CAAb,EAAgBP,KAAhB,CAAf;AACA,QAAMQ,MAAM,GAAG9B,KAAK,CAAC6B,MAAN,CAAaP,KAAK,GAAG,CAArB,CAAf,CAFY,CAIZ;AACA;;AACA,QAAGM,MAAM,KAAK,GAAX,IAAkBE,MAAM,CAACP,OAAP,CAAe,IAAf,MAAyB,CAA9C,EAAiD;AAC/C,aAAOvB,KAAP;AACD,KARW,CAUZ;;;AACA,QAAGtC,QAAQ,IAAIA,QAAQ,CAAC+C,cAAT,CAAwBmB,MAAxB,CAAf,EAAgD;AAC9CvE,MAAAA,GAAG,CAACiD,oBAAJ,CAAyB;AACvB7C,QAAAA,SAAS,EAATA,SADuB;AACZC,QAAAA,QAAQ,EAARA,QADY;AACF4B,QAAAA,IAAI,EAAEsC,MADJ;AACYhC,QAAAA,OAAO,EAAPA,OADZ;AACqBjC,QAAAA,OAAO,EAAPA;AADrB,OAAzB;AAGD,KAfW,CAiBZ;;;AACA,QAAMuD,QAAO,GAAGzD,SAAS,CAAC+B,QAAV,CAAmBgB,GAAnB,CAAuBoB,MAAvB,CAAhB;;AACA,QAAGV,QAAO,IAAIA,QAAO,CAACQ,OAAtB,EAA+B;AAC7B,aAAOR,QAAO,CAAC,KAAD,CAAP,GAAiBY,MAAxB;AACD,KArBW,CAuBZ;;;AACA,QAAGvF,cAAc,CAACyD,KAAD,CAAjB,EAA0B;AACxB,aAAOA,KAAP;AACD;AACF,GA1D2E,CA4D5E;;;AACA,MAAG2C,UAAU,CAACzC,KAAX,IAAoB,YAAYzC,SAAnC,EAA8C;AAC5C,WAAOA,SAAS,CAAC,QAAD,CAAT,GAAsBuC,KAA7B;AACD,GA/D2E,CAiE5E;;;AACA,MAAG2C,UAAU,CAACvE,IAAd,EAAoB;AAClB,WAAOzB,WAAW,CAACc,SAAS,CAAC,OAAD,CAAV,EAAqBuC,KAArB,CAAlB;AACD;;AAED,SAAOA,KAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA3C,GAAG,CAAC+B,iBAAJ,GAAwB,UAAAzB,OAAO,EAAI;AACjC,MAAMS,IAAI,GAAGxB,QAAQ,CAACe,OAAO,CAACS,IAAR,IAAgB,EAAjB,CAArB;AACA,MAAMiC,GAAG,GAAGuC,IAAI,CAACC,SAAL,CAAe;AAACzE,IAAAA,IAAI,EAAJA,IAAD;AAAOyB,IAAAA,cAAc,EAAElC,OAAO,CAACkC;AAA/B,GAAf,CAAZ;AACA,MAAMiD,MAAM,GAAG5F,qBAAqB,CAACsD,GAAtB,CAA0BH,GAA1B,CAAf;;AACA,MAAGyC,MAAH,EAAW;AACT,WAAOA,MAAP;AACD;;AAED,MAAMC,cAAc,GAAG;AACrB,aAAS3E,IADY;AAErByB,IAAAA,cAAc,EAAElC,OAAO,CAACkC,cAFH;AAGrBL,IAAAA,QAAQ,EAAE,IAAIrC,GAAJ,EAHW;AAIrB6F,IAAAA,OAAO,EAAE,IAJY;AAKrBC,IAAAA,UAAU,EAAEC,qBALS;AAMrBzE,IAAAA,KAAK,EAAE0E,mBANc;AAOrBC,IAAAA,uBAAuB,EAAEC,wBAPJ;AAQrBvE,IAAAA,SAAS,EAAE;AARU,GAAvB,CARiC,CAkBjC;;AACA,MAAG5B,qBAAqB,CAACoG,IAAtB,KAA+BlG,8BAAlC,EAAkE;AAChE;AACA;AACAF,IAAAA,qBAAqB,CAACqG,KAAtB;AACD;;AACDrG,EAAAA,qBAAqB,CAAC4C,GAAtB,CAA0BO,GAA1B,EAA+B0C,cAA/B;AACA,SAAOA,cAAP;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,WAASG,qBAAT,GAAiC;AAC/B,QAAMzF,SAAS,GAAG,IAAlB,CAD+B,CAG/B;;AACA,QAAGA,SAAS,CAACuF,OAAb,EAAsB;AACpB,aAAOvF,SAAS,CAACuF,OAAjB;AACD;;AACD,QAAMA,OAAO,GAAGvF,SAAS,CAACuF,OAAV,GAAoB,EAApC,CAP+B,CAS/B;;AACA,QAAMQ,YAAY,GAAG/F,SAAS,CAAC+F,YAAV,GAAyB,EAA9C;AACA,QAAMC,WAAW,GAAG,EAApB,CAX+B,CAa/B;;AACA,QAAMC,eAAe,GAAGjG,SAAS,CAAC,WAAD,CAAT,IAA0B,OAAlD,CAd+B,CAgB/B;AACA;;AACA,QAAM+B,QAAQ,GAAG/B,SAAS,CAAC+B,QAA3B;;AACA,QAAMmE,KAAK,GAAG,mBAAInE,QAAQ,CAACX,IAAT,EAAJ,EAAqB+E,IAArB,CAA0B5G,qBAA1B,CAAd;;AAnB+B,gDAoBb2G,KApBa;AAAA;;AAAA;AAoB/B,6DAAyB;AAAA,YAAfrE,IAAe;AACvB,YAAM4B,OAAO,GAAG1B,QAAQ,CAACgB,GAAT,CAAalB,IAAb,CAAhB;;AACA,YAAG4B,OAAO,KAAK,IAAf,EAAqB;AACnB;AACD;;AAED,YAAIc,SAAS,GAAGd,OAAO,CAAC,YAAD,CAAP,IAAyB,OAAzC;AACAc,QAAAA,SAAS,GAAG,GAAG6B,MAAH,CAAU7B,SAAV,EAAqB4B,IAArB,GAA4BtB,IAA5B,CAAiC,EAAjC,CAAZ,CAPuB,CASvB;;AACA,YAAMwB,GAAG,GAAGhH,QAAQ,CAACoE,OAAO,CAAC,KAAD,CAAR,CAApB;;AAVuB,oDAWN4C,GAXM;AAAA;;AAAA;AAWvB,iEAAsB;AAAA,gBAAZC,GAAY;AACpB,gBAAIC,KAAK,GAAGhB,OAAO,CAACe,GAAD,CAAnB;AACA,gBAAMjD,SAAS,GAAGzD,GAAG,CAACyD,SAAJ,CAAciD,GAAd,CAAlB;;AAEA,gBAAG,CAACC,KAAJ,EAAW;AACT;AACAhB,cAAAA,OAAO,CAACe,GAAD,CAAP,GAAeC,KAAK,GAAG,EAAvB;;AAEA,kBAAG,CAAClD,SAAD,IAAc,CAACI,OAAO,CAACM,aAA1B,EAAyC;AACvC;AACAiC,gBAAAA,WAAW,CAACM,GAAD,CAAX,GAAmB,CAACzE,IAAD,CAAnB;AACA,oBAAM2E,cAAc,GAAG;AAACF,kBAAAA,GAAG,EAAHA,GAAD;AAAMJ,kBAAAA,KAAK,EAAEF,WAAW,CAACM,GAAD;AAAxB,iBAAvB;;AACA,oBAAGA,GAAG,CAAC,CAAD,CAAH,IAAUP,YAAb,EAA2B;AACzBA,kBAAAA,YAAY,CAACO,GAAG,CAAC,CAAD,CAAJ,CAAZ,CAAqB3C,IAArB,CAA0B6C,cAA1B;AACD,iBAFD,MAEO;AACLT,kBAAAA,YAAY,CAACO,GAAG,CAAC,CAAD,CAAJ,CAAZ,GAAuB,CAACE,cAAD,CAAvB;AACD;AACF;AACF,aAdD,MAcO,IAAG,CAACnD,SAAD,IAAc,CAACI,OAAO,CAACM,aAA1B,EAAyC;AAC9C;AACAiC,cAAAA,WAAW,CAACM,GAAD,CAAX,CAAiB3C,IAAjB,CAAsB9B,IAAtB;AACD,aArBmB,CAuBpB;;;AACA,gBAAG,CAAC0E,KAAK,CAAChC,SAAD,CAAT,EAAsB;AACpBgC,cAAAA,KAAK,CAAChC,SAAD,CAAL,GAAmB;AACjB,6BAAa,EADI;AAEjB,yBAAS,EAFQ;AAGjB,wBAAQ;AAHS,eAAnB;AAKD;;AACDgC,YAAAA,KAAK,GAAGA,KAAK,CAAChC,SAAD,CAAb;;AACAkC,YAAAA,iBAAiB,CAAC5E,IAAD,EAAO0E,KAAK,CAAC,MAAD,CAAZ,EAAsB,OAAtB,CAAjB;;AAEA,gBAAG9C,OAAO,CAACC,OAAX,EAAoB;AAClB;AACA+C,cAAAA,iBAAiB,CAAC5E,IAAD,EAAO0E,KAAK,CAAC,OAAD,CAAZ,EAAuB,UAAvB,CAAjB;AACD,aAHD,MAGO,IAAG9C,OAAO,CAAC,OAAD,CAAP,KAAqB,OAAxB,EAAiC;AACtCgD,cAAAA,iBAAiB,CAAC5E,IAAD,EAAO0E,KAAK,CAAC,MAAD,CAAZ,EAAsB,OAAtB,CAAjB;;AACAE,cAAAA,iBAAiB,CAAC5E,IAAD,EAAO0E,KAAK,CAAC,WAAD,CAAZ,EAA2B,OAA3B,CAAjB;;AACAE,cAAAA,iBAAiB,CAAC5E,IAAD,EAAO0E,KAAK,CAAC,OAAD,CAAZ,EAAuB,OAAvB,CAAjB;AACD,aAJM,MAIA,IAAG,WAAW9C,OAAd,EAAuB;AAC5B;AACAgD,cAAAA,iBAAiB,CAAC5E,IAAD,EAAO0E,KAAK,CAAC,OAAD,CAAZ,EAAuB9C,OAAO,CAAC,OAAD,CAA9B,CAAjB;AACD,aAHM,MAGA,IAAG,eAAeA,OAAlB,EAA2B;AAChC;AACA,kBAAMqB,QAAQ,GAAGrB,OAAO,CAAC,WAAD,CAAP,IAAwB,OAAzC;;AACAgD,cAAAA,iBAAiB,CAAC5E,IAAD,EAAO0E,KAAK,CAAC,WAAD,CAAZ,EAA2BzB,QAA3B,CAAjB;AACD,aAJM,MAIA;AACL;AACA;AACA;AACA2B,cAAAA,iBAAiB,CAAC5E,IAAD,EAAO0E,KAAK,CAAC,WAAD,CAAZ,EAA2BN,eAA3B,CAAjB,CAJK,CAML;;;AACAQ,cAAAA,iBAAiB,CAAC5E,IAAD,EAAO0E,KAAK,CAAC,OAAD,CAAZ,EAAuB,OAAvB,CAAjB;;AACAE,cAAAA,iBAAiB,CAAC5E,IAAD,EAAO0E,KAAK,CAAC,WAAD,CAAZ,EAA2B,OAA3B,CAAjB;AACD;AACF;AArEsB;AAAA;AAAA;AAAA;AAAA;AAsExB,OA1F8B,CA4F/B;;AA5F+B;AAAA;AAAA;AAAA;AAAA;;AA6F/B,SAAI,IAAM3D,IAAV,IAAiBmD,YAAjB,EAA+B;AAC7BW,MAAAA,YAAY,CAACX,YAAD,EAAenD,IAAf,EAAoB,CAApB,CAAZ;AACD;;AAED,WAAO2C,OAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASmB,YAAT,CAAsBC,MAAtB,EAA8B/D,GAA9B,EAAmCgE,GAAnC,EAAwC;AACtC,QAAMhF,OAAO,GAAG+E,MAAM,CAAC/D,GAAD,CAAtB;AACA,QAAMiE,IAAI,GAAGF,MAAM,CAAC/D,GAAD,CAAN,GAAc,EAA3B;AAEA,QAAI0D,GAAJ;AACA,QAAIQ,MAAJ;;AALsC,gDAMnBlF,OANmB;AAAA;;AAAA;AAMtC,6DAA4B;AAAA,YAAlB2E,KAAkB;AAC1BD,QAAAA,GAAG,GAAGC,KAAK,CAACD,GAAZ;;AACA,YAAGM,GAAG,IAAIN,GAAG,CAAChG,MAAd,EAAsB;AACpBwG,UAAAA,MAAM,GAAG,EAAT;AACD,SAFD,MAEO;AACLA,UAAAA,MAAM,GAAGR,GAAG,CAACM,GAAD,CAAZ;AACD;;AACD,YAAGE,MAAM,IAAID,IAAb,EAAmB;AACjBA,UAAAA,IAAI,CAACC,MAAD,CAAJ,CAAanD,IAAb,CAAkB4C,KAAlB;AACD,SAFD,MAEO;AACLM,UAAAA,IAAI,CAACC,MAAD,CAAJ,GAAe,CAACP,KAAD,CAAf;AACD;AACF;AAlBqC;AAAA;AAAA;AAAA;AAAA;;AAoBtC,SAAI,IAAM3D,KAAV,IAAiBiE,IAAjB,EAAuB;AACrB,UAAGjE,KAAG,KAAK,EAAX,EAAe;AACb;AACD;;AACD8D,MAAAA,YAAY,CAACG,IAAD,EAAOjE,KAAP,EAAYgE,GAAG,GAAG,CAAlB,CAAZ;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASH,iBAAT,CAA2B5E,IAA3B,EAAiC0E,KAAjC,EAAwCQ,mBAAxC,EAA6D;AAC3D,QAAG,CAACR,KAAK,CAACvD,cAAN,CAAqB+D,mBAArB,CAAJ,EAA+C;AAC7CR,MAAAA,KAAK,CAACQ,mBAAD,CAAL,GAA6BlF,IAA7B;AACD;AACF;AAED;AACF;AACA;AACA;AACA;;;AACE,WAAS6D,mBAAT,GAA+B;AAC7B,QAAMsB,KAAK,GAAG,EAAd;AACAA,IAAAA,KAAK,CAAC,OAAD,CAAL,GAAiB,KAAK,OAAL,CAAjB;AACAA,IAAAA,KAAK,CAACjF,QAAN,GAAiB5D,IAAI,CAAC6C,KAAL,CAAW,KAAKe,QAAhB,CAAjB;AACAiF,IAAAA,KAAK,CAAChG,KAAN,GAAc,KAAKA,KAAnB;AACAgG,IAAAA,KAAK,CAACzB,OAAN,GAAgB,IAAhB;AACAyB,IAAAA,KAAK,CAACxB,UAAN,GAAmB,KAAKA,UAAxB;AACAwB,IAAAA,KAAK,CAAC3F,SAAN,GAAkBlD,IAAI,CAAC6C,KAAL,CAAW,KAAKK,SAAhB,CAAlB;;AACA,QAAG,KAAKN,eAAR,EAAyB;AACvBiG,MAAAA,KAAK,CAACjG,eAAN,GAAwB,KAAKA,eAAL,CAAqBC,KAArB,EAAxB;AACD;;AACDgG,IAAAA,KAAK,CAACrB,uBAAN,GAAgC,KAAKA,uBAArC;;AACA,QAAG,eAAe,IAAlB,EAAwB;AACtBqB,MAAAA,KAAK,CAAC,WAAD,CAAL,GAAqB,KAAK,WAAL,CAArB;AACD;;AACD,QAAG,YAAY,IAAf,EAAqB;AACnBA,MAAAA,KAAK,CAAC,QAAD,CAAL,GAAkB,KAAK,QAAL,CAAlB;AACD;;AACD,WAAOA,KAAP;AACD;AAED;AACF;AACA;AACA;;;AACE,WAASpB,wBAAT,GAAoC;AAClC,QAAG,CAAC,KAAK7E,eAAT,EAA0B;AACxB,aAAO,IAAP;AACD;;AACD,WAAO,KAAKA,eAAL,CAAqBC,KAArB,EAAP;AACD;AACF,CA1ND;AA4NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACApB,GAAG,CAACqH,eAAJ,GAAsB,UAAC/F,GAAD,EAAM0B,GAAN,EAAW0B,IAAX,EAAoB;AACxC;AACA,MAAG1B,GAAG,KAAK,IAAX,EAAiB;AACf,QAAG0B,IAAI,KAAK,UAAZ,EAAwB;AACtB,aAAO5B,SAAP;AACD;;AACD,WAAO,IAAP;AACD,GAPuC,CASxC;;;AACA,MAAGxB,GAAG,CAACa,QAAJ,CAAae,GAAb,CAAiBF,GAAjB,CAAH,EAA0B;AACxB,QAAM2D,KAAK,GAAGrF,GAAG,CAACa,QAAJ,CAAagB,GAAb,CAAiBH,GAAjB,CAAd;;AAEA,QAAGhE,YAAY,CAAC0F,IAAD,CAAf,EAAuB;AACrB;AACA,aAAOiC,KAAP;AACD;;AACD,QAAGA,KAAK,CAACvD,cAAN,CAAqBsB,IAArB,CAAH,EAA+B;AAC7B;AACA,aAAOiC,KAAK,CAACjC,IAAD,CAAZ;AACD;AACF,GArBuC,CAuBxC;;;AACA,MAAGA,IAAI,KAAK,WAAT,IAAwBpD,GAAG,CAAC8B,cAAJ,CAAmBsB,IAAnB,CAA3B,EAAqD;AACnD,WAAOpD,GAAG,CAACoD,IAAD,CAAV;AACD;;AAED,MAAGA,IAAI,KAAK,UAAZ,EAAwB;AACtB,WAAO5B,SAAP;AACD;;AACD,SAAO,IAAP;AACD,CAhCD;AAkCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA9C,GAAG,CAACwC,cAAJ,GAAqB,UAACpC,SAAD,EAAYkH,OAAZ,EAAwB;AAC3C,MAAGA,OAAO,CAACC,QAAR,MAAsB,KAAzB,EAAgC;AAC9B,WAAO,CAACnH,SAAS,CAACoC,cAAX,IACLpC,SAAS,CAACoC,cAAV,IAA4B,aAAa8E,OAAO,CAACC,QAAR,EAD3C;AAED,GAHD,MAGO;AACL,WAAOnH,SAAS,CAACoC,cAAV,KAA6B,aAApC;AACD;AACF,CAPD;AASA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAxC,GAAG,CAACyD,SAAJ,GAAgB,UAAA+D,CAAC,EAAI;AACnB,MAAG,CAAC1I,SAAS,CAAC0I,CAAD,CAAV,IAAiBA,CAAC,CAAC,CAAD,CAAD,KAAS,GAA7B,EAAkC;AAChC,WAAO,KAAP;AACD;;AACD,UAAOA,CAAP;AACE,SAAK,OAAL;AACA,SAAK,YAAL;AACA,SAAK,UAAL;AACA,SAAK,UAAL;AACA,SAAK,QAAL;AACA,SAAK,WAAL;AACA,SAAK,QAAL;AACA,SAAK,KAAL;AACA,SAAK,QAAL;AACA,SAAK,OAAL;AACA,SAAK,WAAL;AACA,SAAK,OAAL;AACA,SAAK,OAAL;AACA,SAAK,OAAL;AACA,SAAK,cAAL;AACA,SAAK,SAAL;AACA,SAAK,WAAL;AACA,SAAK,YAAL;AACA,SAAK,aAAL;AACA,SAAK,UAAL;AACA,SAAK,MAAL;AACA,SAAK,OAAL;AACA,SAAK,QAAL;AACA,SAAK,UAAL;AACA,SAAK,QAAL;AACE,aAAO,IAAP;AA1BJ;;AA4BA,SAAO,KAAP;AACD,CAjCD;;AAmCA,SAASpC,YAAT,CAAsBqC,EAAtB,EAA0BC,EAA1B,EAA8B;AAC5B;AACA,MAAI,EAAED,EAAE,IAAI,OAAOA,EAAP,KAAc,QAAtB,CAAD,IACC,EAAEC,EAAE,IAAI,OAAOA,EAAP,KAAc,QAAtB,CADJ,EACsC;AACpC,WAAOD,EAAE,KAAKC,EAAd;AACD,GAL2B,CAM5B;;;AACA,MAAMC,OAAO,GAAGC,KAAK,CAACjJ,OAAN,CAAc8I,EAAd,CAAhB;;AACA,MAAGE,OAAO,KAAKC,KAAK,CAACjJ,OAAN,CAAc+I,EAAd,CAAf,EAAkC;AAChC,WAAO,KAAP;AACD;;AACD,MAAGC,OAAH,EAAY;AACV,QAAGF,EAAE,CAAC/G,MAAH,KAAcgH,EAAE,CAAChH,MAApB,EAA4B;AAC1B,aAAO,KAAP;AACD;;AACD,SAAI,IAAImH,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGJ,EAAE,CAAC/G,MAAtB,EAA8B,EAAEmH,CAAhC,EAAmC;AACjC,UAAG,CAACzC,YAAY,CAACqC,EAAE,CAACI,CAAD,CAAH,EAAQH,EAAE,CAACG,CAAD,CAAV,CAAhB,EAAgC;AAC9B,eAAO,KAAP;AACD;AACF;;AACD,WAAO,IAAP;AACD,GArB2B,CAsB5B;;;AACA,MAAMC,GAAG,GAAGvG,MAAM,CAACC,IAAP,CAAYiG,EAAZ,CAAZ;AACA,MAAMM,GAAG,GAAGxG,MAAM,CAACC,IAAP,CAAYkG,EAAZ,CAAZ;;AACA,MAAGI,GAAG,CAACpH,MAAJ,KAAeqH,GAAG,CAACrH,MAAtB,EAA8B;AAC5B,WAAO,KAAP;AACD;;AACD,OAAI,IAAMsH,EAAV,IAAgBP,EAAhB,EAAoB;AAClB,QAAIQ,EAAE,GAAGR,EAAE,CAACO,EAAD,CAAX;AACA,QAAIE,EAAE,GAAGR,EAAE,CAACM,EAAD,CAAX,CAFkB,CAGlB;;AACA,QAAGA,EAAE,KAAK,YAAV,EAAwB;AACtB,UAAGJ,KAAK,CAACjJ,OAAN,CAAcsJ,EAAd,KAAqBL,KAAK,CAACjJ,OAAN,CAAcuJ,EAAd,CAAxB,EAA2C;AACzCD,QAAAA,EAAE,GAAGA,EAAE,CAACE,KAAH,GAAW5B,IAAX,EAAL;AACA2B,QAAAA,EAAE,GAAGA,EAAE,CAACC,KAAH,GAAW5B,IAAX,EAAL;AACD;AACF;;AACD,QAAG,CAACnB,YAAY,CAAC6C,EAAD,EAAKC,EAAL,CAAhB,EAA0B;AACxB,aAAO,KAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD","sourcesContent":["/*\n * Copyright (c) 2017-2019 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst util = require('./util');\nconst JsonLdError = require('./JsonLdError');\n\nconst {\n  isArray: _isArray,\n  isObject: _isObject,\n  isString: _isString,\n  isUndefined: _isUndefined\n} = require('./types');\n\nconst {\n  isAbsolute: _isAbsoluteIri,\n  isRelative: _isRelativeIri,\n  prependBase,\n  parse: parseUrl\n} = require('./url');\n\nconst {\n  asArray: _asArray,\n  compareShortestLeast: _compareShortestLeast\n} = require('./util');\n\nconst INITIAL_CONTEXT_CACHE = new Map();\nconst INITIAL_CONTEXT_CACHE_MAX_SIZE = 10000;\n\nconst api = {};\nmodule.exports = api;\n\n/**\n * Processes a local context and returns a new active context.\n *\n * @param activeCtx the current active context.\n * @param localCtx the local context to process.\n * @param options the context processing options.\n * @param propagate `true` if `false`, retains any previously defined term,\n *   which can be rolled back when the descending into a new node object.\n * @param overrideProtected `false` allows protected terms to be modified.\n *\n * @return a Promise that resolves to the new active context.\n */\napi.process = async ({\n  activeCtx, localCtx, options,\n  propagate = true,\n  overrideProtected = false\n}) => {\n  // normalize local context to an array of @context objects\n  if(_isObject(localCtx) && '@context' in localCtx &&\n    _isArray(localCtx['@context'])) {\n    localCtx = localCtx['@context'];\n  }\n  const ctxs = _asArray(localCtx);\n\n  // no contexts in array, return current active context w/o changes\n  if(ctxs.length === 0) {\n    return activeCtx;\n  }\n\n  // resolve contexts\n  const resolved = await options.contextResolver.resolve({\n    context: localCtx,\n    documentLoader: options.documentLoader,\n    base: options.base\n  });\n\n  // override propagate if first resolved context has `@propagate`\n  if(_isObject(resolved[0].document) &&\n    typeof resolved[0].document['@propagate'] === 'boolean') {\n    // retrieve early, error checking done later\n    propagate = resolved[0].document['@propagate'];\n  }\n\n  // process each context in order, update active context\n  // on each iteration to ensure proper caching\n  let rval = activeCtx;\n\n  // track the previous context\n  // if not propagating, make sure rval has a previous context\n  if(!propagate && !rval.previousContext) {\n    // clone `rval` context before updating\n    rval = rval.clone();\n    rval.previousContext = activeCtx;\n  }\n\n  for(const resolvedContext of resolved) {\n    let {document: ctx} = resolvedContext;\n\n    // update active context to one computed from last iteration\n    activeCtx = rval;\n\n    // reset to initial context\n    if(ctx === null) {\n      // We can't nullify if there are protected terms and we're\n      // not allowing overrides (e.g. processing a property term scoped context)\n      if(!overrideProtected &&\n        Object.keys(activeCtx.protected).length !== 0) {\n        const protectedMode = (options && options.protectedMode) || 'error';\n        if(protectedMode === 'error') {\n          throw new JsonLdError(\n            'Tried to nullify a context with protected terms outside of ' +\n            'a term definition.',\n            'jsonld.SyntaxError',\n            {code: 'invalid context nullification'});\n        } else if(protectedMode === 'warn') {\n          // FIXME: remove logging and use a handler\n          console.warn('WARNING: invalid context nullification');\n          const oldActiveCtx = activeCtx;\n          // copy all protected term definitions to fresh initial context\n          rval = activeCtx = api.getInitialContext(options).clone();\n          for(const [term, _protected] of\n            Object.entries(oldActiveCtx.protected)) {\n            if(_protected) {\n              activeCtx.mappings[term] =\n                util.clone(oldActiveCtx.mappings[term]);\n            }\n          }\n          activeCtx.protected = util.clone(oldActiveCtx.protected);\n\n          // cache processed result\n          resolvedContext.setProcessed(oldActiveCtx, rval);\n          continue;\n        }\n        throw new JsonLdError(\n          'Invalid protectedMode.',\n          'jsonld.SyntaxError',\n          {code: 'invalid protected mode', context: localCtx, protectedMode});\n      }\n      rval = activeCtx = api.getInitialContext(options).clone();\n      continue;\n    }\n\n    // get processed context from cache if available\n    const processed = resolvedContext.getProcessed(activeCtx);\n    if(processed) {\n      rval = activeCtx = processed;\n      continue;\n    }\n\n    // dereference @context key if present\n    if(_isObject(ctx) && '@context' in ctx) {\n      ctx = ctx['@context'];\n    }\n\n    // context must be an object by now, all URLs retrieved before this call\n    if(!_isObject(ctx)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @context must be an object.',\n        'jsonld.SyntaxError', {code: 'invalid local context', context: ctx});\n    }\n\n    // TODO: there is likely a `previousContext` cloning optimization that\n    // could be applied here (no need to copy it under certain conditions)\n\n    // clone context before updating it\n    rval = rval.clone();\n\n    // define context mappings for keys in local context\n    const defined = new Map();\n\n    // handle @version\n    if('@version' in ctx) {\n      if(ctx['@version'] !== 1.1) {\n        throw new JsonLdError(\n          'Unsupported JSON-LD version: ' + ctx['@version'],\n          'jsonld.UnsupportedVersion',\n          {code: 'invalid @version value', context: ctx});\n      }\n      if(activeCtx.processingMode &&\n        activeCtx.processingMode === 'json-ld-1.0') {\n        throw new JsonLdError(\n          '@version: ' + ctx['@version'] + ' not compatible with ' +\n          activeCtx.processingMode,\n          'jsonld.ProcessingModeConflict',\n          {code: 'processing mode conflict', context: ctx});\n      }\n      rval.processingMode = 'json-ld-1.1';\n      rval['@version'] = ctx['@version'];\n      defined.set('@version', true);\n    }\n\n    // if not set explicitly, set processingMode to \"json-ld-1.1\"\n    rval.processingMode =\n      rval.processingMode || activeCtx.processingMode;\n\n    // handle @base\n    if('@base' in ctx) {\n      let base = ctx['@base'];\n\n      if(base === null) {\n        // no action\n      } else if(_isAbsoluteIri(base)) {\n        base = parseUrl(base);\n      } else if(_isRelativeIri(base)) {\n        base = parseUrl(prependBase(rval['@base'].href, base));\n      } else {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; the value of \"@base\" in a ' +\n          '@context must be an absolute IRI, a relative IRI, or null.',\n          'jsonld.SyntaxError', {code: 'invalid base IRI', context: ctx});\n      }\n\n      rval['@base'] = base;\n      defined.set('@base', true);\n    }\n\n    // handle @vocab\n    if('@vocab' in ctx) {\n      const value = ctx['@vocab'];\n      if(value === null) {\n        delete rval['@vocab'];\n      } else if(!_isString(value)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; the value of \"@vocab\" in a ' +\n          '@context must be a string or null.',\n          'jsonld.SyntaxError', {code: 'invalid vocab mapping', context: ctx});\n      } else if(!_isAbsoluteIri(value) && api.processingMode(rval, 1.0)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; the value of \"@vocab\" in a ' +\n          '@context must be an absolute IRI.',\n          'jsonld.SyntaxError', {code: 'invalid vocab mapping', context: ctx});\n      } else {\n        rval['@vocab'] = _expandIri(rval, value, {vocab: true, base: true},\n          undefined, undefined, options);\n      }\n      defined.set('@vocab', true);\n    }\n\n    // handle @language\n    if('@language' in ctx) {\n      const value = ctx['@language'];\n      if(value === null) {\n        delete rval['@language'];\n      } else if(!_isString(value)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; the value of \"@language\" in a ' +\n          '@context must be a string or null.',\n          'jsonld.SyntaxError',\n          {code: 'invalid default language', context: ctx});\n      } else {\n        rval['@language'] = value.toLowerCase();\n      }\n      defined.set('@language', true);\n    }\n\n    // handle @propagate\n    // note: we've already extracted it, here we just do error checking\n    if('@propagate' in ctx) {\n      const value = ctx['@propagate'];\n      if(activeCtx.processingMode === 'json-ld-1.0') {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; @propagate not compatible with ' +\n          activeCtx.processingMode,\n          'jsonld.SyntaxError',\n          {code: 'invalid context member', context: ctx});\n      }\n      if(typeof value !== 'boolean') {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; @propagate value must be a boolean.',\n          'jsonld.SyntaxError',\n          {code: 'invalid @propagate value', context: localCtx});\n      }\n      defined.set('@propagate', true);\n    }\n\n    // handle @protected; determine whether this sub-context is declaring\n    // all its terms to be \"protected\" (exceptions can be made on a\n    // per-definition basis)\n    defined.set('@protected', ctx['@protected'] || false);\n\n    // process all other keys\n    for(const key in ctx) {\n      api.createTermDefinition({\n        activeCtx: rval,\n        localCtx: ctx,\n        term: key,\n        defined,\n        options,\n        overrideProtected\n      });\n    }\n\n    // cache processed result\n    resolvedContext.setProcessed(activeCtx, rval);\n  }\n\n  return rval;\n};\n\n/**\n * Creates a term definition during context processing.\n *\n * @param activeCtx the current active context.\n * @param localCtx the local context being processed.\n * @param term the term in the local context to define the mapping for.\n * @param defined a map of defining/defined keys to detect cycles and prevent\n *          double definitions.\n * @param {Object} [options] - creation options.\n * @param {string} [options.protectedMode=\"error\"] - \"error\" to throw error\n *   on `@protected` constraint violation, \"warn\" to allow violations and\n *   signal a warning.\n * @param overrideProtected `false` allows protected terms to be modified.\n */\napi.createTermDefinition = ({\n  activeCtx,\n  localCtx,\n  term,\n  defined,\n  options,\n  overrideProtected = false,\n}) => {\n  if(defined.has(term)) {\n    // term already defined\n    if(defined.get(term)) {\n      return;\n    }\n    // cycle detected\n    throw new JsonLdError(\n      'Cyclical context definition detected.',\n      'jsonld.CyclicalContext',\n      {code: 'cyclic IRI mapping', context: localCtx, term});\n  }\n\n  // now defining term\n  defined.set(term, false);\n\n  // get context term value\n  let value;\n  if(localCtx.hasOwnProperty(term)) {\n    value = localCtx[term];\n  }\n\n  if(term === '@type' &&\n     _isObject(value) &&\n     value['@container'] === '@set' &&\n     api.processingMode(activeCtx, 1.1)) {\n\n    const validKeys = ['@container', '@id', '@protected'];\n    if(Object.keys(value).some(k => !validKeys.includes(k))) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; keywords cannot be overridden.',\n        'jsonld.SyntaxError',\n        {code: 'keyword redefinition', context: localCtx, term});\n    }\n  } else if(api.isKeyword(term)) {\n    throw new JsonLdError(\n      'Invalid JSON-LD syntax; keywords cannot be overridden.',\n      'jsonld.SyntaxError',\n      {code: 'keyword redefinition', context: localCtx, term});\n  } else if(term === '') {\n    throw new JsonLdError(\n      'Invalid JSON-LD syntax; a term cannot be an empty string.',\n      'jsonld.SyntaxError',\n      {code: 'invalid term definition', context: localCtx});\n  }\n\n  // keep reference to previous mapping for potential `@protected` check\n  const previousMapping = activeCtx.mappings.get(term);\n\n  // remove old mapping\n  if(activeCtx.mappings.has(term)) {\n    activeCtx.mappings.delete(term);\n  }\n\n  // clear context entry\n  if(value === null || (_isObject(value) && value['@id'] === null)) {\n    activeCtx.mappings.set(term, null);\n    defined.set(term, true);\n    return;\n  }\n\n  // convert short-hand value to object w/@id\n  let simpleTerm = false;\n  if(_isString(value)) {\n    simpleTerm = true;\n    value = {'@id': value};\n  }\n\n  if(!_isObject(value)) {\n    throw new JsonLdError(\n      'Invalid JSON-LD syntax; @context term values must be ' +\n      'strings or objects.',\n      'jsonld.SyntaxError',\n      {code: 'invalid term definition', context: localCtx});\n  }\n\n  // create new mapping\n  const mapping = {};\n  activeCtx.mappings.set(term, mapping);\n  mapping.reverse = false;\n\n  // make sure term definition only has expected keywords\n  const validKeys = ['@container', '@id', '@language', '@reverse', '@type'];\n\n  // JSON-LD 1.1 support\n  if(api.processingMode(activeCtx, 1.1)) {\n    validKeys.push('@context', '@index', '@nest', '@prefix', '@protected');\n  }\n\n  for(const kw in value) {\n    if(!validKeys.includes(kw)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; a term definition must not contain ' + kw,\n        'jsonld.SyntaxError',\n        {code: 'invalid term definition', context: localCtx});\n    }\n  }\n\n  // always compute whether term has a colon as an optimization for\n  // _compactIri\n  const colon = term.indexOf(':');\n  mapping._termHasColon = (colon > 0);\n\n  if('@reverse' in value) {\n    if('@id' in value) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; a @reverse term definition must not ' +\n        'contain @id.', 'jsonld.SyntaxError',\n        {code: 'invalid reverse property', context: localCtx});\n    }\n    if('@nest' in value) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; a @reverse term definition must not ' +\n        'contain @nest.', 'jsonld.SyntaxError',\n        {code: 'invalid reverse property', context: localCtx});\n    }\n    const reverse = value['@reverse'];\n    if(!_isString(reverse)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; a @context @reverse value must be a string.',\n        'jsonld.SyntaxError', {code: 'invalid IRI mapping', context: localCtx});\n    }\n\n    // expand and add @id mapping\n    const id = _expandIri(\n      activeCtx, reverse, {vocab: true, base: false}, localCtx, defined,\n      options);\n    if(!_isAbsoluteIri(id)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; a @context @reverse value must be an ' +\n        'absolute IRI or a blank node identifier.',\n        'jsonld.SyntaxError', {code: 'invalid IRI mapping', context: localCtx});\n    }\n    mapping['@id'] = id;\n    mapping.reverse = true;\n  } else if('@id' in value) {\n    let id = value['@id'];\n    if(!_isString(id)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; a @context @id value must be an array ' +\n        'of strings or a string.',\n        'jsonld.SyntaxError', {code: 'invalid IRI mapping', context: localCtx});\n    }\n    if(id !== term) {\n      // expand and add @id mapping\n      id = _expandIri(\n        activeCtx, id, {vocab: true, base: false}, localCtx, defined, options);\n      if(!_isAbsoluteIri(id) && !api.isKeyword(id)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; a @context @id value must be an ' +\n          'absolute IRI, a blank node identifier, or a keyword.',\n          'jsonld.SyntaxError',\n          {code: 'invalid IRI mapping', context: localCtx});\n      }\n      mapping['@id'] = id;\n      // indicate if this term may be used as a compact IRI prefix\n      mapping._prefix = (simpleTerm &&\n        !mapping._termHasColon &&\n        id.match(/[:\\/\\?#\\[\\]@]$/));\n    }\n  }\n\n  if(!('@id' in mapping)) {\n    // see if the term has a prefix\n    if(mapping._termHasColon) {\n      const prefix = term.substr(0, colon);\n      if(localCtx.hasOwnProperty(prefix)) {\n        // define parent prefix\n        api.createTermDefinition({\n          activeCtx, localCtx, term: prefix, defined, options\n        });\n      }\n\n      if(activeCtx.mappings.has(prefix)) {\n        // set @id based on prefix parent\n        const suffix = term.substr(colon + 1);\n        mapping['@id'] = activeCtx.mappings.get(prefix)['@id'] + suffix;\n      } else {\n        // term is an absolute IRI\n        mapping['@id'] = term;\n      }\n    } else if(term == '@type') {\n      // Special case, were we've previously determined that container is @set\n      mapping['@id'] = term;\n    } else {\n      // non-IRIs *must* define @ids if @vocab is not available\n      if(!('@vocab' in activeCtx)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; @context terms must define an @id.',\n          'jsonld.SyntaxError',\n          {code: 'invalid IRI mapping', context: localCtx, term});\n      }\n      // prepend vocab to term\n      mapping['@id'] = activeCtx['@vocab'] + term;\n    }\n  }\n\n  // Handle term protection\n  if(value['@protected'] === true ||\n    (defined.get('@protected') === true && value['@protected'] !== false)) {\n    activeCtx.protected[term] = true;\n    mapping.protected = true;\n  }\n\n  // IRI mapping now defined\n  defined.set(term, true);\n\n  if('@type' in value) {\n    let type = value['@type'];\n    if(!_isString(type)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; an @context @type value must be a string.',\n        'jsonld.SyntaxError',\n        {code: 'invalid type mapping', context: localCtx});\n    }\n\n    if((type === '@json' || type === '@none')) {\n      if(api.processingMode(activeCtx, 1.0)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; an @context @type value must not be ' +\n          `\"${type}\" in JSON-LD 1.0 mode.`,\n          'jsonld.SyntaxError',\n          {code: 'invalid type mapping', context: localCtx});\n      }\n    } else if(type !== '@id' && type !== '@vocab') {\n      // expand @type to full IRI\n      type = _expandIri(\n        activeCtx, type, {vocab: true, base: false}, localCtx, defined,\n        options);\n      if(!_isAbsoluteIri(type)) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; an @context @type value must be an ' +\n          'absolute IRI.',\n          'jsonld.SyntaxError',\n          {code: 'invalid type mapping', context: localCtx});\n      }\n      if(type.indexOf('_:') === 0) {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; an @context @type value must be an IRI, ' +\n          'not a blank node identifier.',\n          'jsonld.SyntaxError',\n          {code: 'invalid type mapping', context: localCtx});\n      }\n    }\n\n    // add @type to mapping\n    mapping['@type'] = type;\n  }\n\n  if('@container' in value) {\n    // normalize container to an array form\n    const container = _isString(value['@container']) ?\n      [value['@container']] : (value['@container'] || []);\n    const validContainers = ['@list', '@set', '@index', '@language'];\n    let isValid = true;\n    const hasSet = container.includes('@set');\n\n    // JSON-LD 1.1 support\n    if(api.processingMode(activeCtx, 1.1)) {\n      validContainers.push('@graph', '@id', '@type');\n\n      // check container length\n      if(container.includes('@list')) {\n        if(container.length !== 1) {\n          throw new JsonLdError(\n            'Invalid JSON-LD syntax; @context @container with @list must ' +\n            'have no other values',\n            'jsonld.SyntaxError',\n            {code: 'invalid container mapping', context: localCtx});\n        }\n      } else if(container.includes('@graph')) {\n        if(container.some(key =>\n          key !== '@graph' && key !== '@id' && key !== '@index' &&\n          key !== '@set')) {\n          throw new JsonLdError(\n            'Invalid JSON-LD syntax; @context @container with @graph must ' +\n            'have no other values other than @id, @index, and @set',\n            'jsonld.SyntaxError',\n            {code: 'invalid container mapping', context: localCtx});\n        }\n      } else {\n        // otherwise, container may also include @set\n        isValid &= container.length <= (hasSet ? 2 : 1);\n      }\n\n      if(container.includes('@type')) {\n        // If mapping does not have an @type,\n        // set it to @id\n        mapping['@type'] = mapping['@type'] || '@id';\n\n        // type mapping must be either @id or @vocab\n        if(!['@id', '@vocab'].includes(mapping['@type'])) {\n          throw new JsonLdError(\n            'Invalid JSON-LD syntax; container: @type requires @type to be ' +\n            '@id or @vocab.',\n            'jsonld.SyntaxError',\n            {code: 'invalid type mapping', context: localCtx});\n        }\n      }\n    } else {\n      // in JSON-LD 1.0, container must not be an array (it must be a string,\n      // which is one of the validContainers)\n      isValid &= !_isArray(value['@container']);\n\n      // check container length\n      isValid &= container.length <= 1;\n    }\n\n    // check against valid containers\n    isValid &= container.every(c => validContainers.includes(c));\n\n    // @set not allowed with @list\n    isValid &= !(hasSet && container.includes('@list'));\n\n    if(!isValid) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @context @container value must be ' +\n        'one of the following: ' + validContainers.join(', '),\n        'jsonld.SyntaxError',\n        {code: 'invalid container mapping', context: localCtx});\n    }\n\n    if(mapping.reverse &&\n      !container.every(c => ['@index', '@set'].includes(c))) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @context @container value for a @reverse ' +\n        'type definition must be @index or @set.', 'jsonld.SyntaxError',\n        {code: 'invalid reverse property', context: localCtx});\n    }\n\n    // add @container to mapping\n    mapping['@container'] = container;\n  }\n\n  // property indexing\n  if('@index' in value) {\n    if(!('@container' in value) || !mapping['@container'].includes('@index')) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @index without @index in @container: ' +\n        `\"${value['@index']}\" on term \"${term}\".`, 'jsonld.SyntaxError',\n        {code: 'invalid term definition', context: localCtx});\n    }\n    if(!_isString(value['@index']) || value['@index'].indexOf('@') === 0) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @index must expand to an IRI: ' +\n        `\"${value['@index']}\" on term \"${term}\".`, 'jsonld.SyntaxError',\n        {code: 'invalid term definition', context: localCtx});\n    }\n    mapping['@index'] = value['@index'];\n  }\n\n  // scoped contexts\n  if('@context' in value) {\n    mapping['@context'] = value['@context'];\n  }\n\n  if('@language' in value && !('@type' in value)) {\n    let language = value['@language'];\n    if(language !== null && !_isString(language)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @context @language value must be ' +\n        'a string or null.', 'jsonld.SyntaxError',\n        {code: 'invalid language mapping', context: localCtx});\n    }\n\n    // add @language to mapping\n    if(language !== null) {\n      language = language.toLowerCase();\n    }\n    mapping['@language'] = language;\n  }\n\n  // term may be used as a prefix\n  if('@prefix' in value) {\n    if(mapping._termHasColon) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @context @prefix used on a compact IRI term',\n        'jsonld.SyntaxError',\n        {code: 'invalid term definition', context: localCtx});\n    }\n    if(typeof value['@prefix'] === 'boolean') {\n      mapping._prefix = value['@prefix'] === true;\n    } else {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @context value for @prefix must be boolean',\n        'jsonld.SyntaxError',\n        {code: 'invalid @prefix value', context: localCtx});\n    }\n  }\n\n  if('@nest' in value) {\n    const nest = value['@nest'];\n    if(!_isString(nest) || (nest !== '@nest' && nest.indexOf('@') === 0)) {\n      throw new JsonLdError(\n        'Invalid JSON-LD syntax; @context @nest value must be ' +\n        'a string which is not a keyword other than @nest.',\n        'jsonld.SyntaxError',\n        {code: 'invalid @nest value', context: localCtx});\n    }\n    mapping['@nest'] = nest;\n  }\n\n  // disallow aliasing @context and @preserve\n  const id = mapping['@id'];\n  if(id === '@context' || id === '@preserve') {\n    throw new JsonLdError(\n      'Invalid JSON-LD syntax; @context and @preserve cannot be aliased.',\n      'jsonld.SyntaxError', {code: 'invalid keyword alias', context: localCtx});\n  }\n\n  // Check for overriding protected terms\n  if(previousMapping && previousMapping.protected && !overrideProtected) {\n    // force new term to continue to be protected and see if the mappings would\n    // be equal\n    activeCtx.protected[term] = true;\n    mapping.protected = true;\n    if(!_deepCompare(previousMapping, mapping)) {\n      const protectedMode = (options && options.protectedMode) || 'error';\n      if(protectedMode === 'error') {\n        throw new JsonLdError(\n          'Invalid JSON-LD syntax; tried to redefine a protected term.',\n          'jsonld.SyntaxError',\n          {code: 'protected term redefinition', context: localCtx, term});\n      } else if(protectedMode === 'warn') {\n        // FIXME: remove logging and use a handler\n        console.warn('WARNING: protected term redefinition', {term});\n        return;\n      }\n      throw new JsonLdError(\n        'Invalid protectedMode.',\n        'jsonld.SyntaxError',\n        {code: 'invalid protected mode', context: localCtx, term,\n          protectedMode});\n    }\n  }\n};\n\n/**\n * Expands a string to a full IRI. The string may be a term, a prefix, a\n * relative IRI, or an absolute IRI. The associated absolute IRI will be\n * returned.\n *\n * @param activeCtx the current active context.\n * @param value the string to expand.\n * @param relativeTo options for how to resolve relative IRIs:\n *          base: true to resolve against the base IRI, false not to.\n *          vocab: true to concatenate after @vocab, false not to.\n * @param {Object} [options] - processing options.\n *\n * @return the expanded value.\n */\napi.expandIri = (activeCtx, value, relativeTo, options) => {\n  return _expandIri(activeCtx, value, relativeTo, undefined, undefined,\n    options);\n};\n\n/**\n * Expands a string to a full IRI. The string may be a term, a prefix, a\n * relative IRI, or an absolute IRI. The associated absolute IRI will be\n * returned.\n *\n * @param activeCtx the current active context.\n * @param value the string to expand.\n * @param relativeTo options for how to resolve relative IRIs:\n *          base: true to resolve against the base IRI, false not to.\n *          vocab: true to concatenate after @vocab, false not to.\n * @param localCtx the local context being processed (only given if called\n *          during context processing).\n * @param defined a map for tracking cycles in context definitions (only given\n *          if called during context processing).\n * @param {Object} [options] - processing options.\n *\n * @return the expanded value.\n */\nfunction _expandIri(activeCtx, value, relativeTo, localCtx, defined, options) {\n  // already expanded\n  if(value === null || !_isString(value) || api.isKeyword(value)) {\n    return value;\n  }\n\n  // define term dependency if not defined\n  if(localCtx && localCtx.hasOwnProperty(value) &&\n    defined.get(value) !== true) {\n    api.createTermDefinition({\n      activeCtx, localCtx, term: value, defined, options\n    });\n  }\n\n  relativeTo = relativeTo || {};\n  if(relativeTo.vocab) {\n    const mapping = activeCtx.mappings.get(value);\n\n    // value is explicitly ignored with a null mapping\n    if(mapping === null) {\n      return null;\n    }\n\n    if(mapping) {\n      // value is a term\n      return mapping['@id'];\n    }\n  }\n\n  // split value into prefix:suffix\n  const colon = value.indexOf(':');\n  if(colon > 0) {\n    const prefix = value.substr(0, colon);\n    const suffix = value.substr(colon + 1);\n\n    // do not expand blank nodes (prefix of '_') or already-absolute\n    // IRIs (suffix of '//')\n    if(prefix === '_' || suffix.indexOf('//') === 0) {\n      return value;\n    }\n\n    // prefix dependency not defined, define it\n    if(localCtx && localCtx.hasOwnProperty(prefix)) {\n      api.createTermDefinition({\n        activeCtx, localCtx, term: prefix, defined, options\n      });\n    }\n\n    // use mapping if prefix is defined\n    const mapping = activeCtx.mappings.get(prefix);\n    if(mapping && mapping._prefix) {\n      return mapping['@id'] + suffix;\n    }\n\n    // already absolute IRI\n    if(_isAbsoluteIri(value)) {\n      return value;\n    }\n  }\n\n  // prepend vocab\n  if(relativeTo.vocab && '@vocab' in activeCtx) {\n    return activeCtx['@vocab'] + value;\n  }\n\n  // prepend base\n  if(relativeTo.base) {\n    return prependBase(activeCtx['@base'], value);\n  }\n\n  return value;\n}\n\n/**\n * Gets the initial context.\n *\n * @param options the options to use:\n *          [base] the document base IRI.\n *\n * @return the initial context.\n */\napi.getInitialContext = options => {\n  const base = parseUrl(options.base || '');\n  const key = JSON.stringify({base, processingMode: options.processingMode});\n  const cached = INITIAL_CONTEXT_CACHE.get(key);\n  if(cached) {\n    return cached;\n  }\n\n  const initialContext = {\n    '@base': base,\n    processingMode: options.processingMode,\n    mappings: new Map(),\n    inverse: null,\n    getInverse: _createInverseContext,\n    clone: _cloneActiveContext,\n    revertToPreviousContext: _revertToPreviousContext,\n    protected: {}\n  };\n  // TODO: consider using LRU cache instead\n  if(INITIAL_CONTEXT_CACHE.size === INITIAL_CONTEXT_CACHE_MAX_SIZE) {\n    // clear whole cache -- assumes scenario where the cache fills means\n    // the cache isn't being used very efficiently anyway\n    INITIAL_CONTEXT_CACHE.clear();\n  }\n  INITIAL_CONTEXT_CACHE.set(key, initialContext);\n  return initialContext;\n\n  /**\n   * Generates an inverse context for use in the compaction algorithm, if\n   * not already generated for the given active context.\n   *\n   * @return the inverse context.\n   */\n  function _createInverseContext() {\n    const activeCtx = this;\n\n    // lazily create inverse\n    if(activeCtx.inverse) {\n      return activeCtx.inverse;\n    }\n    const inverse = activeCtx.inverse = {};\n\n    // variables for building fast CURIE map\n    const fastCurieMap = activeCtx.fastCurieMap = {};\n    const irisToTerms = {};\n\n    // handle default language\n    const defaultLanguage = activeCtx['@language'] || '@none';\n\n    // create term selections for each mapping in the context, ordered by\n    // shortest and then lexicographically least\n    const mappings = activeCtx.mappings;\n    const terms = [...mappings.keys()].sort(_compareShortestLeast);\n    for(const term of terms) {\n      const mapping = mappings.get(term);\n      if(mapping === null) {\n        continue;\n      }\n\n      let container = mapping['@container'] || '@none';\n      container = [].concat(container).sort().join('');\n\n      // iterate over every IRI in the mapping\n      const ids = _asArray(mapping['@id']);\n      for(const iri of ids) {\n        let entry = inverse[iri];\n        const isKeyword = api.isKeyword(iri);\n\n        if(!entry) {\n          // initialize entry\n          inverse[iri] = entry = {};\n\n          if(!isKeyword && !mapping._termHasColon) {\n            // init IRI to term map and fast CURIE prefixes\n            irisToTerms[iri] = [term];\n            const fastCurieEntry = {iri, terms: irisToTerms[iri]};\n            if(iri[0] in fastCurieMap) {\n              fastCurieMap[iri[0]].push(fastCurieEntry);\n            } else {\n              fastCurieMap[iri[0]] = [fastCurieEntry];\n            }\n          }\n        } else if(!isKeyword && !mapping._termHasColon) {\n          // add IRI to term match\n          irisToTerms[iri].push(term);\n        }\n\n        // add new entry\n        if(!entry[container]) {\n          entry[container] = {\n            '@language': {},\n            '@type': {},\n            '@any': {}\n          };\n        }\n        entry = entry[container];\n        _addPreferredTerm(term, entry['@any'], '@none');\n\n        if(mapping.reverse) {\n          // term is preferred for values using @reverse\n          _addPreferredTerm(term, entry['@type'], '@reverse');\n        } else if(mapping['@type'] === '@none') {\n          _addPreferredTerm(term, entry['@any'], '@none');\n          _addPreferredTerm(term, entry['@language'], '@none');\n          _addPreferredTerm(term, entry['@type'], '@none');\n        } else if('@type' in mapping) {\n          // term is preferred for values using specific type\n          _addPreferredTerm(term, entry['@type'], mapping['@type']);\n        } else if('@language' in mapping) {\n          // term is preferred for values using specific language\n          const language = mapping['@language'] || '@null';\n          _addPreferredTerm(term, entry['@language'], language);\n        } else {\n          // term is preferred for values w/default language or no type and\n          // no language\n          // add an entry for the default language\n          _addPreferredTerm(term, entry['@language'], defaultLanguage);\n\n          // add entries for no type and no language\n          _addPreferredTerm(term, entry['@type'], '@none');\n          _addPreferredTerm(term, entry['@language'], '@none');\n        }\n      }\n    }\n\n    // build fast CURIE map\n    for(const key in fastCurieMap) {\n      _buildIriMap(fastCurieMap, key, 1);\n    }\n\n    return inverse;\n  }\n\n  /**\n   * Runs a recursive algorithm to build a lookup map for quickly finding\n   * potential CURIEs.\n   *\n   * @param iriMap the map to build.\n   * @param key the current key in the map to work on.\n   * @param idx the index into the IRI to compare.\n   */\n  function _buildIriMap(iriMap, key, idx) {\n    const entries = iriMap[key];\n    const next = iriMap[key] = {};\n\n    let iri;\n    let letter;\n    for(const entry of entries) {\n      iri = entry.iri;\n      if(idx >= iri.length) {\n        letter = '';\n      } else {\n        letter = iri[idx];\n      }\n      if(letter in next) {\n        next[letter].push(entry);\n      } else {\n        next[letter] = [entry];\n      }\n    }\n\n    for(const key in next) {\n      if(key === '') {\n        continue;\n      }\n      _buildIriMap(next, key, idx + 1);\n    }\n  }\n\n  /**\n   * Adds the term for the given entry if not already added.\n   *\n   * @param term the term to add.\n   * @param entry the inverse context typeOrLanguage entry to add to.\n   * @param typeOrLanguageValue the key in the entry to add to.\n   */\n  function _addPreferredTerm(term, entry, typeOrLanguageValue) {\n    if(!entry.hasOwnProperty(typeOrLanguageValue)) {\n      entry[typeOrLanguageValue] = term;\n    }\n  }\n\n  /**\n   * Clones an active context, creating a child active context.\n   *\n   * @return a clone (child) of the active context.\n   */\n  function _cloneActiveContext() {\n    const child = {};\n    child['@base'] = this['@base'];\n    child.mappings = util.clone(this.mappings);\n    child.clone = this.clone;\n    child.inverse = null;\n    child.getInverse = this.getInverse;\n    child.protected = util.clone(this.protected);\n    if(this.previousContext) {\n      child.previousContext = this.previousContext.clone();\n    }\n    child.revertToPreviousContext = this.revertToPreviousContext;\n    if('@language' in this) {\n      child['@language'] = this['@language'];\n    }\n    if('@vocab' in this) {\n      child['@vocab'] = this['@vocab'];\n    }\n    return child;\n  }\n\n  /**\n   * Reverts any type-scoped context in this active context to the previous\n   * context.\n   */\n  function _revertToPreviousContext() {\n    if(!this.previousContext) {\n      return this;\n    }\n    return this.previousContext.clone();\n  }\n};\n\n/**\n * Gets the value for the given active context key and type, null if none is\n * set or undefined if none is set and type is '@context'.\n *\n * @param ctx the active context.\n * @param key the context key.\n * @param [type] the type of value to get (eg: '@id', '@type'), if not\n *          specified gets the entire entry for a key, null if not found.\n *\n * @return the value, null, or undefined.\n */\napi.getContextValue = (ctx, key, type) => {\n  // invalid key\n  if(key === null) {\n    if(type === '@context') {\n      return undefined;\n    }\n    return null;\n  }\n\n  // get specific entry information\n  if(ctx.mappings.has(key)) {\n    const entry = ctx.mappings.get(key);\n\n    if(_isUndefined(type)) {\n      // return whole entry\n      return entry;\n    }\n    if(entry.hasOwnProperty(type)) {\n      // return entry value for type\n      return entry[type];\n    }\n  }\n\n  // get default language\n  if(type === '@language' && ctx.hasOwnProperty(type)) {\n    return ctx[type];\n  }\n\n  if(type === '@context') {\n    return undefined;\n  }\n  return null;\n};\n\n/**\n * Processing Mode check.\n *\n * @param activeCtx the current active context.\n * @param version the string or numeric version to check.\n *\n * @return boolean.\n */\napi.processingMode = (activeCtx, version) => {\n  if(version.toString() >= '1.1') {\n    return !activeCtx.processingMode ||\n      activeCtx.processingMode >= 'json-ld-' + version.toString();\n  } else {\n    return activeCtx.processingMode === 'json-ld-1.0';\n  }\n};\n\n/**\n * Returns whether or not the given value is a keyword.\n *\n * @param v the value to check.\n *\n * @return true if the value is a keyword, false if not.\n */\napi.isKeyword = v => {\n  if(!_isString(v) || v[0] !== '@') {\n    return false;\n  }\n  switch(v) {\n    case '@base':\n    case '@container':\n    case '@context':\n    case '@default':\n    case '@embed':\n    case '@explicit':\n    case '@graph':\n    case '@id':\n    case '@index':\n    case '@json':\n    case '@language':\n    case '@list':\n    case '@nest':\n    case '@none':\n    case '@omitDefault':\n    case '@prefix':\n    case '@preserve':\n    case '@protected':\n    case '@requireAll':\n    case '@reverse':\n    case '@set':\n    case '@type':\n    case '@value':\n    case '@version':\n    case '@vocab':\n      return true;\n  }\n  return false;\n};\n\nfunction _deepCompare(x1, x2) {\n  // compare `null` or primitive types directly\n  if((!(x1 && typeof x1 === 'object')) ||\n     (!(x2 && typeof x2 === 'object'))) {\n    return x1 === x2;\n  }\n  // x1 and x2 are objects (also potentially arrays)\n  const x1Array = Array.isArray(x1);\n  if(x1Array !== Array.isArray(x2)) {\n    return false;\n  }\n  if(x1Array) {\n    if(x1.length !== x2.length) {\n      return false;\n    }\n    for(let i = 0; i < x1.length; ++i) {\n      if(!_deepCompare(x1[i], x2[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  // x1 and x2 are non-array objects\n  const k1s = Object.keys(x1);\n  const k2s = Object.keys(x2);\n  if(k1s.length !== k2s.length) {\n    return false;\n  }\n  for(const k1 in x1) {\n    let v1 = x1[k1];\n    let v2 = x2[k1];\n    // special case: `@container` can be in any order\n    if(k1 === '@container') {\n      if(Array.isArray(v1) && Array.isArray(v2)) {\n        v1 = v1.slice().sort();\n        v2 = v2.slice().sort();\n      }\n    }\n    if(!_deepCompare(v1, v2)) {\n      return false;\n    }\n  }\n  return true;\n}\n"]},"metadata":{},"sourceType":"script"}