{"ast":null,"code":"/*\n * Copyright (c) 2019 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nvar _regeneratorRuntime = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _toConsumableArray = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _createForOfIteratorHelper = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _asyncToGenerator = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:/My Works/Git/cowin-verify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require('./types'),\n    _isArray = _require.isArray,\n    _isObject = _require.isObject,\n    _isString = _require.isString;\n\nvar _require2 = require('./url'),\n    prependBase = _require2.prependBase;\n\nvar JsonLdError = require('./JsonLdError');\n\nvar ResolvedContext = require('./ResolvedContext');\n\nvar MAX_CONTEXT_URLS = 10;\n\nmodule.exports = /*#__PURE__*/function () {\n  /**\n   * Creates a ContextResolver.\n   *\n   * @param sharedCache a shared LRU cache with `get` and `set` APIs.\n   */\n  function ContextResolver(_ref) {\n    var sharedCache = _ref.sharedCache;\n\n    _classCallCheck(this, ContextResolver);\n\n    this.perOpCache = new Map();\n    this.sharedCache = sharedCache;\n  }\n\n  _createClass(ContextResolver, [{\n    key: \"resolve\",\n    value: function () {\n      var _resolve = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n        var context, documentLoader, base, _ref2$cycles, cycles, allResolved, _iterator, _step, ctx, _resolved, key, resolved;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                context = _ref2.context, documentLoader = _ref2.documentLoader, base = _ref2.base, _ref2$cycles = _ref2.cycles, cycles = _ref2$cycles === void 0 ? new Set() : _ref2$cycles;\n\n                // process `@context`\n                if (context && _isObject(context) && context['@context']) {\n                  context = context['@context'];\n                } // context is one or more contexts\n\n\n                if (!_isArray(context)) {\n                  context = [context];\n                } // resolve each context in the array\n\n\n                allResolved = [];\n                _iterator = _createForOfIteratorHelper(context);\n                _context.prev = 5;\n\n                _iterator.s();\n\n              case 7:\n                if ((_step = _iterator.n()).done) {\n                  _context.next = 27;\n                  break;\n                }\n\n                ctx = _step.value;\n\n                if (!_isString(ctx)) {\n                  _context.next = 17;\n                  break;\n                }\n\n                // see if `ctx` has been resolved before...\n                _resolved = this._get(ctx);\n\n                if (_resolved) {\n                  _context.next = 15;\n                  break;\n                }\n\n                _context.next = 14;\n                return this._resolveRemoteContext({\n                  url: ctx,\n                  documentLoader: documentLoader,\n                  base: base,\n                  cycles: cycles\n                });\n\n              case 14:\n                _resolved = _context.sent;\n\n              case 15:\n                // add to output and continue\n                if (_isArray(_resolved)) {\n                  allResolved.push.apply(allResolved, _toConsumableArray(_resolved));\n                } else {\n                  allResolved.push(_resolved);\n                }\n\n                return _context.abrupt(\"continue\", 25);\n\n              case 17:\n                if (!(ctx === null)) {\n                  _context.next = 20;\n                  break;\n                }\n\n                // handle `null` context, nothing to cache\n                allResolved.push(new ResolvedContext({\n                  document: null\n                }));\n                return _context.abrupt(\"continue\", 25);\n\n              case 20:\n                if (!_isObject(ctx)) {\n                  _throwInvalidLocalContext(context);\n                } // context is an object, get/create `ResolvedContext` for it\n\n\n                key = JSON.stringify(ctx);\n                resolved = this._get(key);\n\n                if (!resolved) {\n                  // create a new static `ResolvedContext` and cache it\n                  resolved = new ResolvedContext({\n                    document: ctx\n                  });\n\n                  this._cacheResolvedContext({\n                    key: key,\n                    resolved: resolved,\n                    tag: 'static'\n                  });\n                }\n\n                allResolved.push(resolved);\n\n              case 25:\n                _context.next = 7;\n                break;\n\n              case 27:\n                _context.next = 32;\n                break;\n\n              case 29:\n                _context.prev = 29;\n                _context.t0 = _context[\"catch\"](5);\n\n                _iterator.e(_context.t0);\n\n              case 32:\n                _context.prev = 32;\n\n                _iterator.f();\n\n                return _context.finish(32);\n\n              case 35:\n                return _context.abrupt(\"return\", allResolved);\n\n              case 36:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[5, 29, 32, 35]]);\n      }));\n\n      function resolve(_x) {\n        return _resolve.apply(this, arguments);\n      }\n\n      return resolve;\n    }()\n  }, {\n    key: \"_get\",\n    value: function _get(key) {\n      // get key from per operation cache; no `tag` is used with this cache so\n      // any retrieved context will always be the same during a single operation\n      var resolved = this.perOpCache.get(key);\n\n      if (!resolved) {\n        // see if the shared cache has a `static` entry for this URL\n        var tagMap = this.sharedCache.get(key);\n\n        if (tagMap) {\n          resolved = tagMap.get('static');\n\n          if (resolved) {\n            this.perOpCache.set(key, resolved);\n          }\n        }\n      }\n\n      return resolved;\n    }\n  }, {\n    key: \"_cacheResolvedContext\",\n    value: function _cacheResolvedContext(_ref3) {\n      var key = _ref3.key,\n          resolved = _ref3.resolved,\n          tag = _ref3.tag;\n      this.perOpCache.set(key, resolved);\n\n      if (tag !== undefined) {\n        var tagMap = this.sharedCache.get(key);\n\n        if (!tagMap) {\n          tagMap = new Map();\n          this.sharedCache.set(key, tagMap);\n        }\n\n        tagMap.set(tag, resolved);\n      }\n\n      return resolved;\n    }\n  }, {\n    key: \"_resolveRemoteContext\",\n    value: function () {\n      var _resolveRemoteContext2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref4) {\n        var url, documentLoader, base, cycles, _yield$this$_fetchCon, context, remoteDoc, resolved;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                url = _ref4.url, documentLoader = _ref4.documentLoader, base = _ref4.base, cycles = _ref4.cycles;\n                // resolve relative URL and fetch context\n                url = prependBase(base, url);\n                _context2.next = 4;\n                return this._fetchContext({\n                  url: url,\n                  documentLoader: documentLoader,\n                  cycles: cycles\n                });\n\n              case 4:\n                _yield$this$_fetchCon = _context2.sent;\n                context = _yield$this$_fetchCon.context;\n                remoteDoc = _yield$this$_fetchCon.remoteDoc;\n                // update base according to remote document and resolve any relative URLs\n                base = remoteDoc.documentUrl || url;\n\n                _resolveContextUrls({\n                  context: context,\n                  base: base\n                }); // resolve, cache, and return context\n\n\n                _context2.next = 11;\n                return this.resolve({\n                  context: context,\n                  documentLoader: documentLoader,\n                  base: base,\n                  cycles: cycles\n                });\n\n              case 11:\n                resolved = _context2.sent;\n\n                this._cacheResolvedContext({\n                  key: url,\n                  resolved: resolved,\n                  tag: remoteDoc.tag\n                });\n\n                return _context2.abrupt(\"return\", resolved);\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _resolveRemoteContext(_x2) {\n        return _resolveRemoteContext2.apply(this, arguments);\n      }\n\n      return _resolveRemoteContext;\n    }()\n  }, {\n    key: \"_fetchContext\",\n    value: function () {\n      var _fetchContext2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref5) {\n        var url, documentLoader, cycles, context, remoteDoc;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                url = _ref5.url, documentLoader = _ref5.documentLoader, cycles = _ref5.cycles;\n\n                if (!(cycles.size > MAX_CONTEXT_URLS)) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                throw new JsonLdError('Maximum number of @context URLs exceeded.', 'jsonld.ContextUrlError', {\n                  code: 'loading remote context failed',\n                  max: MAX_CONTEXT_URLS\n                });\n\n              case 3:\n                if (!cycles.has(url)) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                throw new JsonLdError('Cyclical @context URLs detected.', 'jsonld.ContextUrlError', {\n                  code: 'recursive context inclusion',\n                  url: url\n                });\n\n              case 5:\n                // track cycles\n                cycles.add(url);\n                _context3.prev = 6;\n                _context3.next = 9;\n                return documentLoader(url);\n\n              case 9:\n                remoteDoc = _context3.sent;\n                context = remoteDoc.document || null; // parse string context as JSON\n\n                if (_isString(context)) {\n                  context = JSON.parse(context);\n                }\n\n                _context3.next = 17;\n                break;\n\n              case 14:\n                _context3.prev = 14;\n                _context3.t0 = _context3[\"catch\"](6);\n                throw new JsonLdError('Dereferencing a URL did not result in a valid JSON-LD object. ' + 'Possible causes are an inaccessible URL perhaps due to ' + 'a same-origin policy (ensure the server uses CORS if you are ' + 'using client-side JavaScript), too many redirects, a ' + 'non-JSON response, or more than one HTTP Link Header was ' + 'provided for a remote context.', 'jsonld.InvalidUrl', {\n                  code: 'loading remote context failed',\n                  url: url,\n                  cause: _context3.t0\n                });\n\n              case 17:\n                if (_isObject(context)) {\n                  _context3.next = 19;\n                  break;\n                }\n\n                throw new JsonLdError('Dereferencing a URL did not result in a JSON object. The ' + 'response was valid JSON, but it was not a JSON object.', 'jsonld.InvalidUrl', {\n                  code: 'invalid remote context',\n                  url: url\n                });\n\n              case 19:\n                // use empty context if no @context key is present\n                if (!('@context' in context)) {\n                  context = {\n                    '@context': {}\n                  };\n                } else {\n                  context = {\n                    '@context': context['@context']\n                  };\n                } // append @context URL to context if given\n\n\n                if (remoteDoc.contextUrl) {\n                  if (!_isArray(context['@context'])) {\n                    context['@context'] = [context['@context']];\n                  }\n\n                  context['@context'].push(remoteDoc.contextUrl);\n                }\n\n                return _context3.abrupt(\"return\", {\n                  context: context,\n                  remoteDoc: remoteDoc\n                });\n\n              case 22:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[6, 14]]);\n      }));\n\n      function _fetchContext(_x3) {\n        return _fetchContext2.apply(this, arguments);\n      }\n\n      return _fetchContext;\n    }()\n  }]);\n\n  return ContextResolver;\n}();\n\nfunction _throwInvalidLocalContext(ctx) {\n  throw new JsonLdError('Invalid JSON-LD syntax; @context must be an object.', 'jsonld.SyntaxError', {\n    code: 'invalid local context',\n    context: ctx\n  });\n}\n/**\n * Resolve all relative `@context` URLs in the given context by inline\n * replacing them with absolute URLs.\n *\n * @param context the context.\n * @param base the base IRI to use to resolve relative IRIs.\n */\n\n\nfunction _resolveContextUrls(_ref6) {\n  var context = _ref6.context,\n      base = _ref6.base;\n\n  if (!context) {\n    return;\n  }\n\n  var ctx = context['@context'];\n\n  if (_isString(ctx)) {\n    context['@context'] = prependBase(base, ctx);\n    return;\n  }\n\n  if (_isArray(ctx)) {\n    for (var i = 0; i < ctx.length; ++i) {\n      var element = ctx[i];\n\n      if (_isString(element)) {\n        ctx[i] = prependBase(base, element);\n        continue;\n      }\n\n      if (_isObject(element)) {\n        _resolveContextUrls({\n          context: {\n            '@context': element\n          },\n          base: base\n        });\n      }\n    }\n\n    return;\n  }\n\n  if (!_isObject(ctx)) {\n    // no @context URLs can be found in non-object\n    return;\n  } // ctx is an object, resolve any context URLs in terms\n\n\n  for (var term in ctx) {\n    _resolveContextUrls({\n      context: ctx[term],\n      base: base\n    });\n  }\n}","map":{"version":3,"sources":["D:/My Works/Git/cowin-verify/node_modules/jsonld/lib/ContextResolver.js"],"names":["require","_isArray","isArray","_isObject","isObject","_isString","isString","prependBase","JsonLdError","ResolvedContext","MAX_CONTEXT_URLS","module","exports","sharedCache","perOpCache","Map","context","documentLoader","base","cycles","Set","allResolved","ctx","resolved","_get","_resolveRemoteContext","url","push","document","_throwInvalidLocalContext","key","JSON","stringify","_cacheResolvedContext","tag","get","tagMap","set","undefined","_fetchContext","remoteDoc","documentUrl","_resolveContextUrls","resolve","size","code","max","has","add","parse","cause","contextUrl","i","length","element","term"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2019 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst {\n  isArray: _isArray,\n  isObject: _isObject,\n  isString: _isString,\n} = require('./types');\nconst {prependBase} = require('./url');\nconst JsonLdError = require('./JsonLdError');\nconst ResolvedContext = require('./ResolvedContext');\n\nconst MAX_CONTEXT_URLS = 10;\n\nmodule.exports = class ContextResolver {\n  /**\n   * Creates a ContextResolver.\n   *\n   * @param sharedCache a shared LRU cache with `get` and `set` APIs.\n   */\n  constructor({sharedCache}) {\n    this.perOpCache = new Map();\n    this.sharedCache = sharedCache;\n  }\n\n  async resolve({context, documentLoader, base, cycles = new Set()}) {\n    // process `@context`\n    if(context && _isObject(context) && context['@context']) {\n      context = context['@context'];\n    }\n\n    // context is one or more contexts\n    if(!_isArray(context)) {\n      context = [context];\n    }\n\n    // resolve each context in the array\n    const allResolved = [];\n    for(const ctx of context) {\n      if(_isString(ctx)) {\n        // see if `ctx` has been resolved before...\n        let resolved = this._get(ctx);\n        if(!resolved) {\n          // not resolved yet, resolve\n          resolved = await this._resolveRemoteContext(\n            {url: ctx, documentLoader, base, cycles});\n        }\n\n        // add to output and continue\n        if(_isArray(resolved)) {\n          allResolved.push(...resolved);\n        } else {\n          allResolved.push(resolved);\n        }\n        continue;\n      }\n      if(ctx === null) {\n        // handle `null` context, nothing to cache\n        allResolved.push(new ResolvedContext({document: null}));\n        continue;\n      }\n      if(!_isObject(ctx)) {\n        _throwInvalidLocalContext(context);\n      }\n      // context is an object, get/create `ResolvedContext` for it\n      const key = JSON.stringify(ctx);\n      let resolved = this._get(key);\n      if(!resolved) {\n        // create a new static `ResolvedContext` and cache it\n        resolved = new ResolvedContext({document: ctx});\n        this._cacheResolvedContext({key, resolved, tag: 'static'});\n      }\n      allResolved.push(resolved);\n    }\n\n    return allResolved;\n  }\n\n  _get(key) {\n    // get key from per operation cache; no `tag` is used with this cache so\n    // any retrieved context will always be the same during a single operation\n    let resolved = this.perOpCache.get(key);\n    if(!resolved) {\n      // see if the shared cache has a `static` entry for this URL\n      const tagMap = this.sharedCache.get(key);\n      if(tagMap) {\n        resolved = tagMap.get('static');\n        if(resolved) {\n          this.perOpCache.set(key, resolved);\n        }\n      }\n    }\n    return resolved;\n  }\n\n  _cacheResolvedContext({key, resolved, tag}) {\n    this.perOpCache.set(key, resolved);\n    if(tag !== undefined) {\n      let tagMap = this.sharedCache.get(key);\n      if(!tagMap) {\n        tagMap = new Map();\n        this.sharedCache.set(key, tagMap);\n      }\n      tagMap.set(tag, resolved);\n    }\n    return resolved;\n  }\n\n  async _resolveRemoteContext({url, documentLoader, base, cycles}) {\n    // resolve relative URL and fetch context\n    url = prependBase(base, url);\n    const {context, remoteDoc} = await this._fetchContext(\n      {url, documentLoader, cycles});\n\n    // update base according to remote document and resolve any relative URLs\n    base = remoteDoc.documentUrl || url;\n    _resolveContextUrls({context, base});\n\n    // resolve, cache, and return context\n    const resolved = await this.resolve(\n      {context, documentLoader, base, cycles});\n    this._cacheResolvedContext({key: url, resolved, tag: remoteDoc.tag});\n    return resolved;\n  }\n\n  async _fetchContext({url, documentLoader, cycles}) {\n    // check for max context URLs fetched during a resolve operation\n    if(cycles.size > MAX_CONTEXT_URLS) {\n      throw new JsonLdError(\n        'Maximum number of @context URLs exceeded.',\n        'jsonld.ContextUrlError',\n        {code: 'loading remote context failed', max: MAX_CONTEXT_URLS});\n    }\n\n    // check for context URL cycle\n    if(cycles.has(url)) {\n      throw new JsonLdError(\n        'Cyclical @context URLs detected.',\n        'jsonld.ContextUrlError',\n        {code: 'recursive context inclusion', url});\n    }\n\n    // track cycles\n    cycles.add(url);\n\n    let context;\n    let remoteDoc;\n\n    try {\n      remoteDoc = await documentLoader(url);\n      context = remoteDoc.document || null;\n      // parse string context as JSON\n      if(_isString(context)) {\n        context = JSON.parse(context);\n      }\n    } catch(e) {\n      throw new JsonLdError(\n        'Dereferencing a URL did not result in a valid JSON-LD object. ' +\n        'Possible causes are an inaccessible URL perhaps due to ' +\n        'a same-origin policy (ensure the server uses CORS if you are ' +\n        'using client-side JavaScript), too many redirects, a ' +\n        'non-JSON response, or more than one HTTP Link Header was ' +\n        'provided for a remote context.',\n        'jsonld.InvalidUrl',\n        {code: 'loading remote context failed', url, cause: e});\n    }\n\n    // ensure ctx is an object\n    if(!_isObject(context)) {\n      throw new JsonLdError(\n        'Dereferencing a URL did not result in a JSON object. The ' +\n        'response was valid JSON, but it was not a JSON object.',\n        'jsonld.InvalidUrl', {code: 'invalid remote context', url});\n    }\n\n    // use empty context if no @context key is present\n    if(!('@context' in context)) {\n      context = {'@context': {}};\n    } else {\n      context = {'@context': context['@context']};\n    }\n\n    // append @context URL to context if given\n    if(remoteDoc.contextUrl) {\n      if(!_isArray(context['@context'])) {\n        context['@context'] = [context['@context']];\n      }\n      context['@context'].push(remoteDoc.contextUrl);\n    }\n\n    return {context, remoteDoc};\n  }\n};\n\nfunction _throwInvalidLocalContext(ctx) {\n  throw new JsonLdError(\n    'Invalid JSON-LD syntax; @context must be an object.',\n    'jsonld.SyntaxError', {\n      code: 'invalid local context', context: ctx\n    });\n}\n\n/**\n * Resolve all relative `@context` URLs in the given context by inline\n * replacing them with absolute URLs.\n *\n * @param context the context.\n * @param base the base IRI to use to resolve relative IRIs.\n */\nfunction _resolveContextUrls({context, base}) {\n  if(!context) {\n    return;\n  }\n\n  const ctx = context['@context'];\n\n  if(_isString(ctx)) {\n    context['@context'] = prependBase(base, ctx);\n    return;\n  }\n\n  if(_isArray(ctx)) {\n    for(let i = 0; i < ctx.length; ++i) {\n      const element = ctx[i];\n      if(_isString(element)) {\n        ctx[i] = prependBase(base, element);\n        continue;\n      }\n      if(_isObject(element)) {\n        _resolveContextUrls({context: {'@context': element}, base});\n      }\n    }\n    return;\n  }\n\n  if(!_isObject(ctx)) {\n    // no @context URLs can be found in non-object\n    return;\n  }\n\n  // ctx is an object, resolve any context URLs in terms\n  for(const term in ctx) {\n    _resolveContextUrls({context: ctx[term], base});\n  }\n}\n"]},"metadata":{},"sourceType":"script"}